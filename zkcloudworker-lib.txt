Directory: zkcloudworker-lib

Directory Structure:
```
.
├── .gitignore
├── .yarnrc.yml
├── LICENSE
├── README.md
├── dist
│   ├── dist/README.md
│   │   ├── dist/lib/ts
│   │   │   ├── dist/lib/ts/src
│   │   │   │   ├── dist/lib/ts/src/cloud
│   │   │   │   │   ├── dist/lib/ts/src/cloud/config.d.ts
│   │   │   │   │   ├── dist/lib/ts/src/cloud/config.js
│   │   │   │   │   ├── dist/lib/ts/src/cloud/index.d.ts
│   │   │   │   │   ├── dist/lib/ts/src/cloud/index.js
│   │   │   │   │   ├── dist/lib/ts/src/cloud/networks.d.ts
│   │   │   │   │   ├── dist/lib/ts/src/cloud/networks.js
│   │   │   │   │   ├── dist/lib/ts/src/cloud/utils
│   │   │   │   │   │   ├── dist/lib/ts/src/cloud/utils/base64.d.ts
│   │   │   │   │   │   ├── dist/lib/ts/src/cloud/utils/base64.js
│   │   │   │   │   │   ├── dist/lib/ts/src/cloud/utils/graphql.d.ts
│   │   │   │   │   │   ├── dist/lib/ts/src/cloud/utils/graphql.js
│   │   │   │   │   │   ├── dist/lib/ts/src/cloud/utils/index.d.ts
│   │   │   │   │   │   ├── dist/lib/ts/src/cloud/utils/index.js
│   │   │   │   │   │   ├── dist/lib/ts/src/cloud/utils/utils.d.ts
│   │   │   │   │   │   └── dist/lib/ts/src/cloud/utils/utils.js
│   │   │   │   │   └── dist/lib/ts/src/cloud/worker
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/cloud.d.ts
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/cloud.js
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/index.d.ts
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/index.js
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/job.d.ts
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/job.js
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/task.d.ts
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/task.js
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/transaction.d.ts
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/transaction.js
│   │   │   │   │       ├── dist/lib/ts/src/cloud/worker/worker.d.ts
│   │   │   │   │       └── dist/lib/ts/src/cloud/worker/worker.js
│   │   │   │   ├── dist/lib/ts/src/index.d.ts
│   │   │   │   ├── dist/lib/ts/src/index.js
│   │   │   │   └── dist/lib/ts/src/mina
│   │   │   │       ├── dist/lib/ts/src/mina/api
│   │   │   │       │   ├── dist/lib/ts/src/mina/api/api.d.ts
│   │   │   │       │   └── dist/lib/ts/src/mina/api/api.js
│   │   │   │       ├── dist/lib/ts/src/mina/encryption
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/client.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/client.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/connections.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/connections.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/encryption.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/encryption.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/index.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/index.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/encryption/messages.d.ts
│   │   │   │       │   └── dist/lib/ts/src/mina/encryption/messages.js
│   │   │   │       ├── dist/lib/ts/src/mina/index.d.ts
│   │   │   │       ├── dist/lib/ts/src/mina/index.js
│   │   │   │       ├── dist/lib/ts/src/mina/local
│   │   │   │       │   ├── dist/lib/ts/src/mina/local/local.d.ts
│   │   │   │       │   └── dist/lib/ts/src/mina/local/local.js
│   │   │   │       ├── dist/lib/ts/src/mina/utils
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/base64.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/base64.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/fee.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/fee.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/fetch.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/fetch.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/fields.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/fields.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/index.d.ts
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/index.js
│   │   │   │       │   ├── dist/lib/ts/src/mina/utils/mina.d.ts
│   │   │   │       │   └── dist/lib/ts/src/mina/utils/mina.js
│   │   │   │       └── dist/lib/ts/src/mina/verification
│   │   │   │           ├── dist/lib/ts/src/mina/verification/index.d.ts
│   │   │   │           ├── dist/lib/ts/src/mina/verification/index.js
│   │   │   │           ├── dist/lib/ts/src/mina/verification/verification.d.ts
│   │   │   │           └── dist/lib/ts/src/mina/verification/verification.js
│   │   │   └── dist/lib/ts/tsconfig.tsbuildinfo
│   │   └── dist/lib/web
│   │       ├── dist/lib/web/src
│   │       │   ├── dist/lib/web/src/cloud
│   │       │   │   ├── dist/lib/web/src/cloud/config.d.ts
│   │       │   │   ├── dist/lib/web/src/cloud/config.js
│   │       │   │   ├── dist/lib/web/src/cloud/config.js.map
│   │       │   │   ├── dist/lib/web/src/cloud/index.d.ts
│   │       │   │   ├── dist/lib/web/src/cloud/index.js
│   │       │   │   ├── dist/lib/web/src/cloud/index.js.map
│   │       │   │   ├── dist/lib/web/src/cloud/networks.d.ts
│   │       │   │   ├── dist/lib/web/src/cloud/networks.js
│   │       │   │   ├── dist/lib/web/src/cloud/networks.js.map
│   │       │   │   ├── dist/lib/web/src/cloud/utils
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/base64.d.ts
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/base64.js
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/base64.js.map
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/graphql.d.ts
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/graphql.js
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/graphql.js.map
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/index.d.ts
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/index.js
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/index.js.map
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/utils.d.ts
│   │       │   │   │   ├── dist/lib/web/src/cloud/utils/utils.js
│   │       │   │   │   └── dist/lib/web/src/cloud/utils/utils.js.map
│   │       │   │   └── dist/lib/web/src/cloud/worker
│   │       │   │       ├── dist/lib/web/src/cloud/worker/cloud.d.ts
│   │       │   │       ├── dist/lib/web/src/cloud/worker/cloud.js
│   │       │   │       ├── dist/lib/web/src/cloud/worker/cloud.js.map
│   │       │   │       ├── dist/lib/web/src/cloud/worker/index.d.ts
│   │       │   │       ├── dist/lib/web/src/cloud/worker/index.js
│   │       │   │       ├── dist/lib/web/src/cloud/worker/index.js.map
│   │       │   │       ├── dist/lib/web/src/cloud/worker/job.d.ts
│   │       │   │       ├── dist/lib/web/src/cloud/worker/job.js
│   │       │   │       ├── dist/lib/web/src/cloud/worker/job.js.map
│   │       │   │       ├── dist/lib/web/src/cloud/worker/task.d.ts
│   │       │   │       ├── dist/lib/web/src/cloud/worker/task.js
│   │       │   │       ├── dist/lib/web/src/cloud/worker/task.js.map
│   │       │   │       ├── dist/lib/web/src/cloud/worker/transaction.d.ts
│   │       │   │       ├── dist/lib/web/src/cloud/worker/transaction.js
│   │       │   │       ├── dist/lib/web/src/cloud/worker/transaction.js.map
│   │       │   │       ├── dist/lib/web/src/cloud/worker/worker.d.ts
│   │       │   │       ├── dist/lib/web/src/cloud/worker/worker.js
│   │       │   │       └── dist/lib/web/src/cloud/worker/worker.js.map
│   │       │   ├── dist/lib/web/src/index.d.ts
│   │       │   ├── dist/lib/web/src/index.js
│   │       │   ├── dist/lib/web/src/index.js.map
│   │       │   └── dist/lib/web/src/mina
│   │       │       ├── dist/lib/web/src/mina/api
│   │       │       │   ├── dist/lib/web/src/mina/api/api.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/api/api.js
│   │       │       │   └── dist/lib/web/src/mina/api/api.js.map
│   │       │       ├── dist/lib/web/src/mina/encryption
│   │       │       │   ├── dist/lib/web/src/mina/encryption/client.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/encryption/client.js
│   │       │       │   ├── dist/lib/web/src/mina/encryption/client.js.map
│   │       │       │   ├── dist/lib/web/src/mina/encryption/connections.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/encryption/connections.js
│   │       │       │   ├── dist/lib/web/src/mina/encryption/connections.js.map
│   │       │       │   ├── dist/lib/web/src/mina/encryption/encryption.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/encryption/encryption.js
│   │       │       │   ├── dist/lib/web/src/mina/encryption/encryption.js.map
│   │       │       │   ├── dist/lib/web/src/mina/encryption/index.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/encryption/index.js
│   │       │       │   ├── dist/lib/web/src/mina/encryption/index.js.map
│   │       │       │   ├── dist/lib/web/src/mina/encryption/messages.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/encryption/messages.js
│   │       │       │   └── dist/lib/web/src/mina/encryption/messages.js.map
│   │       │       ├── dist/lib/web/src/mina/index.d.ts
│   │       │       ├── dist/lib/web/src/mina/index.js
│   │       │       ├── dist/lib/web/src/mina/index.js.map
│   │       │       ├── dist/lib/web/src/mina/local
│   │       │       │   ├── dist/lib/web/src/mina/local/local.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/local/local.js
│   │       │       │   └── dist/lib/web/src/mina/local/local.js.map
│   │       │       ├── dist/lib/web/src/mina/utils
│   │       │       │   ├── dist/lib/web/src/mina/utils/base64.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/utils/base64.js
│   │       │       │   ├── dist/lib/web/src/mina/utils/base64.js.map
│   │       │       │   ├── dist/lib/web/src/mina/utils/fee.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/utils/fee.js
│   │       │       │   ├── dist/lib/web/src/mina/utils/fee.js.map
│   │       │       │   ├── dist/lib/web/src/mina/utils/fetch.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/utils/fetch.js
│   │       │       │   ├── dist/lib/web/src/mina/utils/fetch.js.map
│   │       │       │   ├── dist/lib/web/src/mina/utils/fields.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/utils/fields.js
│   │       │       │   ├── dist/lib/web/src/mina/utils/fields.js.map
│   │       │       │   ├── dist/lib/web/src/mina/utils/index.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/utils/index.js
│   │       │       │   ├── dist/lib/web/src/mina/utils/index.js.map
│   │       │       │   ├── dist/lib/web/src/mina/utils/mina.d.ts
│   │       │       │   ├── dist/lib/web/src/mina/utils/mina.js
│   │       │       │   └── dist/lib/web/src/mina/utils/mina.js.map
│   │       │       └── dist/lib/web/src/mina/verification
│   │       │           ├── dist/lib/web/src/mina/verification/index.d.ts
│   │       │           ├── dist/lib/web/src/mina/verification/index.js
│   │       │           ├── dist/lib/web/src/mina/verification/index.js.map
│   │       │           ├── dist/lib/web/src/mina/verification/verification.d.ts
│   │       │           ├── dist/lib/web/src/mina/verification/verification.js
│   │       │           └── dist/lib/web/src/mina/verification/verification.js.map
│   │       └── dist/lib/web/tsconfig.web.tsbuildinfo
│   ├── dist/package.json
│   └── dist/yarn.lock
├── node
│   ├── node/files.ts
│   └── node/hash.ts
├── package.json
├── src
│   ├── src/cloud
│   │   ├── src/cloud/config.ts
│   │   ├── src/cloud/index.ts
│   │   ├── src/cloud/networks.ts
│   │   ├── src/cloud/utils
│   │   │   ├── src/cloud/utils/base64.ts
│   │   │   ├── src/cloud/utils/graphql.ts
│   │   │   ├── src/cloud/utils/index.ts
│   │   │   └── src/cloud/utils/utils.ts
│   │   └── src/cloud/worker
│   │       ├── src/cloud/worker/cloud.ts
│   │       ├── src/cloud/worker/index.ts
│   │       ├── src/cloud/worker/job.ts
│   │       ├── src/cloud/worker/task.ts
│   │       ├── src/cloud/worker/transaction.ts
│   │       └── src/cloud/worker/worker.ts
│   ├── src/index.ts
│   └── src/mina
│       ├── src/mina/api
│       │   └── src/mina/api/api.ts
│       ├── src/mina/encryption
│       │   ├── src/mina/encryption/client.ts
│       │   ├── src/mina/encryption/connections.ts
│       │   ├── src/mina/encryption/encryption.ts
│       │   ├── src/mina/encryption/index.ts
│       │   └── src/mina/encryption/messages.ts
│       ├── src/mina/index.ts
│       ├── src/mina/local
│       │   └── src/mina/local/local.ts
│       ├── src/mina/utils
│       │   ├── src/mina/utils/base64.ts
│       │   ├── src/mina/utils/fee.ts
│       │   ├── src/mina/utils/fetch.ts
│       │   ├── src/mina/utils/fields.ts
│       │   ├── src/mina/utils/index.ts
│       │   └── src/mina/utils/mina.ts
│       └── src/mina/verification
│           ├── src/mina/verification/index.ts
│           └── src/mina/verification/verification.ts
├── tsconfig.json
├── tsconfig.web.json
└── yarn.lock
```

Contents of LICENSE:
```
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

```

Contents of .yarnrc.yml:
```
nodeLinker: node-modules

```

Contents of README.md:
```
# zkCloudWorker library

In the fast-paced realm of ZK proving, zkCloudWorker stands out as a potential game-changer for both zkApp developers and users.

By delivering ultra-fast proving in the cloud, along with robust isolation, composability, and an excellent user experience (UX), zkCloudWorker has the potential to significantly streamline and expedite the development of MINA zkApps both on web and mobile devices.

Instead of downloading 1 GB of proving keys, compiling, and performing proofs on a web or mobile worker, a simple API call can be made to the powerful zkCloudWorker to launch a worker in the cloud. This offers ample memory, CPU power, and parallel processing capabilities for recursive proof calculations.

Privacy is maintained through the isolation of processes, encryption of all data, and the ability to process private data on the web using technologies like hashing and Merkle Tree calculations. Preprocessed data is then sent to the cloud worker.

This opens doors for a diverse range of Web2 developers to seamlessly enter the exciting world of the MINA protocol and o1js.

## Features

- Compiling the contract in the cloud.

- Calculating transactions proofs tx.prove().

- Calculating recursive proofs.

- Sending transactions to network.

- Verifying proofs.

- Providing deployers to pay the tx fee.

- API to be accessed inside the zkCloudWorker.

- API to be accessed inside the web application.

- Billing panel to show the cost of the running zkCloudWorkers to the developer.

- Web dashboard to easily deploy and access deployed zkCloudWorkers and their logs.

- Providing key-value off-chain storage for zkApps, up to 400K size for values.

- Providing file storage for zkApps, unlimited size.

- Encryption utilities for sending and storing the data in the encrypted form.

- Verifying the text of the contracts for uploading to the minascan.io explorer.

- Providing additional metadata for the transactions, including custom metadata defined by the developer and the conversion of the actions and events to the human-readable form as defined by the developer for publishing on the minascan.io explorer.

- Code templates and question-answer sets for the zkApp Umstad AI Chatbot.

- The CLI tool to deploy the code to the cloud and verify the code on the minascan.io.

- Availability of the zkCloudWorker for SmartContract, ZkProgram and general calculations, including running ProtoKit chains in case ProtoKit will support running on the serverless infrastructure, that is possible in principle.

- Custom integration of the zkApps for the cases that do not fit in the standard framework for some reason.

## Installation

```
yarn add zkcloudworker
```

## Documentation

https://docs.zkcloudworker.com

## Website

https://zkcloudworker.com

## Library on NPM

https://www.npmjs.com/package/zkcloudworker

## Faucet

https://faucet.minaprotocol.com

https://zeko.io/faucet

https://minanft.io/faucet

```

Contents of tsconfig.web.json:
```
{
  "compilerOptions": {
    "target": "ES2021",
    "outDir": "./dist/lib/web",
    "lib": ["ES2021", "DOM"],
    "moduleResolution": "node",
    "strict": true /* Enable all strict type-checking options. */,
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,
    "composite": true,
    "resolveJsonModule": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "strictPropertyInitialization": false,
    "useDefineForClassFields": false,
    "importHelpers": true,
    "noEmitOnError": false,
    "allowJs": true,
    "sourceMap": true
  },
  "include": ["src/**/*"]
}

```

Contents of yarn.lock:
```
# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 8
  cacheKey: 10c0

"@types/node@npm:^20.14.10":
  version: 20.14.10
  resolution: "@types/node@npm:20.14.10"
  dependencies:
    undici-types: "npm:~5.26.4"
  checksum: 10c0/0b06cff14365c2d0085dc16cc8cbea5c40ec09cfc1fea966be9eeecf35562760bfde8f88e86de6edfaf394501236e229d9c1084fad04fb4dec472ae245d8ae69
  languageName: node
  linkType: hard

"ansi-styles@npm:^4.1.0":
  version: 4.3.0
  resolution: "ansi-styles@npm:4.3.0"
  dependencies:
    color-convert: "npm:^2.0.1"
  checksum: 10c0/895a23929da416f2bd3de7e9cb4eabd340949328ab85ddd6e484a637d8f6820d485f53933446f5291c3b760cbc488beb8e88573dd0f9c7daf83dccc8fe81b041
  languageName: node
  linkType: hard

"asynckit@npm:^0.4.0":
  version: 0.4.0
  resolution: "asynckit@npm:0.4.0"
  checksum: 10c0/d73e2ddf20c4eb9337e1b3df1a0f6159481050a5de457c55b14ea2e5cb6d90bb69e004c9af54737a5ee0917fcf2c9e25de67777bbe58261847846066ba75bc9d
  languageName: node
  linkType: hard

"axios@npm:^1.7.2":
  version: 1.7.2
  resolution: "axios@npm:1.7.2"
  dependencies:
    follow-redirects: "npm:^1.15.6"
    form-data: "npm:^4.0.0"
    proxy-from-env: "npm:^1.1.0"
  checksum: 10c0/cbd47ce380fe045313364e740bb03b936420b8b5558c7ea36a4563db1258c658f05e40feb5ddd41f6633fdd96d37ac2a76f884dad599c5b0224b4c451b3fa7ae
  languageName: node
  linkType: hard

"blakejs@npm:1.2.1":
  version: 1.2.1
  resolution: "blakejs@npm:1.2.1"
  checksum: 10c0/c284557ce55b9c70203f59d381f1b85372ef08ee616a90162174d1291a45d3e5e809fdf9edab6e998740012538515152471dc4f1f9dbfa974ba2b9c1f7b9aad7
  languageName: node
  linkType: hard

"cachedir@npm:^2.4.0":
  version: 2.4.0
  resolution: "cachedir@npm:2.4.0"
  checksum: 10c0/76bff9009f2c446cd3777a4aede99af634a89670a67012b8041f65e951d3d36cefe8940341ea80c72219ee9913fa1f6146824cd9dfe9874a4bded728af7e6d76
  languageName: node
  linkType: hard

"chalk@npm:^4.1.2":
  version: 4.1.2
  resolution: "chalk@npm:4.1.2"
  dependencies:
    ansi-styles: "npm:^4.1.0"
    supports-color: "npm:^7.1.0"
  checksum: 10c0/4a3fef5cc34975c898ffe77141450f679721df9dde00f6c304353fa9c8b571929123b26a0e4617bde5018977eb655b31970c297b91b63ee83bb82aeb04666880
  languageName: node
  linkType: hard

"color-convert@npm:^2.0.1":
  version: 2.0.1
  resolution: "color-convert@npm:2.0.1"
  dependencies:
    color-name: "npm:~1.1.4"
  checksum: 10c0/37e1150172f2e311fe1b2df62c6293a342ee7380da7b9cfdba67ea539909afbd74da27033208d01d6d5cfc65ee7868a22e18d7e7648e004425441c0f8a15a7d7
  languageName: node
  linkType: hard

"color-name@npm:~1.1.4":
  version: 1.1.4
  resolution: "color-name@npm:1.1.4"
  checksum: 10c0/a1a3f914156960902f46f7f56bc62effc6c94e84b2cae157a526b1c1f74b677a47ec602bf68a61abfa2b42d15b7c5651c6dbe72a43af720bc588dff885b10f95
  languageName: node
  linkType: hard

"combined-stream@npm:^1.0.8":
  version: 1.0.8
  resolution: "combined-stream@npm:1.0.8"
  dependencies:
    delayed-stream: "npm:~1.0.0"
  checksum: 10c0/0dbb829577e1b1e839fa82b40c07ffaf7de8a09b935cadd355a73652ae70a88b4320db322f6634a4ad93424292fa80973ac6480986247f1734a1137debf271d5
  languageName: node
  linkType: hard

"delayed-stream@npm:~1.0.0":
  version: 1.0.0
  resolution: "delayed-stream@npm:1.0.0"
  checksum: 10c0/d758899da03392e6712f042bec80aa293bbe9e9ff1b2634baae6a360113e708b91326594c8a486d475c69d6259afb7efacdc3537bfcda1c6c648e390ce601b19
  languageName: node
  linkType: hard

"follow-redirects@npm:^1.15.6":
  version: 1.15.6
  resolution: "follow-redirects@npm:1.15.6"
  peerDependenciesMeta:
    debug:
      optional: true
  checksum: 10c0/9ff767f0d7be6aa6870c82ac79cf0368cd73e01bbc00e9eb1c2a16fbb198ec105e3c9b6628bb98e9f3ac66fe29a957b9645bcb9a490bb7aa0d35f908b6b85071
  languageName: node
  linkType: hard

"form-data@npm:^4.0.0":
  version: 4.0.0
  resolution: "form-data@npm:4.0.0"
  dependencies:
    asynckit: "npm:^0.4.0"
    combined-stream: "npm:^1.0.8"
    mime-types: "npm:^2.1.12"
  checksum: 10c0/cb6f3ac49180be03ff07ba3ff125f9eba2ff0b277fb33c7fc47569fc5e616882c5b1c69b9904c4c4187e97dd0419dd03b134174756f296dec62041e6527e2c6e
  languageName: node
  linkType: hard

"has-flag@npm:^4.0.0":
  version: 4.0.0
  resolution: "has-flag@npm:4.0.0"
  checksum: 10c0/2e789c61b7888d66993e14e8331449e525ef42aac53c627cc53d1c3334e768bcb6abdc4f5f0de1478a25beec6f0bd62c7549058b7ac53e924040d4f301f02fd1
  languageName: node
  linkType: hard

"isomorphic-fetch@npm:^3.0.0":
  version: 3.0.0
  resolution: "isomorphic-fetch@npm:3.0.0"
  dependencies:
    node-fetch: "npm:^2.6.1"
    whatwg-fetch: "npm:^3.4.1"
  checksum: 10c0/511b1135c6d18125a07de661091f5e7403b7640060355d2d704ce081e019bc1862da849482d079ce5e2559b8976d3de7709566063aec1b908369c0b98a2b075b
  languageName: node
  linkType: hard

"js-sha256@npm:^0.9.0":
  version: 0.9.0
  resolution: "js-sha256@npm:0.9.0"
  checksum: 10c0/f20b9245f6ebe666f42ca05536f777301132fb1aa7fbc22f10578fa302717a6cca507344894efdeaf40a011256eb2f7d517b94ac7105bd5cf087fa61551ad634
  languageName: node
  linkType: hard

"mime-db@npm:1.52.0":
  version: 1.52.0
  resolution: "mime-db@npm:1.52.0"
  checksum: 10c0/0557a01deebf45ac5f5777fe7740b2a5c309c6d62d40ceab4e23da9f821899ce7a900b7ac8157d4548ddbb7beffe9abc621250e6d182b0397ec7f10c7b91a5aa
  languageName: node
  linkType: hard

"mime-types@npm:^2.1.12":
  version: 2.1.35
  resolution: "mime-types@npm:2.1.35"
  dependencies:
    mime-db: "npm:1.52.0"
  checksum: 10c0/82fb07ec56d8ff1fc999a84f2f217aa46cb6ed1033fefaabd5785b9a974ed225c90dc72fff460259e66b95b73648596dbcc50d51ed69cdf464af2d237d3149b2
  languageName: node
  linkType: hard

"nats@npm:^2.28.0":
  version: 2.28.0
  resolution: "nats@npm:2.28.0"
  dependencies:
    nkeys.js: "npm:1.1.0"
  checksum: 10c0/a14738a8e2730f76e164e3debf99d5d7d10ca93346e87c7e4c3e56ac81167be1565baae92bb5785f374c0483c79e29879984fda76a21a1de0d5f1f047c0535bb
  languageName: node
  linkType: hard

"nkeys.js@npm:1.1.0":
  version: 1.1.0
  resolution: "nkeys.js@npm:1.1.0"
  dependencies:
    tweetnacl: "npm:1.0.3"
  checksum: 10c0/44ff8d61e46d2b345351ed7844d66036a815aeca23927def6ca258e27a18a1678fe5ab161c5cf0b6e3a3993a945d422b71036986d09669b214540c8491478bef
  languageName: node
  linkType: hard

"node-fetch@npm:^2.6.1":
  version: 2.7.0
  resolution: "node-fetch@npm:2.7.0"
  dependencies:
    whatwg-url: "npm:^5.0.0"
  peerDependencies:
    encoding: ^0.1.0
  peerDependenciesMeta:
    encoding:
      optional: true
  checksum: 10c0/b55786b6028208e6fbe594ccccc213cab67a72899c9234eb59dba51062a299ea853210fcf526998eaa2867b0963ad72338824450905679ff0fa304b8c5093ae8
  languageName: node
  linkType: hard

"o1js@npm:^1.4.0":
  version: 1.4.0
  resolution: "o1js@npm:1.4.0"
  dependencies:
    blakejs: "npm:1.2.1"
    cachedir: "npm:^2.4.0"
    isomorphic-fetch: "npm:^3.0.0"
    js-sha256: "npm:^0.9.0"
    reflect-metadata: "npm:^0.1.13"
    tslib: "npm:^2.3.0"
  bin:
    snarky-run: src/build/run.js
  checksum: 10c0/5c193005bb73fdb14c9af5ebf8512a850c42bf1c4123932d75a88f31a8962b4fdf01215f191690dd09a13921c8e8332b4684486bc1782e1761cbc38408cf7ee8
  languageName: node
  linkType: hard

"proxy-from-env@npm:^1.1.0":
  version: 1.1.0
  resolution: "proxy-from-env@npm:1.1.0"
  checksum: 10c0/fe7dd8b1bdbbbea18d1459107729c3e4a2243ca870d26d34c2c1bcd3e4425b7bcc5112362df2d93cc7fb9746f6142b5e272fd1cc5c86ddf8580175186f6ad42b
  languageName: node
  linkType: hard

"reflect-metadata@npm:^0.1.13":
  version: 0.1.14
  resolution: "reflect-metadata@npm:0.1.14"
  checksum: 10c0/3a6190c7f6cb224f26a012d11f9e329360c01c1945e2cbefea23976a8bacf9db6b794aeb5bf18adcb673c448a234fbc06fc41853c00a6c206b30f0777ecf019e
  languageName: node
  linkType: hard

"supports-color@npm:^7.1.0":
  version: 7.2.0
  resolution: "supports-color@npm:7.2.0"
  dependencies:
    has-flag: "npm:^4.0.0"
  checksum: 10c0/afb4c88521b8b136b5f5f95160c98dee7243dc79d5432db7efc27efb219385bbc7d9427398e43dd6cc730a0f87d5085ce1652af7efbe391327bc0a7d0f7fc124
  languageName: node
  linkType: hard

"tr46@npm:~0.0.3":
  version: 0.0.3
  resolution: "tr46@npm:0.0.3"
  checksum: 10c0/047cb209a6b60c742f05c9d3ace8fa510bff609995c129a37ace03476a9b12db4dbf975e74600830ef0796e18882b2381fb5fb1f6b4f96b832c374de3ab91a11
  languageName: node
  linkType: hard

"tslib@npm:^2.3.0":
  version: 2.6.2
  resolution: "tslib@npm:2.6.2"
  checksum: 10c0/e03a8a4271152c8b26604ed45535954c0a45296e32445b4b87f8a5abdb2421f40b59b4ca437c4346af0f28179780d604094eb64546bee2019d903d01c6c19bdb
  languageName: node
  linkType: hard

"tweetnacl@npm:1.0.3":
  version: 1.0.3
  resolution: "tweetnacl@npm:1.0.3"
  checksum: 10c0/069d9df51e8ad4a89fbe6f9806c68e06c65be3c7d42f0701cc43dba5f0d6064686b238bbff206c5addef8854e3ce00c643bff59432ea2f2c639feab0ee1a93f9
  languageName: node
  linkType: hard

"typescript@npm:5.5.3":
  version: 5.5.3
  resolution: "typescript@npm:5.5.3"
  bin:
    tsc: bin/tsc
    tsserver: bin/tsserver
  checksum: 10c0/f52c71ccbc7080b034b9d3b72051d563601a4815bf3e39ded188e6ce60813f75dbedf11ad15dd4d32a12996a9ed8c7155b46c93a9b9c9bad1049766fe614bbdd
  languageName: node
  linkType: hard

"typescript@patch:typescript@npm%3A5.5.3#optional!builtin<compat/typescript>":
  version: 5.5.3
  resolution: "typescript@patch:typescript@npm%3A5.5.3#optional!builtin<compat/typescript>::version=5.5.3&hash=5adc0c"
  bin:
    tsc: bin/tsc
    tsserver: bin/tsserver
  checksum: 10c0/5a437c416251334deeaf29897157032311f3f126547cfdc4b133768b606cb0e62bcee733bb97cf74c42fe7268801aea1392d8e40988cdef112e9546eba4c03c5
  languageName: node
  linkType: hard

"undici-types@npm:~5.26.4":
  version: 5.26.5
  resolution: "undici-types@npm:5.26.5"
  checksum: 10c0/bb673d7876c2d411b6eb6c560e0c571eef4a01c1c19925175d16e3a30c4c428181fb8d7ae802a261f283e4166a0ac435e2f505743aa9e45d893f9a3df017b501
  languageName: node
  linkType: hard

"webidl-conversions@npm:^3.0.0":
  version: 3.0.1
  resolution: "webidl-conversions@npm:3.0.1"
  checksum: 10c0/5612d5f3e54760a797052eb4927f0ddc01383550f542ccd33d5238cfd65aeed392a45ad38364970d0a0f4fea32e1f4d231b3d8dac4a3bdd385e5cf802ae097db
  languageName: node
  linkType: hard

"whatwg-fetch@npm:^3.4.1":
  version: 3.6.20
  resolution: "whatwg-fetch@npm:3.6.20"
  checksum: 10c0/fa972dd14091321d38f36a4d062298df58c2248393ef9e8b154493c347c62e2756e25be29c16277396046d6eaa4b11bd174f34e6403fff6aaca9fb30fa1ff46d
  languageName: node
  linkType: hard

"whatwg-url@npm:^5.0.0":
  version: 5.0.0
  resolution: "whatwg-url@npm:5.0.0"
  dependencies:
    tr46: "npm:~0.0.3"
    webidl-conversions: "npm:^3.0.0"
  checksum: 10c0/1588bed84d10b72d5eec1d0faa0722ba1962f1821e7539c535558fb5398d223b0c50d8acab950b8c488b4ba69043fd833cc2697056b167d8ad46fac3995a55d5
  languageName: node
  linkType: hard

"zkcloudworker@workspace:.":
  version: 0.0.0-use.local
  resolution: "zkcloudworker@workspace:."
  dependencies:
    "@types/node": "npm:^20.14.10"
    axios: "npm:^1.7.2"
    chalk: "npm:^4.1.2"
    nats: "npm:^2.28.0"
    o1js: "npm:^1.4.0"
    typescript: "npm:5.5.3"
  languageName: unknown
  linkType: soft

```

Contents of package.json:
```
{
  "name": "zkcloudworker",
  "description": "zkCloudWorker library",
  "keywords": [
    "cloud",
    "proofs",
    "proving",
    "minanft",
    "socialcap",
    "library",
    "TypeScript",
    "mina",
    "zkapp",
    "zk",
    "blockchain",
    "web3",
    "zero knowledge"
  ],
  "version": "0.12.2",
  "homepage": "https://docs.zkcloudworker.com",
  "repository": "git@zkcloudworker.github.com:zkcloudworker/zkcloudworker-lib.git",
  "main": "src/index.ts",
  "author": "dfst.io",
  "license": "Apache-2.0",
  "type": "module",
  "scripts": {
    "compile": "rm -rf dist/lib && tsc && tsc --build tsconfig.web.json",
    "login": "yarn npm login",
    "publish": "yarn compile && cd dist && yarn npm publish --access public && cd .."
  },
  "dependencies": {
    "axios": "^1.7.2",
    "chalk": "^4.1.2",
    "nats": "^2.28.0",
    "o1js": "^1.4.0"
  },
  "devDependencies": {
    "@types/node": "^20.14.10",
    "typescript": "5.5.3"
  },
  "packageManager": "yarn@4.1.1"
}

```

Contents of tsconfig.json:
```
{
  "compilerOptions": {
    "target": "es2021" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */,
    "lib": ["es2021"],
    "module": "CommonJS" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    "outDir": "./dist/lib/ts" /* Redirect output structure to the directory. */,
    "strict": true /* Enable all strict type-checking options. */,
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,
    "composite": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "strictPropertyInitialization": false,
    "resolveJsonModule": true
  },
  "typedocOptions": {
    "entryPoints": ["src/index.ts"],
    "out": "docs",
    "plugin": [],
    "excludeExternals": true,
    "sourceLinkTemplate": "https://github.com/zkcloudworker/zkcloudworker-lib/blob/master/{path}#L{line}"
  },
  "include": ["src/**/*"],
  "exclude": [
    "dist/**",
    "tests/**",
    "docs/**",
    "experimental/**",
    "mycache/**",
    "nftcache/**",
    "experimental/**",
    "node_modules",
    "deprecated/**",
    "images/**"
  ],
  "ts-node": {
    "esm": true, // «———— enabling ESM for ts-node
    "experimentalSpecifierResolution": "node"
  }
}

```

Contents of dist/README.md:
```
# zkCloudWorker library

In the fast-paced realm of ZK proving, zkCloudWorker stands out as a potential game-changer for both zkApp developers and users.

By delivering ultra-fast proving in the cloud, along with robust isolation, composability, and an excellent user experience (UX), zkCloudWorker has the potential to significantly streamline and expedite the development of MINA zkApps both on web and mobile devices.

Instead of downloading 1 GB of proving keys, compiling, and performing proofs on a web or mobile worker, a simple API call can be made to the powerful zkCloudWorker to launch a worker in the cloud. This offers ample memory, CPU power, and parallel processing capabilities for recursive proof calculations.

Privacy is maintained through the isolation of processes, encryption of all data, and the ability to process private data on the web using technologies like hashing and Merkle Tree calculations. Preprocessed data is then sent to the cloud worker.

This opens doors for a diverse range of Web2 developers to seamlessly enter the exciting world of the MINA protocol and o1js.

## Features

- Compiling the contract in the cloud.

- Calculating transactions proofs tx.prove().

- Calculating recursive proofs.

- Sending transactions to network.

- Verifying proofs.

- Providing deployers to pay the tx fee.

- API to be accessed inside the zkCloudWorker.

- API to be accessed inside the web application.

- Billing panel to show the cost of the running zkCloudWorkers to the developer.

- Web dashboard to easily deploy and access deployed zkCloudWorkers and their logs.

- Providing key-value off-chain storage for zkApps, up to 400K size for values.

- Providing file storage for zkApps, unlimited size.

- Encryption utilities for sending and storing the data in the encrypted form.

- Verifying the text of the contracts for uploading to the minascan.io explorer.

- Providing additional metadata for the transactions, including custom metadata defined by the developer and the conversion of the actions and events to the human-readable form as defined by the developer for publishing on the minascan.io explorer.

- Code templates and question-answer sets for the zkApp Umstad AI Chatbot.

- The CLI tool to deploy the code to the cloud and verify the code on the minascan.io.

- Availability of the zkCloudWorker for SmartContract, ZkProgram and general calculations, including running ProtoKit chains in case ProtoKit will support running on the serverless infrastructure, that is possible in principle.

- Custom integration of the zkApps for the cases that do not fit in the standard framework for some reason.

## Installation

```
yarn add zkcloudworker
```

## Documentation

https://docs.zkcloudworker.com

## Website

https://zkcloudworker.com

## Library on NPM

https://www.npmjs.com/package/zkcloudworker

## Homomorphic Encryption Example

https://github.com/dfstio/he-contract-demo

## Faucet

https://faucet.minaprotocol.com

https://minanft.io/faucet

```

Contents of dist/yarn.lock:
```
# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 8
  cacheKey: 10c0

"asynckit@npm:^0.4.0":
  version: 0.4.0
  resolution: "asynckit@npm:0.4.0"
  checksum: 10c0/d73e2ddf20c4eb9337e1b3df1a0f6159481050a5de457c55b14ea2e5cb6d90bb69e004c9af54737a5ee0917fcf2c9e25de67777bbe58261847846066ba75bc9d
  languageName: node
  linkType: hard

"axios@npm:^1.6.7":
  version: 1.6.7
  resolution: "axios@npm:1.6.7"
  dependencies:
    follow-redirects: "npm:^1.15.4"
    form-data: "npm:^4.0.0"
    proxy-from-env: "npm:^1.1.0"
  checksum: 10c0/131bf8e62eee48ca4bd84e6101f211961bf6a21a33b95e5dfb3983d5a2fe50d9fffde0b57668d7ce6f65063d3dc10f2212cbcb554f75cfca99da1c73b210358d
  languageName: node
  linkType: hard

"combined-stream@npm:^1.0.8":
  version: 1.0.8
  resolution: "combined-stream@npm:1.0.8"
  dependencies:
    delayed-stream: "npm:~1.0.0"
  checksum: 10c0/0dbb829577e1b1e839fa82b40c07ffaf7de8a09b935cadd355a73652ae70a88b4320db322f6634a4ad93424292fa80973ac6480986247f1734a1137debf271d5
  languageName: node
  linkType: hard

"delayed-stream@npm:~1.0.0":
  version: 1.0.0
  resolution: "delayed-stream@npm:1.0.0"
  checksum: 10c0/d758899da03392e6712f042bec80aa293bbe9e9ff1b2634baae6a360113e708b91326594c8a486d475c69d6259afb7efacdc3537bfcda1c6c648e390ce601b19
  languageName: node
  linkType: hard

"follow-redirects@npm:^1.15.4":
  version: 1.15.5
  resolution: "follow-redirects@npm:1.15.5"
  peerDependenciesMeta:
    debug:
      optional: true
  checksum: 10c0/418d71688ceaf109dfd6f85f747a0c75de30afe43a294caa211def77f02ef19865b547dfb73fde82b751e1cc507c06c754120b848fe5a7400b0a669766df7615
  languageName: node
  linkType: hard

"form-data@npm:^4.0.0":
  version: 4.0.0
  resolution: "form-data@npm:4.0.0"
  dependencies:
    asynckit: "npm:^0.4.0"
    combined-stream: "npm:^1.0.8"
    mime-types: "npm:^2.1.12"
  checksum: 10c0/cb6f3ac49180be03ff07ba3ff125f9eba2ff0b277fb33c7fc47569fc5e616882c5b1c69b9904c4c4187e97dd0419dd03b134174756f296dec62041e6527e2c6e
  languageName: node
  linkType: hard

"mime-db@npm:1.52.0":
  version: 1.52.0
  resolution: "mime-db@npm:1.52.0"
  checksum: 10c0/0557a01deebf45ac5f5777fe7740b2a5c309c6d62d40ceab4e23da9f821899ce7a900b7ac8157d4548ddbb7beffe9abc621250e6d182b0397ec7f10c7b91a5aa
  languageName: node
  linkType: hard

"mime-types@npm:^2.1.12":
  version: 2.1.35
  resolution: "mime-types@npm:2.1.35"
  dependencies:
    mime-db: "npm:1.52.0"
  checksum: 10c0/82fb07ec56d8ff1fc999a84f2f217aa46cb6ed1033fefaabd5785b9a974ed225c90dc72fff460259e66b95b73648596dbcc50d51ed69cdf464af2d237d3149b2
  languageName: node
  linkType: hard

"proxy-from-env@npm:^1.1.0":
  version: 1.1.0
  resolution: "proxy-from-env@npm:1.1.0"
  checksum: 10c0/fe7dd8b1bdbbbea18d1459107729c3e4a2243ca870d26d34c2c1bcd3e4425b7bcc5112362df2d93cc7fb9746f6142b5e272fd1cc5c86ddf8580175186f6ad42b
  languageName: node
  linkType: hard

"zkcloudworker@workspace:.":
  version: 0.0.0-use.local
  resolution: "zkcloudworker@workspace:."
  dependencies:
    axios: "npm:^1.6.7"
  peerDependencies:
    o1js: ^0.16.2
  languageName: unknown
  linkType: soft

```

Contents of dist/package.json:
```
{
  "name": "zkcloudworker",
  "version": "0.12.2",
  "description": "zkCloudWorker library",
  "author": "zkCloudWorker",
  "license": "Apache-2.0",
  "homepage": "https://docs.zkcloudworker.com",
  "bugs": {
    "url": "https://github.com/zkcloudworker/zkcloudworker-lib/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zkcloudworker/zkcloudworker-lib.git"
  },
  "main": "lib/web/src/index.js",
  "exports": {
    "types": "./lib/ts/src/index.d.ts",
    "browser": "./lib/web/src/index.js",
    "node": {
      "import": "./lib/ts/src/index.js",
      "require": "./lib/ts/src/index.js"
    },
    "default": "./lib/ts/src/index.js"
  },
  "types": "lib/web/src/index.d.ts",
  "files": [
    "lib",
    "package.json",
    "README.md"
  ],
  "engines": {
    "node": ">=18.14.0"
  },
  "keywords": [
    "javascript",
    "typescript",
    "mina-protocol",
    "zkcloudworker",
    "cloudworker",
    "cloud",
    "proving"
  ],
  "dependencies": {
    "axios": "^1.7.2",
    "chalk": "^4.1.2",
    "nats": "^2.27.0"
  },
  "peerDependencies": {
    "o1js": "^1.4.0"
  }
}

```

Contents of dist/lib/web/tsconfig.web.tsbuildinfo:
```
{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.es2021.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2016.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.date.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.es2021.promise.d.ts","../../../node_modules/typescript/lib/lib.es2021.string.d.ts","../../../node_modules/typescript/lib/lib.es2021.weakref.d.ts","../../../node_modules/typescript/lib/lib.es2021.intl.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../node_modules/typescript/lib/lib.decorators.d.ts","../../../node_modules/typescript/lib/lib.decorators.legacy.d.ts","../../../node_modules/tslib/tslib.d.ts","../../../src/cloud/utils/graphql.ts","../../../src/cloud/utils/utils.ts","../../../src/cloud/utils/base64.ts","../../../src/cloud/utils/index.ts","../../../src/cloud/networks.ts","../../../src/cloud/worker/job.ts","../../../src/cloud/worker/transaction.ts","../../../src/cloud/worker/cloud.ts","../../../src/cloud/worker/task.ts","../../../src/cloud/worker/worker.ts","../../../src/cloud/worker/index.ts","../../../src/cloud/config.ts","../../../src/cloud/index.ts","../../../node_modules/axios/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../src/mina/local/local.ts","../../../src/mina/api/api.ts","../../../src/mina/encryption/connections.ts","../../../node_modules/o1js/dist/node/bindings/crypto/non-negative.d.ts","../../../node_modules/o1js/dist/node/lib/provable/core/fieldvar.d.ts","../../../node_modules/o1js/dist/node/lib/provable/bool.d.ts","../../../node_modules/o1js/dist/node/lib/provable/field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/provable-intf.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/transaction-leaves-json.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/gen/transaction-json.d.ts","../../../node_modules/o1js/dist/node/lib/util/types.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/foreign-field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/native-curve.d.ts","../../../node_modules/o1js/dist/node/lib/provable/group.d.ts","../../../node_modules/o1js/dist/node/lib/provable/wrapped.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/binable.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/generic.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/provable-generic.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/provable-derivers.d.ts","../../../node_modules/o1js/dist/node/lib/provable/scalar.d.ts","../../../node_modules/o1js/dist/node/lib/ml/base.d.ts","../../../node_modules/o1js/dist/node/lib/util/global-context.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/bigint256.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/field.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/vector.d.ts","../../../node_modules/o1js/dist/node/lib/provable/core/provable-context.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/witness.d.ts","../../../node_modules/o1js/dist/node/lib/provable/provable.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/struct.d.ts","../../../node_modules/reflect-metadata/index.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/circuit-value.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/signature.d.ts","../../../node_modules/o1js/dist/node/lib/ml/conversion.d.ts","../../../node_modules/o1js/dist/node/bindings/compiled/node_bindings/plonk_wasm.d.cts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/lookup.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/elliptic-curve.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/curve.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/kimchi-types.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/cache.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/zkprogram.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/prover-keys.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gates.d.ts","../../../node_modules/o1js/dist/node/snarky.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/finite-field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/foreign-field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/elliptic-curve.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/foreign-curve.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/transaction-leaves.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/from-layout.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/derivers-bigint.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/field-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/poseidon.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/constants.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/poseidon-bigint.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/curve-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/transaction-leaves-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/gen/transaction-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/gen/transaction.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/types.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/poseidon.d.ts","../../../node_modules/o1js/dist/node/lib/provable/int.d.ts","../../../node_modules/o1js/dist/node/lib/provable/bytes.d.ts","../../../node_modules/o1js/dist/node/lib/provable/wrapped-classes.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/foreign-ecdsa.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/keccak.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/hash.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/common.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/unconstrained.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/circuit.d.ts","../../../node_modules/o1js/dist/node/lib/provable/packed.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/arithmetic.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/gadgets.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-list.d.ts","../../../node_modules/o1js/dist/node/lib/provable/option.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-tree-indexed.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/signature.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/types.d.ts","../../../node_modules/o1js/dist/node/lib/mina/smart-contract-base.d.ts","../../../node_modules/o1js/dist/node/lib/mina/precondition.d.ts","../../../node_modules/o1js/dist/node/lib/mina/zkapp.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/sign-zkapp-command.d.ts","../../../node_modules/o1js/dist/node/lib/mina/account-update.d.ts","../../../node_modules/o1js/dist/node/lib/mina/transaction-context.d.ts","../../../node_modules/o1js/dist/node/lib/mina/account.d.ts","../../../node_modules/o1js/dist/node/lib/mina/fetch.d.ts","../../../node_modules/o1js/dist/node/lib/mina/graphql.d.ts","../../../node_modules/o1js/dist/node/lib/mina/transaction.d.ts","../../../node_modules/o1js/dist/node/lib/mina/mina-instance.d.ts","../../../node_modules/o1js/dist/node/lib/mina/transaction-validation.d.ts","../../../node_modules/o1js/dist/node/lib/mina/local-blockchain.d.ts","../../../node_modules/o1js/dist/node/lib/mina/mina.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/reducer.d.ts","../../../node_modules/o1js/dist/node/lib/mina/state.d.ts","../../../node_modules/o1js/dist/node/lib/mina/token/forest-iterator.d.ts","../../../node_modules/o1js/dist/node/lib/mina/token/token-contract.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/encryption.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/encoding.d.ts","../../../node_modules/o1js/dist/node/lib/provable/string.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-tree.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-map.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/nullifier.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/elliptic-curve-examples.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/crypto.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/rosetta.d.ts","../../../node_modules/o1js/dist/node/mina-signer/mina-signer.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/workers.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/offchain-state-serialization.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/offchain-state-rollup.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/offchain-state.d.ts","../../../node_modules/o1js/dist/node/index.d.ts","../../../src/mina/encryption/encryption.ts","../../../node_modules/nats/lib/nats-base-client/util.d.ts","../../../node_modules/nats/lib/nats-base-client/codec.d.ts","../../../node_modules/nats/lib/jetstream/jsbaseclient_api.d.ts","../../../node_modules/nats/lib/jetstream/jsapi_types.d.ts","../../../node_modules/nats/lib/jetstream/jslister.d.ts","../../../node_modules/nats/lib/jetstream/jsmconsumer_api.d.ts","../../../node_modules/nats/lib/nats-base-client/queued_iterator.d.ts","../../../node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.d.ts","../../../node_modules/nats/lib/jetstream/jsmsg.d.ts","../../../node_modules/nats/lib/jetstream/consumer.d.ts","../../../node_modules/nats/lib/nats-base-client/typedsub.d.ts","../../../node_modules/nats/lib/jetstream/types.d.ts","../../../node_modules/nats/lib/nats-base-client/core.d.ts","../../../node_modules/nats/lib/nats-base-client/transport.d.ts","../../../node_modules/nats/lib/nats-base-client/databuffer.d.ts","../../../node_modules/nats/lib/nats-base-client/servers.d.ts","../../../node_modules/nats/lib/nats-base-client/muxsubscription.d.ts","../../../node_modules/nats/lib/nats-base-client/heartbeats.d.ts","../../../node_modules/nats/lib/nats-base-client/denobuffer.d.ts","../../../node_modules/nats/lib/nats-base-client/parser.d.ts","../../../node_modules/nats/lib/nats-base-client/semver.d.ts","../../../node_modules/nats/lib/nats-base-client/protocol.d.ts","../../../node_modules/nats/lib/nats-base-client/encoders.d.ts","../../../node_modules/nats/lib/nats-base-client/types.d.ts","../../../node_modules/nats/lib/nats-base-client/nats.d.ts","../../../node_modules/nats/lib/nats-base-client/nuid.d.ts","../../../node_modules/nats/lib/nats-base-client/msg.d.ts","../../../node_modules/nats/lib/nats-base-client/headers.d.ts","../../../node_modules/nats/lib/nats-base-client/options.d.ts","../../../node_modules/nats/lib/nats-base-client/request.d.ts","../../../node_modules/nats/lib/nats-base-client/authenticator.d.ts","../../../node_modules/nats/lib/nats-base-client/nkeys.d.ts","../../../node_modules/nats/lib/nats-base-client/bench.d.ts","../../../node_modules/nats/lib/nats-base-client/ipparser.d.ts","../../../node_modules/nats/lib/jetstream/kv.d.ts","../../../node_modules/nats/lib/nats-base-client/internal_mod.d.ts","../../../node_modules/nats/lib/jetstream/jsutil.d.ts","../../../node_modules/nats/lib/jetstream/internal_mod.d.ts","../../../node_modules/nats/lib/src/nats-base-client.d.ts","../../../node_modules/nats/lib/src/connect.d.ts","../../../node_modules/nats/lib/nats-base-client/mod.d.ts","../../../node_modules/nats/lib/jetstream/mod.d.ts","../../../node_modules/nats/lib/src/mod.d.ts","../../../src/mina/encryption/client.ts","../../../src/mina/encryption/messages.ts","../../../src/mina/encryption/index.ts","../../../src/mina/utils/base64.ts","../../../src/mina/utils/fetch.ts","../../../src/mina/utils/fields.ts","../../../src/mina/utils/fee.ts","../../../src/mina/utils/mina.ts","../../../src/mina/utils/index.ts","../../../src/mina/verification/verification.ts","../../../src/mina/verification/index.ts","../../../src/mina/index.ts","../../../src/index.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/undici-types/header.d.ts","../../../node_modules/undici-types/readable.d.ts","../../../node_modules/undici-types/file.d.ts","../../../node_modules/undici-types/fetch.d.ts","../../../node_modules/undici-types/formdata.d.ts","../../../node_modules/undici-types/connector.d.ts","../../../node_modules/undici-types/client.d.ts","../../../node_modules/undici-types/errors.d.ts","../../../node_modules/undici-types/dispatcher.d.ts","../../../node_modules/undici-types/global-dispatcher.d.ts","../../../node_modules/undici-types/global-origin.d.ts","../../../node_modules/undici-types/pool-stats.d.ts","../../../node_modules/undici-types/pool.d.ts","../../../node_modules/undici-types/handlers.d.ts","../../../node_modules/undici-types/balanced-pool.d.ts","../../../node_modules/undici-types/agent.d.ts","../../../node_modules/undici-types/mock-interceptor.d.ts","../../../node_modules/undici-types/mock-agent.d.ts","../../../node_modules/undici-types/mock-client.d.ts","../../../node_modules/undici-types/mock-pool.d.ts","../../../node_modules/undici-types/mock-errors.d.ts","../../../node_modules/undici-types/proxy-agent.d.ts","../../../node_modules/undici-types/api.d.ts","../../../node_modules/undici-types/cookies.d.ts","../../../node_modules/undici-types/patch.d.ts","../../../node_modules/undici-types/filereader.d.ts","../../../node_modules/undici-types/diagnostics-channel.d.ts","../../../node_modules/undici-types/websocket.d.ts","../../../node_modules/undici-types/content-type.d.ts","../../../node_modules/undici-types/cache.d.ts","../../../node_modules/undici-types/interceptors.d.ts","../../../node_modules/undici-types/index.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/dom-events.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/readline/promises.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/sea.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts"],"fileInfos":[{"version":"44e584d4f6444f58791784f1d530875970993129442a847597db702a073ca68c","affectsGlobalScope":true},"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","9a68c0c07ae2fa71b44384a839b7b8d81662a236d4b9ac30916718f7510b1b2d","5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569",{"version":"4af6b0c727b7a2896463d512fafd23634229adf69ac7c00e2ae15a09cb084fad","affectsGlobalScope":true},{"version":"6920e1448680767498a0b77c6a00a8e77d14d62c3da8967b171f1ddffa3c18e4","affectsGlobalScope":true},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true},{"version":"4443e68b35f3332f753eacc66a04ac1d2053b8b035a0e0ac1d455392b5e243b3","affectsGlobalScope":true},{"version":"bc47685641087c015972a3f072480889f0d6c65515f12bd85222f49a98952ed7","affectsGlobalScope":true},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true},{"version":"93495ff27b8746f55d19fcbcdbaccc99fd95f19d057aed1bd2c0cafe1335fbf0","affectsGlobalScope":true},{"version":"6fc23bb8c3965964be8c597310a2878b53a0306edb71d4b5a4dfe760186bcc01","affectsGlobalScope":true},{"version":"ea011c76963fb15ef1cdd7ce6a6808b46322c527de2077b6cfdf23ae6f5f9ec7","affectsGlobalScope":true},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true},{"version":"bb42a7797d996412ecdc5b2787720de477103a0b2e53058569069a0e2bae6c7e","affectsGlobalScope":true},{"version":"4738f2420687fd85629c9efb470793bb753709c2379e5f85bc1815d875ceadcd","affectsGlobalScope":true},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true},{"version":"9fc46429fbe091ac5ad2608c657201eb68b6f1b8341bd6d670047d32ed0a88fa","affectsGlobalScope":true},{"version":"61c37c1de663cf4171e1192466e52c7a382afa58da01b1dc75058f032ddf0839","affectsGlobalScope":true},{"version":"b541a838a13f9234aba650a825393ffc2292dc0fc87681a5d81ef0c96d281e7a","affectsGlobalScope":true},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true},{"version":"ae37d6ccd1560b0203ab88d46987393adaaa78c919e51acf32fb82c86502e98c","affectsGlobalScope":true},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true},{"version":"bf14a426dbbf1022d11bd08d6b8e709a2e9d246f0c6c1032f3b2edb9a902adbe","affectsGlobalScope":true},{"version":"5e07ed3809d48205d5b985642a59f2eba47c402374a7cf8006b686f79efadcbd","affectsGlobalScope":true},{"version":"2b72d528b2e2fe3c57889ca7baef5e13a56c957b946906d03767c642f386bbc3","affectsGlobalScope":true},{"version":"479553e3779be7d4f68e9f40cdb82d038e5ef7592010100410723ceced22a0f7","affectsGlobalScope":true},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true},{"version":"d3d7b04b45033f57351c8434f60b6be1ea71a2dfec2d0a0c3c83badbb0e3e693","affectsGlobalScope":true},{"version":"956d27abdea9652e8368ce029bb1e0b9174e9678a273529f426df4b3d90abd60","affectsGlobalScope":true},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true},{"version":"33358442698bb565130f52ba79bfd3d4d484ac85fe33f3cb1759c54d18201393","affectsGlobalScope":true},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true},"7a1971efcba559ea9002ada4c4e3c925004fb67a755300d53b5edf9399354900",{"version":"fcb637e11e53742c8414d7d768c31221262f1650ff1860c9d96e58d401628b4c","signature":"81722da336015ccd03dd0868fb492c748b40d6292217e1e3c4572f0a4e93c5bf"},{"version":"75b9f11a7abe59e903626f55f4b39c300ef0d203435a20d2690e7e9867ea8fde","signature":"78d243bdc278e2efce4c7a39f70627286af3d99193f4f52ba22b77ad976be473"},{"version":"3f8969dbf35e920081bfaae80102fb3416ce3aee45872461be8898180335f0e4","signature":"ea8446c6e28df31746c8609ec7fe7f26553b6b2faff808d25b739d5915b1a471"},"0094dee76ef8576557b17f4deae2dfe83e482227399d0731a8554e99de95e178",{"version":"bbf4f1af06efa9ba1a65ec7f047ecd6d3092d35650c9a60fd9d42196b3c60146","signature":"d47761d98e8aa5c3213d29ba258c144046a0dd8788871f617fb5148f5bab116f"},{"version":"84336e042966652a474160c9d5de421f9400edb10ef95a53bb30bb50cb70b82f","signature":"22ad9c982cf572190ada5718cb8bea38651cd5b13407b8f926ed10fd0150d024"},{"version":"846f052f3a3813ee18c469c6c9555c07846ff84a8963cd2af27e61f5ed466550","signature":"e90aced94d9fa6386f394d457eef6be106c15973cbb7b3533c90bbd4259e2954"},{"version":"710e3f4ceda593cb570e00007a5b25566459af876c3a54dc24e5d1d0fa4ef327","signature":"c923799de7f8b55708a2f0146c13b5458a83fedb153d6b3d93839acd0077cd21"},{"version":"ba142d8bce049af9f48c4d6b09743a4787862a99fde53e06f113c74414c0edae","signature":"b61d141fc37156db206acad2eda3c43fa980b30b06b522c9e3ea27937f95f596"},{"version":"95ba1d53714456428c63719bd5475554a23cd627956f33b9d23a5ef6c14535ef","signature":"b6f97b6097aae00f5b93e7f574ebafd8bf229dce1dc4a1f7e42d5462919d02fc"},"6e88d368297506d500bef0a247957f1da85510cdf5740662989e119cfd85faac",{"version":"0ecc1d9a70ef1d620f5b895afeed5b67a8b236a1fa801d2d9ddfd73acf9a4002","signature":"3b426ca49f4263b96473702d3b0e039eb755683ba0288a72a732b368e1ef3f4e"},"aba307df7c63b5a97f7c496e8db55a3c51a9281848aa3137147f19f56e7019f3","01ba761ce6d75a4142858a053f45d64d255e057049ab1cc4d9a93e76b8b5c444","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2",{"version":"ffbd648b93dd8d81e3155cdccead93cfc34a5eb917abe809526b68f0af6d91c7","signature":"c9b81be2bf31f9416b01fead0756eb0615ba31e5e8ee5d5c27af26e16e3eb63e"},{"version":"c92a55b58392d79ecf7115298c2ae5fe7adf5bdd10efe1f2017cbd992931eb9b","signature":"2d260866f1468ae706914ce6078917bbb72a64edba20ea140de3bbdbe6d563ec"},{"version":"4bb3acab27ae7671765631bc9976cae710b8fbebf061a80d403da619954278eb","signature":"262c43a08c3db86ede3f97dfaa43f65de2fa2c4f9a4938a8bba1b6e2a2a5de10"},"9a9d48f04dca9bb787522b012092ac36dd6ea22748f9f721d13dc4d84e42387d","f689b555fd226b172c13328f29fbdcabbb636b1746e75abfc9b620353819746f","dc957ce057181ebbf806448f8c4e8577987843e84e92b536096887d8e7505169","c0f652b8eea8975652ca6c19691ee534097a15553898521c84f9ea740f272ae9","830e5eaa2ee0c5b78cb15acfeec2753d6da27f5fa74b89b9ec88e2f7eff922c4","a72629c8ed67cd5d8ecb5fd60e1c64b07e11b246894aaf8a17e29a676f4be041","5240a5f0bf490d199ebf97f36a50e1e3b7844c3144dd90f45b93a7b0f3e404c2","ab557c40fb8521c229448329d2e17451921dab9559ec38ed8737e718bf305e2b","e819fa9a1d4c1d2d3788a895f9e6a6a7ddfe29d2d0164b9e16ec2bb386eef2bc","191c1b4e730675dd156b344c57c37d14b48aa3d5c969316b3a2e4a3af13e98ed","74d62a10e5ed7938e46793f3f9c40776d2fd667de084e65dc903c2da7941b175","204cc68eb2f61d8f1a76d88289d50621fb080d171fa73c993cebde8be683f3d5","8a0f60fc69219ca8e4e811e5f4dd0d4db28981dabff325389cd795764bf2d4ba","90b2f277502bdd447a0e2e0b71af206c13ecbabd6db9918bcf58d03be9f13421","444c4d349577d6d6aa5647bfd01ae101620ec1f0933d270dc5de21778406bf1c","a42f3fa88a87327ddbf976cd5093ea5e42e2ad1a6a09980b4fb96fb53f244acf","ce267ea5884bca498f7fad2b5ecfe0f6b09d764a5d869b9722063ba634ffae98","0c2840a30adce420d9ed6fc6b07004bad6faf36b98c26fa396f90644ae88e7ef","21ddd09adb35e88374ad316a30bdfb811326eaae550be488c52db212f29f500f","c132bf7e51370bc34639ce847f464ef709be92110bf5c6ff4825a2ca9dcb6b04","70fa1179eac0abc1067862fd6b274a3284e75c1b5ee6a2bb0c20cbf53b56e75d","51a41894321c9f22da9e9a59ac83e40acfb1c9976a69021ac4d7072619654e8c","5689ea3d0adbb2ba216ec54d151a8a55c0d4fc71367905d46487fbf1fd0e696e","bf17161ce72ac862080e6165fe12330f8220947d696c2cc38ce0e12672320758","04ccdd6359a26501937de4f750a91ebb2687ca47289022047cc2a1c5e5f3f2ac","c236befe9470326ecd9280bc542c15702fdeb0bdc791174855a3bd94fe28068e",{"version":"8d6d51a5118d000ed3bfe6e1dd1335bebfff3fef23cd2af2f84a24d30f90cc90","affectsGlobalScope":true},"e28279e587a0b5359eae2d3ffa5fddcfd3d026e42950e09f1a445e18a88d8520","7198c144555f4c3ef3876ebb957bf4aacbf5a4f74fece22589f2f45cc56bf743","e7b6a7f50f6210249095bd316442d174ebbab403f608748e01ad2e705cc6e8bc","3e3f35cfcf432d22ae7fb8f0df272ce15dc6b6002375664feb9d9d7579080b5d","249a8fae114d1f1209a12ecc2a8d31ff7b7b822f8da0ff22093a8fd8cbf72018","7cc8fc6f9807181ac6773bfa99720e02543dd42c9fc4764a3492774902ded143","3119d821f41fb14c6dd351cbc023956fe996923e561ee31c9265577dbe8aefcf","714316f5c511bd8dbbe3fa52ea348244811166bef2158c1bc0394cd3d7d905fe","eb0938d65fb4fa32d2506e4064e00f0e5715f7b9c0e87c06ebed4602868bf823","2c220095be1d76040518e0194cbad8f6011456eee9fb0b5e09351038589b2fc9","8c9d88a4c651ef1c6c16bc0dc7ddb39ae25f69aeb968806765df0bd4899fcc0e","f71ae3fba6a8d89c4e2ede6e1f2055e993b835a52fdbc9436d060a34e55ade5e","0683bbc485d52643011da70eaa3f2249e87614cb5fe853eb3adf720a5973f8af","a3987faae6ca116a29967e87f7909a4aca1ca9c46aa78e5c4b5abc62cb253e9e","a3f0b51dd226bcc83aab289d3625ee5214fcb0b317722f9a7904039c8006fee8","5882a88178b51993c7354a2ac9a563f117728006eb9793cabad5e0f8b3f1f15b","fabf9112185e2adc4dd059999b6a19882852c8abc66c17b115e83a917af80770","7865b6229a4bb89d5da8900139a01b3570e84b966f84589648b79fcd997d2827","e4ac7476c958c0e2e03343a447239b55d3111c23fe410c424ba36dee8361f045","44cde016e9d8416da32ffa2bcb2d0788062e1f2b08920423b2844fd87c4bf17d","2260b86ac7f0f51b84bb9ce6e4e19186cb27deefadf1d535333c8189bb441a79","b722834af2a8bf739b3775e4b195e338e022a272920c589734c7ceea2b597f85","19f937341c4bf0cc8ef1a9add035727478a4697af1964ab24d3ddd87c3d32351","832e187002065695afa922e8e43fb9b4c20a54bc9c09361239e52e239bdb774d","ab0b6884679a45eeda23591d1fa49abfcd949e4bea2955331f06f4fe2bd522c6","d1dfb574b16822880c28cfb2fc5926bfbd0d566aab798b77d143e203a01a2cca","2ba7674b8bedd99b4d290cb738c2ed1bfa729a970b1c38e5e8986ba915a82ab0","dc6ddafce66147f3fe949e59ab7bbdd909e40dfbbec64bb88ef0f0af2e649348","5f2b91b05147c42aecb704e53b724b958de2adc503c17236199c9ba251c79d02","e902d090310b5aed646ba13c7a89320308ada69a703c9111457f7db5744e8d9e","f3fda18de1328c6d0c5a8f9db67f3d69c89286b230b19bd72567d680d747690e","75ad1bf960ae5062e21291ac75e326a2e693350c158de7a9b6611ef46c89c86a","a44554abb5d268058f91e5b834f4c71751959a6ec395ef56c94b8c69d8c4e244","8ae00073ccca98af600ef6eaaed98734abb5b6ed92c9ff1f49aa985e20c695ee","6d85671cb695f685fd40d7c605ceff16fd80c920c4391dcb7239699f866db19a","338a77519dd2aa2d0a6de3b15feea7e4ec01ec1fd231a553daec7d4f332b39f1","840059423f100f2e3687355daf6275625ed644f3c2051bd8652e71268c63a5c8","bd43c167d8d2494bd70c682f9245e464df22b8bfedac6f21f5f27d80ecbfb25c","004357369ef2304f6b200d85d6c1e284d086c865ff40a86abcb0c80008444a02","3da1856e62b8ce08d3c61f21c158f856810da8d1bd9a0fec18971c8cf911a152","0081e2fbb388deecb709c29c0a5d503297edfa6e64fc28d661d333d3caaef8b8","3d1f40116cd77813e8c5de5c11b723ce9e4aba4967b55aabe2caa3611587b7a2","b210ec0c3e213c224125d52ce383a0f622130f5a657e665b4bb230827448f31e","77e7cf60f57bbbabac775ca986d642a966d41a45f6dcde6176e846a2449a5be4","37d779a39e134a762d49451329f2d8a761c64b53a4287fb8fa2b8bb67fa2584e","288f89447c29e68b3a1850c0307ceff9d93d3943efc0a9a8a93019607607eb29","afa54fdb0227c19df096a3142920c8c02581017f3d3a3aece5cf77320ab7f789","7a14e610f62f5f1ab564b04311fdb80e32d3a2097e06d426d5dcb46328fd7b88","e8f564935faca22891d975d8e46217424ffc15bbe007a61488ca4b42f905b299","d81b1fc5c78cefa3bf7e4f5a54f4184bb89a32717b45da76d87363caf27cd88a","3b16135caa4bdd7dbeb6b476f0e227b4a2449501aaa6a7f66f5cb3c1ef88a40e","c80a25d34c20d5effc94f690903225b421ae8a2413ff49c8eca90ddfe310ca68","1127c4ace9371cc78b71e92f57310597739f1aaafb415f81d674df0ef253e8e1","455942d06fd42630bcf9d48f579048b2b3d9a79668a23bfd4ab58423857dfef0","35aee4acd707b159c795c9d7d0c6e085a0717d3e9edf1e95166cd14fd6208153","2c84b30f081cc4111fe1978836730987e4a4b1fbf06bf46f2348609247aea2ec","6625c4fff7c92e4203984462fbbaa2b81c614a2122f68ca074519bdb45cf85a3","98c36a41db4860e20715b54e2f39d0ffcdfdcff021559bf03adec23b5c39c656","57cdc4ed8569f62db5af43dfb88dc4d9d8a2795a6afaba39e237d6dcc750413a","b76bf4e1676ec8b6e6f97069a4f8f78bdd4a71e636667e334fc14836d4428a86","6f55dca45e78ef90f57d836e231b6333e92bc7450be6ac872877f9713046adf0","261aba75738663dbe499b271e471c684362638f890fe4de51f162a1b6bf6621f","f2f9b616251fc8f6499b9a650cdfcd3548f65a3f495a82254e6568769edaec44","cffff0c1ef1d1a82233cce9d9567a046e26917ef759e99c57e5f98881c9e7442","6adafabcd9a167589fdf2740f9aa28f9862d95f9ea3e52819557ebf07db6687c","f9461da3ae116642de3fdd207afb0853c1acd80b95c13fdce4e54e7b6ca251b3","04c69dd5905cc3eb015d4bff55f7425815e54296678a7d88f9001329e07b2346","2e14bda3173cf126cd67b176e13ffbe16cc59a2a3052b1324f6c83baed71a989","0c0db8600baad7249aa0a0cd93f789a9122ff672c65169e1cbe1496f24f4f473","69e0ead4905e446616eb3bd8857e45e3c5047e0bb4aa5ead77f35e807ce96114","3e24c4e8c1d659188e3c637071509458416c8d63ec854de259cfce063961304c","67c965aff094b69e4d8ab243749697ed9cabffd8d5def86ff01de88d808ffdb7","615f21a9f5830bafcb29e4c25e31abd4a2a8ac20c750fc1d842e34dbd7381f3b","d8fa5a43e48c6633c04f634a1a97fabac4a85a08b513f7ba4573677328345c56","4e2f5c1b58ac658de016723e1877644803a50f282c2defcfccb55b1e307d5ad5","7ba86c896b6ffb46aa5802a457a760e752793bb7733b2029acbd1ff0b4719037","11cefca06ddb881683cd89f5805f70902675931e0de303a4909bbb3bd84e22b2","a0764ca85fe1b3463ab8bdd5e1a13a84adca4e15addc804e576fca6a176d0071","f3ff4e877d17df71dffbb19c744a38344628652fc25fefc0d336c9ba0aed66f2","b55bc43b7e6a218f0c7f82a9a7282dec12ea755f54bde8107e0c65a263133903",{"version":"60c223a003fe788e9396d9c02b0f1da97fe32780712693983b38bc0716ddf364","signature":"f952b72f489ec3e76010ac6c74027c3a86a8fed67118a716eacb77c8511b24ce"},"a64604bce9efa09bf3ef246d8ab174b573f13068fb0d0e29ae4d6d825bbfad4a","33d47592253ddf2c8b7a294ae95ab40a94b5ddb5f6b9b83b722ed43849f17e41","de9850a04c2e1d54602a3e88bb5aa4760d9db22cf345ea3b02a08dcd1fc37c8b","4c11d7f23b1862075222da74ed1d911916afc2007b978f0dd2e2a3237b03ef59","f67a33e9e24f568c91a4e3e2d8cabb3daf3caae32d3d08fb397dae3780639eec","af1307c43f75b749851f8e2f67b2e6736487d1441621ca18732c218a47496a48","1614011a9cb4b5228fe0819521394890c28ac1b6fdfca626b71d84c110d02850","4d26aca4ae69dfa0bfcd19c7b291e5867698b1ffe1f6af6098b4456697386c6e","dd25fcae2a22239186cf454fc05b1c02820b1df3f704cdc74eebe3ead60beb48","b6ceba20c577dd7ffe1dc023d1f356c521c5afe94e589e7e3899cfede465f14f","79d5f1841caac458d7a47ace5cc547b4d7e0b6349e8949b2c4c6e6ac236fb1aa","34e5d02cd29d7bb38dd2c677b046b69c33eb6e06e080cc93e156cdc39e4937d6","bc3892f84ba8e408a72d5b1e8235b24367056ac597875c09cd0a71ac48504e50","d575ac31e0a1d72f3b2af47381bbe038257d78712a953aa7d3273ca247e00e6a","ecde95506bc9bfaf169eba3337005fe1a4a3fc4a4ae3f4d317a85553e2f22c64","9fb9631b0787790e799594970cf6ef7cb2173d730d7ae2d57697f60f5a860e94","0cd87633b68c343a4b995c1f7ae28799737d46d950abbb3fc07fbd9db15ab560","3e28f9c9b27f5789204aad8692d12fe46a69c962d79dfaf70d3c37bc41db247d","30e03e99c34605a4a408d6b8535e769b1d02f21af421598d1f44bef153637566","5528fcd80925b30412eab8131182c1a77baa335dfe875334ed90e9ad0e129281","45459e5e862aa6152414fdc4a73ff3a5ca68a703cf9040e4a5af3788a62820f4","9f4eb5b4f6ee41dc7d1cabadee8e0ca38d5ab4a63b060e370147524baff2ca9d","d3f94171eceb81ac757bcc2012262648d160236ad92115265256ee3f8e4270d0","aaa9935369c79df9901d01238721a0c9552d2d5d8b2003e38f198d5042f75b51","b8d3d3d6e53a69c166096c572bd0c1d857ea9cf065320b1912eb3bac79d1f455","db6b1282d27fa7c0c1f63af90a134e2b3641b2517fe63e79600173f938825883","7a86ebd2511b08bd29ea232c128c26e6408697984945927bc2d3521e3a407512","89fbcb36e692ef4511d71acc2c3c1ef9579b1a9217da2ce207fe0f016fa77440","3bd2b18fb7a8e2858563f285e5195fc3cb58bddc030705bc845b8a1d85bb3894","caf0ba1b68ff9c4435615c16bb252e1ef51170aab1d355bb6663cbb58c09b06c","7179bfaac26759ccb4ed3ea13d7fcfb5cf3150d9632e97cd8f4650990e8d63ad","bc399896d66e5cc6cb7d069180a7181b93d14c43e938852b5c8cfefe1b76b443","abc8bcb0d28b91aa8de5f35cd60d107e4d4db4087217ebd1ab145673ba7ac0ad","1a4df56182c0c3db0c3cd24053b2a448a7cf0cf434c132b3baad7f7779502e90","849b7a65dd513282a5d2ba5dd3345dcdccf7ce5a3b69c30a7b094b9b3b36e46d","88350c55901c9c8c3849b2e8622d414c731adb164633e239173e491097d616ec","2ead347cdc2610b3ea0f000c4e55a02904a9fb58e45efc9baf1d0589a181c221","06e64968516bbf12b7d388d01d5f3f9c18e705fd1b15ce108eb4c568d0ab3f2d","5824546363337819f73a70cb94120a0cca407c63bf1f57098dd57a89ee825b2e","fe343271f55363e8602b4fb43ad712833cb68ebeb50b2ff1c05b91ee04b4e07e","7ffa23db9027d9029976f874d028fbc95c4e96cbedc2708895e15870457ae59f","465447d62f1750e04d98cc30df8756dc79a0e8ce0a33a02bc8da46f303bdd8e5","34c89375bf43cf3caec2b2e3eb4709d22b7d991d8db89a2744a95106c64532a6",{"version":"d52e0174d065c7df904f0a179d17f7ae9d3266574bf09f42146bff0f37a96643","signature":"f019942b10f5072ca0f20227b85dbceeb6e2b2a04d542062ff51e0a07f16275a"},{"version":"d2e48062e706e0a484f68e912f17dd73311e58acddd54f60ababb8d964a1f54d","signature":"96e6d9c19290bd7a795614bc3773de3140c045587deaf95e3fcb4b52f609f005"},{"version":"f735c8b899502d12eb0d549522e94775af3baeefc90d82f7ba0b0e02ae45b8fd","signature":"1d7f022474587716f5f2bae722bfe4db7d63949e977db088f73d8df9e3d1c30a"},{"version":"c7ab292b59b6b60881140e0b328b25baa388ca69fc322f1c43a7e262fd15827e","signature":"c2fae9cfc024fc680af21bac9ed691a515c37b1ef28bea1cfe3c8d44844302d6"},{"version":"638e777f0bb28754ddfa3803c5d02b0ee50c2802e9da8e0f1c836e9c7df9b743","signature":"b5c049530a84e5a15345514436849c7de5981a90821a7fee52d6d9938a02c403"},{"version":"2d054ef8048423c1263fc541ce1b916698ca6d7f92b7f13298dcbdb1b1664557","signature":"70d1b4c17ecc28087fd639e6905d255f97eef894ade69cef52f763153a278af5"},{"version":"26fcd0a8ad148bd100e85d1115fc39a60cc0fe61bccdfa9411a92e9c6e72c3da","signature":"4094348a5d639a71e24c33a5e3a8bf1ebb559be3c79fd79b6c2b422b652877aa"},{"version":"7ac367c72f94636dab4ddd2ac0873a2bb846bdea04ec747257abfbf44221949c","signature":"51a50ae6c8ea5592ec3e3511ef38c26f76854d23a83da12df158e2c834092b14"},"c4354c1ea92ded40e359685d59dfe23ade9a4866f2f5fa1a7d5bc4baf44bc7a0",{"version":"b55a94e9d21b5a18f382ac8cc24337dfd5b76e0c70157d141b4b3586d98b1a71","signature":"87a836363e4ca63e27e02e87e69c97f7b8d9df881b4191ec684bb2297aaf314c"},"5de460345b220ebc24be0f147e360302606ffafefb3250831a1f1a56c19faba3","3bd2d413636faa566b78ccf6c7664f33d277ae4f4d931fea0f191f7af4cc8618","f523375919d7397fe0e46f05c009a3f8efbe259497db89b6aafede875111eda4","2db0dd3aaa2ed285950273ce96ae8a450b45423aa9da2d10e194570f1233fa6b","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","7180c03fd3cb6e22f911ce9ba0f8a7008b1a6ddbe88ccf16a9c8140ef9ac1686","25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","54cb85a47d760da1c13c00add10d26b5118280d44d58e6908d8e89abbd9d7725","3e4825171442666d31c845aeb47fcd34b62e14041bb353ae2b874285d78482aa","c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","a967bfe3ad4e62243eb604bf956101e4c740f5921277c60debaf325c1320bf88","e9775e97ac4877aebf963a0289c81abe76d1ec9a2a7778dbe637e5151f25c5f3","471e1da5a78350bc55ef8cef24eb3aca6174143c281b8b214ca2beda51f5e04a","cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","db3435f3525cd785bf21ec6769bf8da7e8a776be1a99e2e7efb5f244a2ef5fee","c3b170c45fc031db31f782e612adf7314b167e60439d304b49e704010e7bafe5","40383ebef22b943d503c6ce2cb2e060282936b952a01bea5f9f493d5fb487cc7","4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","3a84b7cb891141824bd00ef8a50b6a44596aded4075da937f180c90e362fe5f6","13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","33203609eba548914dc83ddf6cadbc0bcb6e8ef89f6d648ca0908ae887f9fcc5","0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","9f0a92164925aa37d4a5d9dd3e0134cff8177208dba55fd2310cd74beea40ee2","8bfdb79bf1a9d435ec48d9372dc93291161f152c0865b81fc0b2694aedb4578d","2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","d32275be3546f252e3ad33976caf8c5e842c09cb87d468cb40d5f4cf092d1acc","4a0c3504813a3289f7fb1115db13967c8e004aa8e4f8a9021b95285502221bd1",{"version":"e7be367719c613d580d4b27fdf8fe64c9736f48217f4b322c0d63b2971460918","affectsGlobalScope":true},"3d77c73be94570813f8cadd1f05ebc3dc5e2e4fdefe4d340ca20cd018724ee36",{"version":"392eadc2af403dd10b4debfbc655c089a7fa6a9750caeb770cfb30051e55e848","affectsGlobalScope":true},"62f1c00d3d246e0e3cf0224f91e122d560428ec1ccc36bb51d4574a84f1dbad0","53f0960fdcc53d097918adfd8861ffbe0db989c56ffc16c052197bf115da5ed6",{"version":"662163e5327f260b23ca0a1a1ad8a74078aabb587c904fcb5ef518986987eaff","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb",{"version":"c48c503c6b3f63baf18257e9a87559b5602a4e960107c762586d2a6a62b64a18","affectsGlobalScope":true},"b0c0d1d13be149f790a75b381b413490f98558649428bb916fd2d71a3f47a134","3c884d9d9ec454bdf0d5a0b8465bf8297d2caa4d853851d92cc417ac6f30b969","0364f8bb461d6e84252412d4e5590feda4eb582f77d47f7a024a7a9ff105dfdc","5433f7f77cd1fd53f45bd82445a4e437b2f6a72a32070e907530a4fea56c30c8","d0ca5d7df114035258a9d01165be309371fcccf0cccd9d57b1453204686d1ed0",{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true},{"version":"9a30b7fefd7f8abbca4828d481c61c18e40fe5ff107e113b1c1fcd2c8dcf2743","affectsGlobalScope":true},"173b6275a81ebdb283b180654890f46516c21199734fed01a773b1c168b8c45c","304f66274aa8119e8d65a49b1cff84cbf803def6afe1b2cc987386e9a9890e22","1b9adafe8a7fefaeaf9099a0e06f602903f6268438147b843a33a5233ac71745","98273274f2dbb79b0b2009b20f74eca4a7146a3447c912d580cd5d2d94a7ae30","c933f7ba4b201c98b14275fd11a14abb950178afd2074703250fe3654fc10cd2","2eaa31492906bc8525aff3c3ec2236e22d90b0dfeee77089f196cd0adf0b3e3b",{"version":"ea455cc68871b049bcecd9f56d4cf27b852d6dafd5e3b54468ca87cc11604e4d","affectsGlobalScope":true},"8f5814f29dbaf8bacd1764aebdf1c8a6eb86381f6a188ddbac0fcbaab855ce52","a63d03de72adfb91777784015bd3b4125abd2f5ef867fc5a13920b5649e8f52b","d20e003f3d518a7c1f749dbe27c6ab5e3be7b3c905a48361b04a9557de4a6900",{"version":"1d4d78c8b23c9ddaaaa49485e6adc2ec01086dfe5d8d4d36ca4cdc98d2f7e74a","affectsGlobalScope":true},{"version":"44fc16356b81c0463cc7d7b2b35dcf324d8144136f5bc5ce73ced86f2b3475b5","affectsGlobalScope":true},"575fb200043b11b464db8e42cc64379c5fd322b6d787638e005b5ee98a64486d","6de2f225d942562733e231a695534b30039bdf1875b377bb7255881f0df8ede8","56249fd3ef1f6b90888e606f4ea648c43978ef43a7263aafad64f8d83cd3b8aa","139ad1dc93a503da85b7a0d5f615bddbae61ad796bc68fedd049150db67a1e26","7b166975fdbd3b37afb64707b98bca88e46577bbc6c59871f9383a7df2daacd1","9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","81505c54d7cad0009352eaa21bd923ab7cdee7ec3405357a54d9a5da033a2084","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633","3c1f19c7abcda6b3a4cf9438a15c7307a080bd3b51dfd56b198d9f86baf19447","2ee1645e0df9d84467cfe1d67b0ad3003c2f387de55874d565094464ee6f2927",{"version":"7da97d603bf3dd0000f56467c56cb6efaf5f94692980474925fae6c33412b12a","affectsGlobalScope":true},{"version":"9cf780e96b687e4bdfd1907ed26a688c18b89797490a00598fa8b8ab683335dd","affectsGlobalScope":true},"98e00f3613402504bc2a2c9a621800ab48e0a463d1eed062208a4ae98ad8f84c","9ae88ce9f73446c24b2d2452e993b676da1b31fca5ceb7276e7f36279f693ed1","e49d7625faff2a7842e4e7b9b197f972633fca685afcf6b4403400c97d087c36","b82c38abc53922b1b3670c3af6f333c21b735722a8f156e7d357a2da7c53a0a0",{"version":"b423f53647708043299ded4daa68d95c967a2ac30aa1437adc4442129d7d0a6c","affectsGlobalScope":true},{"version":"7245af181218216bacb01fbdf51095617a51661f20d77178c69a377e16fb69ed","affectsGlobalScope":true},"4f0fc7b7f54422bd97cfaf558ddb4bca86893839367b746a8f86b60ac7619673","4cdd8b6b51599180a387cc7c1c50f49eca5ce06595d781638fd0216520d98246","d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c",{"version":"8704423bf338bff381ebc951ed819935d0252d90cd6de7dffe5b0a5debb65d07","affectsGlobalScope":true},"7c6929fd7cbf38499b6a600b91c3b603d1d78395046dc3499b2b92d01418b94b",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"a42be67ed1ddaec743582f41fc219db96a1b69719fccac6d1464321178d610fc"],"root":[[53,65],[68,70],178,[222,234]],"options":{"allowJs":true,"allowSyntheticDefaultImports":true,"composite":true,"emitDecoratorMetadata":true,"esModuleInterop":true,"experimentalDecorators":true,"importHelpers":true,"noEmitOnError":false,"outDir":"./","skipLibCheck":true,"sourceMap":true,"strict":true,"strictPropertyInitialization":false,"target":8,"useDefineForClassFields":false},"fileIdsList":[[235],[270],[271,276,305],[272,277,283,284,291,302,313],[272,273,283,291],[274,314],[275,276,284,292],[276,302,310],[277,279,283,291],[270,278],[279,280],[283],[281,283],[270,283],[283,284,285,302,313],[283,284,285,298,302,305],[268,271,318],[279,283,286,291,302,313],[283,284,286,287,291,302,310,313],[286,288,302,310,313],[235,236,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320],[283,289],[290,313,318],[279,283,291,302],[292],[293],[270,294],[291,292,295,312,318],[296],[297],[283,298,299],[298,300,314,316],[271,283,302,303,304,305],[271,302,304],[302,303],[305],[306],[270,302],[283,308,309],[308,309],[276,291,302,310],[311],[291,312],[271,286,297,313],[276,314],[302,315],[290,316],[317],[271,276,283,285,294,302,313,316,318],[302,319],[179,182,184,185,186,187,191],[181,182,183,184,187,188,190,215],[191],[180,191,203],[181,182],[181,182,183,191],[182,191],[182,187,190,191],[190,216],[181,182,183,184,187,188,189,191],[179,191],[190],[179,180,185,189,191,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213],[214],[180,191,198],[190,191,199,200,202],[191,197],[179,185,191,192,193,194,195,196,198,199],[179,191,195],[179,185,191,200],[189,191,201],[217],[218,219,220],[214,216],[88],[88,91,103],[88,90],[88,91,101,102,104],[88,91],[103],[71,84],[74,82],[84],[83],[77,84,116,123],[76],[74,77,84,115,116,124],[71,76,84,117,118,122],[73,74,76,82,84,99,128],[124,125],[75,82,86,95,96,99,106,107,110,112,114,126,127,128,130,131,132,133,134,135,136,137,139,140,141,142,147,149,151,152,153,154,158,159,160,161,162,163,164,165,166,167,168,170,172,173,176],[73,74,75,82,85,95,96,99,107,110,115,124,126,127,128,135,137,140,146,147,148],[74,82,84,99,124,126,153],[73,74,75,86,95,96,106,107,110,127,135,140,141,142,174],[73,74,75,82,95,99,127,135,140,141,142],[85,96,107,141,147,160,174,175],[82,95,96,140,147],[74,82,99,126,128,151,153,158],[126,128,149,152],[74,78,82,99,128,144,151,154,155],[74,82,99,128,144,146,151,152,153,154],[99,144,150,154,155,156,157],[82,99,126,128,149],[147],[75,82,96,147],[73,74,75,82,95,137,140,149],[74,82,99,128,147,149],[89,99,149],[144,146,149,151],[82,99,107,126,149,150,151,153,155],[72,73,74,75,82,95,96,97,99,106,107,110,128,145,146,149],[72,82,87,88,96,99,110],[75,97,110],[88,101,105,106,107],[72,73,74,75,82,85,95,96,106,107,110],[71,72,74],[74,96,128],[89,92,110],[103,169],[74,81,82,99],[79,96,103,112,113],[73,79,96,103,112,114,130],[74,81,86,129,130],[129],[73,74,75,81,82,99,144,167],[74,81,82,95,96],[73,82,96,98],[71,72,73],[73,74,78,79,96,111],[72,73,74,78],[73,74,79,84,103],[73,74,78],[73,74,78,79,82,128,129,138],[73,74,79],[72,74,78],[72,73,74,87],[72,73,74,75,82,96,98,123,126,127],[73,74,82,127,135],[74,82,98,166],[72,73,74,75,82,85,95,135,141],[74,82,98],[82,85,95,96],[74,96,127,135],[73,74,75,86,89,93,94,96],[73,74,80,86],[73,74,75,82],[73,82,86,96,97],[74,75,78,82,84,85],[74],[75,82,85,86,95],[74,95],[74,75,78,85,96],[72,73,74,81,87],[77,144,171],[71,103,118,121],[83,84,85],[71,83,117],[84,118,119,120],[83,118,122,143,144],[124,144],[71,118,121,122,144],[77,143],[72,73,74,77,87,88,92,93,100,101,108,109],[245,249,313],[245,302,313],[240],[242,245,310,313],[291,310],[321],[240,321],[242,245,291,313],[237,238,241,244,271,283,302,313],[237,243],[241,245,271,305,313,321],[271,321],[261,271,321],[239,240,321],[245],[239,240,241,242,243,244,245,246,247,249,250,251,252,253,254,255,256,257,258,259,260,262,263,264,265,266,267],[245,252,253],[243,245,253,254],[244],[237,240,245],[245,249,253,254],[249],[243,245,248,313],[237,242,243,245,249,252],[271,302],[240,245,261,271,318,321],[52],[52,56,57,63,64],[52,53,54,55],[52,57,58,59],[52,58,59,60,61,62],[52,57],[52,60],[52,65,233],[52,56,57,63,64,66,67,68],[52,70,177,178,221],[52,177],[52,70,178,222,223],[52,70,221],[52,68,69,224,230,232],[52,65,69],[52,55,177],[52,64,177],[52,65,177],[52,177,225],[52,225,226,227,228,229],[52,231],[52,57,177]],"referencedMap":[[235,1],[236,1],[270,2],[271,3],[272,4],[273,5],[274,6],[275,7],[276,8],[277,9],[278,10],[279,11],[280,11],[282,12],[281,13],[283,14],[284,15],[285,16],[269,17],[286,18],[287,19],[288,20],[321,21],[289,22],[290,23],[291,24],[292,25],[293,26],[294,27],[295,28],[296,29],[297,30],[298,31],[299,31],[300,32],[302,33],[304,34],[303,35],[305,36],[306,37],[307,38],[308,39],[309,40],[310,41],[311,42],[312,43],[313,44],[314,45],[315,46],[316,47],[317,48],[318,49],[319,50],[188,51],[216,52],[182,53],[181,54],[183,55],[184,56],[187,57],[215,53],[213,58],[220,59],[190,60],[209,53],[211,61],[191,62],[206,53],[196,61],[214,63],[219,64],[205,65],[195,53],[203,66],[207,53],[198,67],[200,68],[185,61],[208,69],[194,53],[192,53],[189,70],[202,71],[179,53],[218,72],[221,73],[217,74],[90,75],[104,76],[91,77],[105,78],[102,75],[92,79],[169,80],[83,81],[164,82],[116,83],[84,84],[85,83],[124,85],[77,86],[125,87],[123,88],[115,89],[126,90],[177,91],[149,92],[151,93],[175,94],[174,95],[176,96],[159,97],[152,98],[153,99],[157,100],[155,101],[158,102],[146,103],[145,104],[160,105],[161,106],[162,107],[150,108],[156,109],[154,110],[147,111],[100,112],[136,113],[108,114],[107,115],[73,116],[129,117],[93,118],[170,119],[163,120],[114,121],[131,122],[133,123],[132,124],[168,125],[127,126],[99,127],[74,128],[112,129],[138,82],[134,130],[113,131],[79,132],[139,133],[80,134],[109,135],[81,136],[128,137],[140,138],[167,139],[142,140],[166,141],[141,142],[137,143],[95,144],[87,145],[165,146],[98,147],[86,148],[75,149],[96,150],[135,151],[94,152],[130,124],[82,153],[172,154],[122,155],[117,156],[118,157],[121,158],[171,159],[148,160],[143,161],[144,162],[110,163],[252,164],[259,165],[251,164],[266,166],[243,167],[242,168],[265,169],[260,170],[263,171],[245,172],[244,173],[240,174],[239,175],[262,176],[241,177],[246,178],[250,178],[268,179],[267,178],[254,180],[255,181],[257,182],[253,183],[256,184],[261,169],[248,185],[249,186],[258,187],[238,188],[264,189],[64,190],[65,191],[57,190],[55,190],[53,190],[56,192],[54,190],[60,193],[63,194],[58,195],[61,195],[59,190],[62,196],[234,197],[69,198],[222,199],[70,190],[178,200],[224,201],[223,202],[233,203],[68,204],[225,205],[228,206],[226,207],[227,208],[230,209],[229,207],[232,210],[231,211]],"latestChangedDtsFile":"./src/index.d.ts"},"version":"5.5.3"}
```

Contents of dist/lib/web/src/index.js:
```
export * from "./cloud";
export * from "./mina";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,SAAS,CAAC;AACxB,cAAc,QAAQ,CAAC"}
```

Contents of dist/lib/web/src/index.d.ts:
```
export * from "./cloud";
export * from "./mina";

```

Contents of dist/lib/web/src/mina/index.js:
```
export * from "./api/api";
export * from "./encryption";
export * from "./utils";
export * from "./local/local";
export * from "./verification";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/mina/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/mina/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,cAAc,CAAC;AAC7B,cAAc,SAAS,CAAC;AACxB,cAAc,eAAe,CAAC;AAC9B,cAAc,gBAAgB,CAAC"}
```

Contents of dist/lib/web/src/mina/index.d.ts:
```
export * from "./api/api";
export * from "./encryption";
export * from "./utils";
export * from "./local/local";
export * from "./verification";

```

Contents of dist/lib/web/src/mina/encryption/connections.js:
```
export const NATS_SERVER = "nats.socialcap.dev:4222";
//# sourceMappingURL=connections.js.map
```

Contents of dist/lib/web/src/mina/encryption/encryption.js.map:
```
{"version":3,"file":"encryption.js","sourceRoot":"","sources":["../../../../../../src/mina/encryption/encryption.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,KAAK,EACL,SAAS,EACT,UAAU,EACV,QAAQ,EACR,KAAK,EACL,UAAU,EACV,kBAAkB,GACnB,MAAM,MAAM,CAAC;AAEd,OAAO,EAAE,UAAU,EAAE,CAAC;AAOtB,MAAM,UAAU;IACd,MAAM,CAAC,SAAS,CAAC,UAA4B;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,OAAe;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC9B,OAAO;YACL,SAAS,EAAE,IAAI,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC;YACnC,UAAU,EAAE,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAChE,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,OAAe,EAAE,QAAgB;QAC9C,IAAI,CAAC;YACH,IAAI,MAAM,GAAY,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACvD,IAAI,SAAS,GAAG,UAAU,CAAC,OAAO,CAChC,MAAM,EACN,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC/B,CAAC;YACF,OAAO,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,KAAK,CACT,8BAA8B,OAAO,gBAAgB,QAAQ,IAAI;gBAC/D,UAAU,GAAG,EAAE,CAClB,CAAC;QACJ,CAAC;IACH,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,UAAkB,EAAE,UAAkB;QACnD,IAAI,CAAC;YACH,IAAI,MAAM,GAAG,UAAU,CAAC,OAAO,CAC7B,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,EAC5B,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,CAClC,CAAC;YACF,IAAI,SAAS,GAAG,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YAClD,OAAO,SAAS,CAAC;QACnB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,KAAK,CACT,6BAA6B,UAAU,IAAI,GAAG,UAAU,GAAG,EAAE,CAC9D,CAAC;QACJ,CAAC;IACH,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,UAAU;QACrB,MAAM,kBAAkB,EAAE,CAAC;IAC7B,CAAC;CACF"}
```

Contents of dist/lib/web/src/mina/encryption/client.js:
```
import { PrivateKey } from "o1js";
import { connect, JSONCodec } from "nats";
import { initializeBindings } from "o1js";
import { CipherText } from "./encryption";
import { NATS_SERVER } from "./connections";
export async function NATSClient(callme) {
    // create some client address, this will be done by
    // the web API BEFORE calling a worker
    const secret = PrivateKey.random();
    let address = secret.toPublicKey().toBase58();
    console.log("Client address ", address);
    // now subscribe and listen in this Address
    // we use the 'zkcw' prefix for zkCloudWorkers subscriptions
    await listen(`zkcw:${address}`, callme);
    return {
        address: address,
        secret: secret.toBase58(),
        callme: callme,
    };
}
export async function listen(subject, callme) {
    // Create a JSON codec for encoding and decoding messages
    const codec = JSONCodec();
    const connection = await connect({ servers: NATS_SERVER });
    // Subscribe to the subject
    const subscription = connection.subscribe(subject);
    console.log(`Subscribed to subject ${subject}`);
    // Process messages received on the subscribed subject
    (async () => {
        // Error decoding message:  Error: Could not encrypt message={}
        // Error: Poseidon.Sponge(): bindings are not initialized, try calling `await initializeBindings()` first.
        // This shouldn't have happened and indicates an internal bug.
        await initializeBindings();
        for await (const msg of subscription) {
            try {
                const data = codec.decode(msg.data);
                //console.log(`Received message on subject ${subject}:`, data);
                // Perform processing logic here
                const { post, params } = data;
                // console.log(`Post: `, post, params);
                switch (post) {
                    case "options":
                        {
                            // the workers announces it is ready
                            // and we receive the worker's publicKey
                            let workerKey = params.key || "";
                            console.log("\nReceived 'options' message from worker");
                            console.log("Worker publicKey: ", workerKey);
                            let options = callme.onOptions(params);
                            console.log("options:", options);
                            // we will use its key to encrypt the message
                            const encryptedOptions = CipherText.encrypt(JSON.stringify(options), workerKey);
                            console.log("Encrypted options: ", encryptedOptions);
                            // we reply with the command we want the worker to execute
                            // and with the encrypted payload
                            msg.respond(codec.encode({
                                success: true,
                                data: {
                                    command: "options",
                                    encrypted: encryptedOptions,
                                },
                                error: undefined,
                            }));
                        }
                        break;
                    case "ready":
                        {
                            // the workers announces it is ready
                            // and we receive the worker's publicKey
                            let workerKey = params.key || "";
                            console.log("\nReceived 'ready' message from worker");
                            console.log("Worker publicKey: ", workerKey);
                            let payload = callme.onReady(params);
                            console.log("payload:", payload);
                            // we will use its key to encrypt the message
                            const encryptedPayload = CipherText.encrypt(JSON.stringify(payload), workerKey);
                            console.log("Encrypted payload: ", encryptedPayload);
                            // we reply with the command we want the worker to execute
                            // and with the encrypted payload
                            msg.respond(codec.encode({
                                success: true,
                                data: {
                                    command: "execute",
                                    encrypted: encryptedPayload,
                                },
                                error: undefined,
                            }));
                        }
                        break;
                    case "done":
                        {
                            let result = params.result || "";
                            console.log("\nReceived 'done' message from worker");
                            let done = callme.onDone(params);
                            console.log("done: ", done);
                            msg.respond(codec.encode({
                                success: true,
                                data: {
                                    command: "close",
                                    status: JSON.stringify(done),
                                },
                                error: undefined,
                            }));
                            // we want to insure that messages that are in flight
                            // get processed, so we are going to drain the
                            // connection. Drain is the same as close, but makes
                            // sure that all messages in flight get seen
                            // by the iterator. After calling drain on the connection
                            // the connection closes.
                            setTimeout(async () => {
                                await connection.drain();
                            }, 1000);
                        }
                        break;
                }
            }
            catch (err) {
                console.error("Error decoding message: ", err);
            }
        }
    })();
}
/*
async function main(args: string[]) {
  const nc = await connect({ servers: NATS_SERVER });

  // create some client address, this will be done by
  // the web API when calling a worker
  const clientSecret = PrivateKey.random();
  let clientAddress = clientSecret.toPublicKey().toBase58();
  console.log("Client address ", clientAddress);
  
  clientAddress = "B62qrYPDY555koJFAdNaUyw21WCNUgie9bmsBs2gCh6DSdhQmuN4qu6";
  
  // now subscribe and listen in this Address
  listen(nc, `zkcw:${clientAddress}`);

  // we want to insure that messages that are in flight
  // get processed, so we are going to drain the
  // connection. Drain is the same as close, but makes
  // sure that all messages in flight get seen
  // by the iterator. After calling drain on the connection
  // the connection closes.
  //await nc.drain();
}

main(process.argv.slice(2)).catch((error) => {
  console.error(error);
});
*/
//# sourceMappingURL=client.js.map
```

Contents of dist/lib/web/src/mina/encryption/connections.d.ts:
```
export declare const NATS_SERVER = "nats.socialcap.dev:4222";

```

Contents of dist/lib/web/src/mina/encryption/client.js.map:
```
{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../../../src/mina/encryption/client.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/mina/encryption/messages.d.ts:
```
export declare function postOptionsMessage(clientAddress: string, workerAddress: string): Promise<any>;
export declare function postReadyMessage(clientAddress: string, workerAddress: string): Promise<any>;
export declare function postDoneMessage(clientAddress: string, encrypted: string): Promise<any>;

```

Contents of dist/lib/web/src/mina/encryption/index.js:
```
export { NATS_SERVER } from "./connections";
export { CipherText } from "./encryption";
export { NATSClient, listen } from "./client";
export { postReadyMessage, postDoneMessage, postOptionsMessage, } from "./messages";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/mina/encryption/encryption.js:
```
import { Field, PublicKey, PrivateKey, Encoding, Group, Encryption, initializeBindings, } from "o1js";
export { CipherText };
class CipherText {
    static stringify(cipherText) {
        return JSON.stringify(cipherText);
    }
    static parse(jsonStr) {
        let obj = JSON.parse(jsonStr);
        return {
            publicKey: new Group(obj.publicKey),
            cipherText: (obj.cipherText || []).map((t) => Field(t)),
        };
    }
    static encrypt(message, publicId) {
        try {
            let fields = Encoding.stringToFields(message);
            let encripted = Encryption.encrypt(fields, PublicKey.fromBase58(publicId));
            return CipherText.stringify(encripted);
        }
        catch (err) {
            throw Error(`Could not encrypt message='${message}' using key='${publicId}'.` +
                ` Error ${err}`);
        }
    }
    static decrypt(cipherText, privateKey) {
        try {
            let fields = Encryption.decrypt(CipherText.parse(cipherText), PrivateKey.fromBase58(privateKey));
            let decrypted = Encoding.stringFromFields(fields);
            return decrypted;
        }
        catch (err) {
            throw Error(`Could not decrypt cipher='${cipherText}'.` + ` Error ${err}`);
        }
    }
    static async initialize() {
        await initializeBindings();
    }
}
//# sourceMappingURL=encryption.js.map
```

Contents of dist/lib/web/src/mina/encryption/encryption.d.ts:
```
import { Field, Group } from "o1js";
export { CipherText };
interface CipherTextObject {
    cipherText: Field[];
    publicKey: Group;
}
declare class CipherText {
    static stringify(cipherText: CipherTextObject): string;
    static parse(jsonStr: string): CipherTextObject;
    static encrypt(message: string, publicId: string): string;
    static decrypt(cipherText: string, privateKey: string): string;
    static initialize(): Promise<void>;
}

```

Contents of dist/lib/web/src/mina/encryption/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/mina/encryption/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EACL,gBAAgB,EAChB,eAAe,EACf,kBAAkB,GACnB,MAAM,YAAY,CAAC"}
```

Contents of dist/lib/web/src/mina/encryption/index.d.ts:
```
export { NATS_SERVER } from "./connections";
export { CipherText } from "./encryption";
export { NATSClient, listen } from "./client";
export { postReadyMessage, postDoneMessage, postOptionsMessage, } from "./messages";

```

Contents of dist/lib/web/src/mina/encryption/connections.js.map:
```
{"version":3,"file":"connections.js","sourceRoot":"","sources":["../../../../../../src/mina/encryption/connections.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,WAAW,GAAG,yBAAyB,CAAC"}
```

Contents of dist/lib/web/src/mina/encryption/client.d.ts:
```
export interface INATSClient {
    address: string;
    secret: string;
    callme: {
        onOptions: (params: any) => void;
        onReady: (params: any) => void;
        onDone: (params: any) => void;
    };
}
export declare function NATSClient(callme: {
    onOptions: (params: any) => void;
    onReady: (params: any) => void;
    onDone: (params: any) => void;
}): Promise<INATSClient>;
export declare function listen(subject: string, callme: {
    onOptions: (params: any) => void;
    onReady: (params: any) => void;
    onDone: (params: any) => void;
}): Promise<void>;

```

Contents of dist/lib/web/src/mina/encryption/messages.js.map:
```
{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../../../../src/mina/encryption/messages.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C,MAAM,KAAK,GAAG,SAAS,EAAE,CAAC;AAE1B,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,aAAqB,EACrB,aAAqB;IAErB,wDAAwD;IACxD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;IACnD,MAAM,GAAG,GAAQ,MAAM,EAAE,CAAC,OAAO,CAC/B,QAAQ,aAAa,EAAE,EACvB,KAAK,CAAC,MAAM,CAAC;QACX,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE;KACnC,CAAC,CACH,CAAA;IACD,MAAM,QAAQ,GAAQ,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAEpC,mCAAmC;IACnC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;IAEjB,OAAO,QAAQ,CAAA;AACjB,CAAC;AAAA,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,aAAqB,EACrB,aAAqB;IAErB,wDAAwD;IACxD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;IACnD,MAAM,GAAG,GAAQ,MAAM,EAAE,CAAC,OAAO,CAC/B,QAAQ,aAAa,EAAE,EACvB,KAAK,CAAC,MAAM,CAAC;QACX,MAAM,EAAE,OAAO;QACf,QAAQ,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE;KACnC,CAAC,CACH,CAAA;IACD,MAAM,QAAQ,GAAQ,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAEpC,mCAAmC;IACnC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;IAEjB,OAAO,QAAQ,CAAA;AACjB,CAAC;AAAA,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,aAAqB,EACrB,SAAiB;IAEjB,wDAAwD;IACxD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;IACnD,MAAM,GAAG,GAAQ,MAAM,EAAE,CAAC,OAAO,CAC/B,QAAQ,aAAa,EAAE,EACvB,KAAK,CAAC,MAAM,CAAC;QACX,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;KAClC,CAAC,CACH,CAAA;IACD,MAAM,QAAQ,GAAQ,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAEpC,mCAAmC;IACnC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;IAEjB,OAAO,QAAQ,CAAA;AACjB,CAAC;AAAA,CAAC"}
```

Contents of dist/lib/web/src/mina/encryption/messages.js:
```
import { connect, JSONCodec } from "nats";
import { NATS_SERVER } from "./connections";
const codec = JSONCodec();
export async function postOptionsMessage(clientAddress, workerAddress) {
    // connect to the NATS server and send a 'ready' request
    const nc = await connect({ servers: NATS_SERVER });
    const msg = await nc.request(`zkcw:${clientAddress}`, codec.encode({
        "post": "options",
        "params": { "key": workerAddress }
    }));
    const response = codec.decode(msg.data);
    console.log("Response: ", response);
    // disconect and clean all pendings
    await nc.drain();
    return response;
}
;
export async function postReadyMessage(clientAddress, workerAddress) {
    // connect to the NATS server and send a 'ready' request
    const nc = await connect({ servers: NATS_SERVER });
    const msg = await nc.request(`zkcw:${clientAddress}`, codec.encode({
        "post": "ready",
        "params": { "key": workerAddress }
    }));
    const response = codec.decode(msg.data);
    console.log("Response: ", response);
    // disconect and clean all pendings
    await nc.drain();
    return response;
}
;
export async function postDoneMessage(clientAddress, encrypted) {
    // connect to the NATS server and send a 'ready' request
    const nc = await connect({ servers: NATS_SERVER });
    const msg = await nc.request(`zkcw:${clientAddress}`, codec.encode({
        "post": "done",
        "params": { "result": encrypted }
    }));
    const response = codec.decode(msg.data);
    console.log("Response: ", response);
    // disconect and clean all pendings
    await nc.drain();
    return response;
}
;
//# sourceMappingURL=messages.js.map
```

Contents of dist/lib/web/src/mina/utils/fee.d.ts:
```
import { UInt64 } from "o1js";
/**
 * Calculate the fee for a transaction
 * @returns the fee for a transaction
 */
export declare function fee(): Promise<UInt64>;

```

Contents of dist/lib/web/src/mina/utils/fee.js:
```
import { UInt64 } from "o1js";
import config from "../../cloud/config";
/**
 * Calculate the fee for a transaction
 * @returns the fee for a transaction
 */
export async function fee() {
    //TODO: update after mainnet launch and resolution of the issue https://github.com/o1-labs/o1js/issues/1626
    return UInt64.fromJSON(config.MINAFEE);
}
//# sourceMappingURL=fee.js.map
```

Contents of dist/lib/web/src/mina/utils/mina.js:
```
export { initBlockchain, accountBalance, accountBalanceMina, currentNetwork, getNetworkIdHash, getCurrentNetwork, getDeployer, };
import { Mina, PrivateKey, UInt64, fetchAccount, Lightnet, CircuitString, } from "o1js";
import { networks, Local } from "../../cloud";
let currentNetwork = undefined;
function getNetworkIdHash() {
    if (currentNetwork === undefined) {
        throw new Error("Network is not initialized");
    }
    return currentNetwork.networkIdHash;
}
function getCurrentNetwork() {
    if (currentNetwork === undefined) {
        throw new Error("Network is not initialized");
    }
    return currentNetwork;
}
function getDeployer() {
    if (currentNetwork === undefined) {
        throw new Error("Network is not initialized");
    }
    if (currentNetwork.keys.length < 1)
        return undefined;
    return currentNetwork.keys[0];
}
/**
 * Initializes the Mina blockchain network
 * Due to the limitations of the Mina SDK, only one network can be initialized at a time
 * This function should be called before any other Mina functions
 * @param instance the blockchain instance to initialize
 * @param deployersNumber the number of deployers to use for the network (only for local and lightnet networks)
 * @returns the Mina network instance
 */
async function initBlockchain(instance, deployersNumber = 0) {
    /*
    if (instance === "mainnet") {
      throw new Error("Mainnet is not supported yet by zkApps");
    }
    */
    if (currentNetwork !== undefined) {
        if (currentNetwork?.network.chainId === instance) {
            return currentNetwork;
        }
        else {
            throw new Error(`Network is already initialized to different chain ${currentNetwork.network.chainId}, cannot initialize to ${instance}`);
        }
    }
    const networkIdHash = CircuitString.fromString(instance).hash();
    // await used for compatibility with future versions of o1js
    if (instance === "local") {
        const local = await Mina.LocalBlockchain({
            proofsEnabled: true,
        });
        Mina.setActiveInstance(local);
        if (deployersNumber > local.testAccounts.length)
            throw new Error("Not enough test accounts");
        currentNetwork = {
            keys: local.testAccounts,
            network: Local,
            networkIdHash,
        };
        return currentNetwork;
    }
    const network = networks.find((n) => n.chainId === instance);
    if (network === undefined) {
        throw new Error("Unknown network");
    }
    const networkInstance = Mina.Network({
        mina: network.mina,
        archive: network.archive,
        lightnetAccountManager: network.accountManager,
        networkId: instance === "mainnet" ? "mainnet" : "testnet",
    });
    Mina.setActiveInstance(networkInstance);
    const keys = [];
    if (deployersNumber > 0) {
        if (instance === "lightnet") {
            for (let i = 0; i < deployersNumber; i++) {
                const keyPair = await Lightnet.acquireKeyPair();
                const key = Mina.TestPublicKey(keyPair.privateKey);
                keys.push(key);
            }
        }
        else {
            const deployers = process.env.DEPLOYERS;
            if (deployers === undefined ||
                Array.isArray(deployers) === false ||
                deployers.length < deployersNumber)
                throw new Error("Deployers are not set");
            for (let i = 0; i < deployersNumber; i++) {
                const privateKey = PrivateKey.fromBase58(deployers[i]);
                const key = Mina.TestPublicKey(privateKey);
                keys.push(key);
            }
        }
    }
    currentNetwork = {
        keys,
        network,
        networkIdHash,
    };
    return currentNetwork;
}
/**
 * Fetches the account balance for a given public key
 * @param address the public key
 * @returns the account balance
 */
async function accountBalance(address) {
    await fetchAccount({ publicKey: address });
    if (Mina.hasAccount(address))
        return Mina.getBalance(address);
    else
        return UInt64.from(0);
}
/**
 * Fetches the account balance for a given public key and returns it in Mina
 * @param address the public key
 * @returns the account balance in MINA
 */
async function accountBalanceMina(address) {
    return Number((await accountBalance(address)).toBigInt()) / 1e9;
}
//# sourceMappingURL=mina.js.map
```

Contents of dist/lib/web/src/mina/utils/base64.js.map:
```
{"version":3,"file":"base64.js","sourceRoot":"","sources":["../../../../../../src/mina/utils/base64.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AAE5D,+BAA+B;AAC/B,MAAM,KAAK,GACT,kEAAkE,CAAC;AAErE,MAAM,UAAU,aAAa,CAAC,KAAY;IACxC,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;IAC7C,iCAAiC;IACjC,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzD,2BAA2B;IAC3B,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,GAAW;IACzC,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,MAAM,CAAC,GAAG,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACtC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAY;IACxC,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;IAC7C,iCAAiC;IACjC,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzD,2BAA2B;IAC3B,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,GAAW;IACzC,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,MAAM,CAAC,GAAG,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACtC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC"}
```

Contents of dist/lib/web/src/mina/utils/fetch.js:
```
import { Mina, fetchAccount, checkZkappTransaction, } from "o1js";
import { sleep } from "../../cloud";
/**
 * Fetches the Mina account for a given public key with error handling
 * @param params the parameters for fetching the account
 * @param params.publicKey the public key of the account
 * @param params.tokenId the token id of the account
 * @param params.force whether to force the fetch - use it only if you are sure the account exists
 * @returns the account object
 */
export async function fetchMinaAccount(params) {
    const { publicKey, tokenId, force } = params;
    const timeout = 1000 * 60 * 2; // 2 minutes
    const startTime = Date.now();
    let result = { account: undefined };
    while (Date.now() - startTime < timeout) {
        try {
            const result = await fetchAccount({
                publicKey,
                tokenId,
            });
            return result;
        }
        catch (error) {
            if (force === true)
                console.log("Error in fetchMinaAccount:", {
                    error,
                    publicKey: typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
                    tokenId: tokenId?.toString(),
                    force,
                });
            else {
                console.log("fetchMinaAccount error", {
                    error,
                    publicKey: typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
                    tokenId: tokenId?.toString(),
                    force,
                });
                return result;
            }
        }
        await sleep(1000 * 5);
    }
    if (force === true)
        throw new Error(`fetchMinaAccount timeout
      ${{
            publicKey: typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
            tokenId: tokenId?.toString(),
            force,
        }}`);
    else
        console.log("fetchMinaAccount timeout", typeof publicKey === "string" ? publicKey : publicKey.toBase58(), tokenId?.toString(), force);
    return result;
}
/**
 * Fetches the Mina actions for a given public key with error handling
 * @param publicKey the public key of the contract
 * @param fromActionState the starting action state
 * @param endActionState the ending action state
 * @returns the actions array
 */
export async function fetchMinaActions(publicKey, fromActionState, endActionState) {
    const timeout = 1000 * 60 * 600; // 10 hours
    const startTime = Date.now();
    while (Date.now() - startTime < timeout) {
        try {
            let actions = await Mina.fetchActions(publicKey, {
                fromActionState,
                endActionState,
            });
            if (Array.isArray(actions))
                return actions;
            else
                console.log("Cannot fetch actions - wrong format");
        }
        catch (error) {
            console.log("Error in fetchMinaActions", error.toString().substring(0, 300));
        }
        await sleep(1000 * 60 * 2);
    }
    console.log("Timeout in fetchMinaActions");
    return undefined;
}
/**
 * Fetches the Mina transaction for a given hash with error handling
 * @param hash the hash of the transaction
 * @returns the transaction object
 */
export async function checkMinaZkappTransaction(hash) {
    try {
        const result = await checkZkappTransaction(hash);
        return result;
    }
    catch (error) {
        console.error("Error in checkZkappTransaction:", error);
        return { success: false };
    }
}
//# sourceMappingURL=fetch.js.map
```

Contents of dist/lib/web/src/mina/utils/fields.js.map:
```
{"version":3,"file":"fields.js","sourceRoot":"","sources":["../../../../../../src/mina/utils/fields.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAE1D;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,MAAe;IAC7C,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC;IACtD,+DAA+D;IAC/D,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtD,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,CAAS;IACzC,IAAI,CAAC;QACH,uEAAuE;QACvE,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,IACE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;aACpB,MAAM,CAAC,MAAM,CAAC;aACd,SAAS,EAAE,KAAK,KAAK;YAExB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC;YACtC,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;;YAAM,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IAC3E,CAAC;IAAC,OAAO,CAAM,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IACnE,CAAC;AACH,CAAC"}
```

Contents of dist/lib/web/src/mina/utils/fields.js:
```
import { Field, Poseidon } from "o1js";
import { fieldToBase64, fieldFromBase64 } from "./base64";
/**
 * Serialize fields to a string using base64 URL-friendly encoding
 * @param fields the fields array to serialize
 * @returns the serialized string
 */
export function serializeFields(fields) {
    const hash = Poseidon.hash(fields);
    const value = [Field(fields.length), hash, ...fields];
    //return value.map((f) => f.toBigInt().toString(36)).join(".");
    return value.map((f) => fieldToBase64(f)).join(".");
}
/**
 * Deserialize fields from a string using base64 URL-friendly encoding
 * @param s the string to deserialize
 * @returns the deserialized fields array
 */
export function deserializeFields(s) {
    try {
        //const value = s.split(".").map((n) => Field(BigInt(convert(n, 36))));
        const value = s.split(".").map((n) => fieldFromBase64(n));
        const length = value[0];
        if (Field(value.length - 2)
            .equals(length)
            .toBoolean() === false)
            throw new Error("deserializeFields: invalid length");
        const hash = Poseidon.hash(value.slice(2));
        if (hash.equals(value[1]).toBoolean()) {
            return value.slice(2);
        }
        else
            throw new Error("deserializeFields: invalid hash: data mismatch");
    }
    catch (e) {
        throw new Error(`deserializeFields: invalid string: ${s}: ${e}`);
    }
}
//# sourceMappingURL=fields.js.map
```

Contents of dist/lib/web/src/mina/utils/index.js:
```
export * from "./base64";
export * from "./fetch";
export * from "./fields";
export * from "./fee";
export * from "./mina";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/mina/utils/base64.js:
```
import { Field } from "o1js";
import { toBase, fromBase } from "../../cloud/utils/base64";
// URL friendly base64 encoding
const TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
export function fieldToBase56(field) {
    const digits = toBase(field.toBigInt(), 56n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
export function fieldFromBase56(str) {
    const base56Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = fromBase(base56Digits, 56n);
    return Field(x);
}
export function fieldToBase64(field) {
    const digits = toBase(field.toBigInt(), 64n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
export function fieldFromBase64(str) {
    const base64Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = fromBase(base64Digits, 64n);
    return Field(x);
}
//# sourceMappingURL=base64.js.map
```

Contents of dist/lib/web/src/mina/utils/fields.d.ts:
```
import { Field } from "o1js";
/**
 * Serialize fields to a string using base64 URL-friendly encoding
 * @param fields the fields array to serialize
 * @returns the serialized string
 */
export declare function serializeFields(fields: Field[]): string;
/**
 * Deserialize fields from a string using base64 URL-friendly encoding
 * @param s the string to deserialize
 * @returns the deserialized fields array
 */
export declare function deserializeFields(s: string): Field[];

```

Contents of dist/lib/web/src/mina/utils/fetch.d.ts:
```
import { PublicKey, Field } from "o1js";
/**
 * Fetches the Mina account for a given public key with error handling
 * @param params the parameters for fetching the account
 * @param params.publicKey the public key of the account
 * @param params.tokenId the token id of the account
 * @param params.force whether to force the fetch - use it only if you are sure the account exists
 * @returns the account object
 */
export declare function fetchMinaAccount(params: {
    publicKey: string | PublicKey;
    tokenId?: string | Field | undefined;
    force?: boolean;
}): Promise<{
    account: undefined;
} | {
    account: import("o1js/dist/node/bindings/mina-transaction/gen/transaction").Account;
    error: undefined;
}>;
/**
 * Fetches the Mina actions for a given public key with error handling
 * @param publicKey the public key of the contract
 * @param fromActionState the starting action state
 * @param endActionState the ending action state
 * @returns the actions array
 */
export declare function fetchMinaActions(publicKey: PublicKey, fromActionState: Field, endActionState?: Field): Promise<{
    actions: string[][];
    hash: string;
}[] | undefined>;
/**
 * Fetches the Mina transaction for a given hash with error handling
 * @param hash the hash of the transaction
 * @returns the transaction object
 */
export declare function checkMinaZkappTransaction(hash: string): Promise<{
    success: boolean;
    failureReason: string[][][];
} | {
    success: boolean;
    failureReason: null;
} | {
    success: boolean;
}>;

```

Contents of dist/lib/web/src/mina/utils/mina.js.map:
```
{"version":3,"file":"mina.js","sourceRoot":"","sources":["../../../../../../src/mina/utils/mina.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/mina/utils/mina.d.ts:
```
export { initBlockchain, accountBalance, accountBalanceMina, MinaNetworkInstance, currentNetwork, getNetworkIdHash, getCurrentNetwork, getDeployer, };
import { Mina, PublicKey, UInt64, Field } from "o1js";
import { blockchain, MinaNetwork } from "../../cloud";
/**
 * MinaNetworkInstance is the data structure for a Mina network instance, keeping track of the keys, network, and network ID hash.
 */
interface MinaNetworkInstance {
    /** The keys for the deployers */
    keys: Mina.TestPublicKey[];
    /** The network */
    network: MinaNetwork;
    /** The network ID hash */
    networkIdHash: Field;
}
declare let currentNetwork: MinaNetworkInstance | undefined;
declare function getNetworkIdHash(): Field;
declare function getCurrentNetwork(): MinaNetworkInstance;
declare function getDeployer(): Mina.TestPublicKey | undefined;
/**
 * Initializes the Mina blockchain network
 * Due to the limitations of the Mina SDK, only one network can be initialized at a time
 * This function should be called before any other Mina functions
 * @param instance the blockchain instance to initialize
 * @param deployersNumber the number of deployers to use for the network (only for local and lightnet networks)
 * @returns the Mina network instance
 */
declare function initBlockchain(instance: blockchain, deployersNumber?: number): Promise<MinaNetworkInstance>;
/**
 * Fetches the account balance for a given public key
 * @param address the public key
 * @returns the account balance
 */
declare function accountBalance(address: PublicKey): Promise<UInt64>;
/**
 * Fetches the account balance for a given public key and returns it in Mina
 * @param address the public key
 * @returns the account balance in MINA
 */
declare function accountBalanceMina(address: PublicKey): Promise<number>;

```

Contents of dist/lib/web/src/mina/utils/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/mina/utils/index.ts"],"names":[],"mappings":"AAAA,cAAc,UAAU,CAAC;AACzB,cAAc,SAAS,CAAC;AACxB,cAAc,UAAU,CAAC;AACzB,cAAc,OAAO,CAAC;AACtB,cAAc,QAAQ,CAAC"}
```

Contents of dist/lib/web/src/mina/utils/base64.d.ts:
```
import { Field } from "o1js";
export declare function fieldToBase56(field: Field): string;
export declare function fieldFromBase56(str: string): Field;
export declare function fieldToBase64(field: Field): string;
export declare function fieldFromBase64(str: string): Field;

```

Contents of dist/lib/web/src/mina/utils/index.d.ts:
```
export * from "./base64";
export * from "./fetch";
export * from "./fields";
export * from "./fee";
export * from "./mina";

```

Contents of dist/lib/web/src/mina/utils/fee.js.map:
```
{"version":3,"file":"fee.js","sourceRoot":"","sources":["../../../../../../src/mina/utils/fee.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,MAAM,MAAM,oBAAoB,CAAC;AAExC;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,GAAG;IACvB,2GAA2G;IAC3G,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACzC,CAAC"}
```

Contents of dist/lib/web/src/mina/utils/fetch.js.map:
```
{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../../../../src/mina/utils/fetch.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/mina/local/local.js:
```
import { makeString, Cloud, } from "../../cloud";
/**
 * LocalCloud is a cloud that runs on the local machine for testing and development
 * It uses LocalStorage to store jobs, tasks, transactions, and data
 * It uses a localWorker to execute the tasks
 * It can be used to test the cloud functionality without deploying to the cloud
 * @param localWorker the worker to execute the tasks
 */
export class LocalCloud extends Cloud {
    /**
     * Constructor for LocalCloud
     * @param params the parameters to create the LocalCloud
     * @param params.job the job data
     * @param params.chain the blockchain to execute the job on, can be any blockchain, not only local
     * @param params.cache the cache folder
     * @param params.stepId the step id
     * @param params.localWorker the worker to execute the tasks
     */
    constructor(params) {
        const { job, chain, cache, stepId, localWorker } = params;
        const { id, jobId, developer, repo, task, userId, args, metadata, taskId } = job;
        super({
            id: id,
            jobId: jobId,
            stepId: stepId ?? "stepId",
            taskId: taskId ?? "taskId",
            cache: cache ?? "./cache",
            developer: developer,
            repo: repo,
            task: task,
            userId: userId,
            args: args,
            metadata: metadata,
            isLocalCloud: true,
            chain,
        });
        this.localWorker = localWorker;
    }
    /**
     * Provides the deployer key pair for testing and development
     * @returns the deployer key pair
     */
    async getDeployer() {
        const privateKey = process.env.DEPLOYER_PRIVATE_KEY;
        const publicKey = process.env.DEPLOYER_PUBLIC_KEY;
        try {
            return privateKey === undefined || publicKey === undefined
                ? undefined
                : {
                    privateKey,
                    publicKey,
                };
        }
        catch (error) {
            console.error(`getDeployer: error getting deployer key pair: ${error}`, error);
            return undefined;
        }
    }
    /**
     * Releases the deployer key pair
     */
    async releaseDeployer(params) {
        console.log("LocalCloud: releaseDeployer", params);
    }
    /**
     * Gets the data by key
     * @param key the key to get the data
     * @returns the data
     */
    async getDataByKey(key) {
        const value = LocalStorage.data[key];
        return value;
    }
    /**
     * Saves the data by key
     * @param key the key to save the data
     * @param value the value to save
     */
    async saveDataByKey(key, value) {
        if (value !== undefined)
            LocalStorage.data[key] = value;
        else
            delete LocalStorage.data[key];
    }
    /**
     * Saves the file
     * @param filename the filename to save
     * @param value the value to save
     */
    async saveFile(filename, value) {
        LocalStorage.files[filename] = value;
        //throw new Error("Method not implemented.");
        //await saveBinaryFile({ data: value, filename });
    }
    /**
     * Loads the file
     * @param filename
     * @returns the file data
     */
    async loadFile(filename) {
        return LocalStorage.files[filename];
        //throw new Error("Method not implemented.");
        //const data = await loadBinaryFile(filename);
        //return data;
    }
    /**
     * Encrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns encrypted data
     */
    async encrypt(params) {
        return JSON.stringify(params);
    }
    /**
     * Decrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns
     */
    async decrypt(params) {
        const { data, context, keyId } = JSON.parse(params.data);
        if (context !== params.context) {
            console.error("decrypt: context mismatch");
            return undefined;
        }
        if (keyId !== params.keyId) {
            console.error("decrypt: keyId mismatch");
            return undefined;
        }
        return data;
    }
    /**
     * Generates an id for local cloud
     * @returns generated unique id
     */
    static generateId(tx = undefined) {
        //const data =
        //  tx ?? JSON.stringify({ time: Date.now(), data: makeString(32) });
        //return stringHash(data);
        return Date.now() + "." + makeString(32);
    }
    /**
     * Send transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    async sendTransactions(transactions) {
        return await LocalCloud.addTransactions(transactions);
    }
    /**
     * Adds transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    static async addTransactions(transactions) {
        const timeReceived = Date.now();
        const txs = [];
        transactions.forEach((tx) => {
            if (typeof tx === "string") {
                const txId = LocalCloud.generateId(JSON.stringify({ tx, time: timeReceived }));
                const transaction = {
                    txId,
                    transaction: tx,
                    timeReceived,
                    status: "accepted",
                };
                LocalStorage.transactions[txId] = transaction;
                txs.push(transaction);
            }
            else {
                LocalStorage.transactions[tx.txId] = tx;
                txs.push(tx);
            }
        });
        return txs;
    }
    /**
     * Deletes a transaction from the local cloud
     * @param txId the transaction id to delete
     */
    async deleteTransaction(txId) {
        if (LocalStorage.transactions[txId] === undefined)
            throw new Error(`deleteTransaction: Transaction ${txId} not found`);
        delete LocalStorage.transactions[txId];
    }
    async getTransactions() {
        const txs = Object.keys(LocalStorage.transactions).map((txId) => {
            return LocalStorage.transactions[txId];
        });
        return txs;
    }
    /**
     * Publish the transaction metadata in human-readable format
     * @param params
     * @param params.txId the transaction id
     * @param params.metadata the metadata
     */
    async publishTransactionMetadata(params) {
        console.log("publishTransactionMetadata:", params);
    }
    /**
     * Runs the worker in the local cloud
     * @param params the parameters to run the worker
     * @param params.command the command to run
     * @param params.data the data to use
     * @param params.chain the blockchain to execute the job on
     * @param params.localWorker the worker to execute the tasks
     * @returns the job id
     */
    static async run(params) {
        const { command, data, chain, localWorker } = params;
        const { developer, repo, transactions, task, userId, args, metadata } = data;
        const timeCreated = Date.now();
        const jobId = LocalCloud.generateId();
        const job = {
            id: "local",
            jobId,
            developer,
            repo,
            task,
            userId,
            args,
            metadata,
            txNumber: command === "recursiveProof" ? transactions.length : 1,
            timeCreated,
            timeStarted: timeCreated,
            chain,
        };
        const cloud = new LocalCloud({
            job,
            chain,
            localWorker,
        });
        const worker = await localWorker(cloud);
        if (worker === undefined)
            throw new Error("worker is undefined");
        const result = command === "recursiveProof"
            ? await LocalCloud.sequencer({
                worker,
                data,
            })
            : command === "execute"
                ? await worker.execute(transactions)
                : undefined;
        const timeFinished = Date.now();
        if (result !== undefined) {
            LocalStorage.jobEvents[jobId] = {
                jobId,
                jobStatus: "finished",
                eventTime: timeFinished,
                result,
            };
            job.timeFinished = timeFinished;
            job.jobStatus = "finished";
            job.result = result;
        }
        else {
            LocalStorage.jobEvents[jobId] = {
                jobId,
                jobStatus: "failed",
                eventTime: timeFinished,
            };
            job.timeFailed = timeFinished;
            job.jobStatus = "failed";
        }
        job.billedDuration = timeFinished - timeCreated;
        LocalStorage.jobs[jobId] = job;
        return jobId;
    }
    /**
     * Runs the recursive proof in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    async recursiveProof(data) {
        return await LocalCloud.run({
            command: "recursiveProof",
            data: {
                developer: this.developer,
                repo: this.repo,
                transactions: data.transactions,
                task: data.task ?? "recursiveProof",
                userId: data.userId,
                args: data.args,
                metadata: data.metadata,
            },
            chain: this.chain,
            localWorker: this.localWorker,
        });
    }
    /**
     * Executes the task in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    async execute(data) {
        return await LocalCloud.run({
            command: "execute",
            data: {
                developer: this.developer,
                repo: this.repo,
                transactions: data.transactions,
                task: data.task,
                userId: data.userId,
                args: data.args,
                metadata: data.metadata,
            },
            chain: this.chain,
            localWorker: this.localWorker,
        });
    }
    /**
     * Gets the job result
     * @param jobId the job id
     * @returns the job data
     */
    async jobResult(jobId) {
        return LocalStorage.jobs[jobId];
    }
    /**
     * Adds a task to the local cloud
     * @param data the data to use
     * @param data.task the task to execute
     * @param data.startTime the start time for the task
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the task id
     */
    async addTask(data) {
        const taskId = LocalCloud.generateId();
        LocalStorage.tasks[taskId] = {
            ...data,
            id: "local",
            taskId,
            timeCreated: Date.now(),
            developer: this.developer,
            repo: this.repo,
            chain: this.chain,
        };
        return taskId;
    }
    /**
     * Deletes a task from the local cloud
     * @param taskId the task id to delete
     */
    async deleteTask(taskId) {
        if (LocalStorage.tasks[taskId] === undefined)
            throw new Error(`deleteTask: Task ${taskId} not found`);
        delete LocalStorage.tasks[taskId];
    }
    /**
     * Processes the tasks in the local cloud
     */
    async processTasks() {
        await LocalCloud.processLocalTasks({
            developer: this.developer,
            repo: this.repo,
            localWorker: this.localWorker,
            chain: this.chain,
        });
    }
    /**
     * Processes the local tasks
     * @param params the parameters to process the local tasks
     * @param params.developer the developer of the repo
     * @param params.repo the repo
     * @param params.localWorker the worker to execute the tasks
     * @param params.chain the blockchain to execute the job on
     */
    static async processLocalTasks(params) {
        const { developer, repo, localWorker, chain } = params;
        for (const taskId in LocalStorage.tasks) {
            const data = LocalStorage.tasks[taskId];
            const jobId = LocalCloud.generateId();
            const timeCreated = Date.now();
            if (data.startTime !== undefined && data.startTime < timeCreated)
                continue;
            const job = {
                id: "local",
                jobId: jobId,
                taskId: taskId,
                developer,
                repo,
                task: data.task,
                userId: data.userId,
                args: data.args,
                metadata: data.metadata,
                txNumber: 1,
                timeCreated: timeCreated,
            };
            const cloud = new LocalCloud({
                job,
                chain,
                localWorker,
            });
            const worker = await localWorker(cloud);
            const result = await worker.task();
            const timeFinished = Date.now();
            if (result !== undefined) {
                LocalStorage.jobEvents[jobId] = {
                    jobId,
                    jobStatus: "finished",
                    eventTime: timeFinished,
                    result,
                };
                job.timeFinished = timeFinished;
            }
            else {
                LocalStorage.jobEvents[jobId] = {
                    jobId,
                    jobStatus: "failed",
                    eventTime: timeFinished,
                };
                job.timeFailed = timeFinished;
            }
            job.billedDuration = timeFinished - timeCreated;
            LocalStorage.jobs[jobId] = job;
        }
        let count = 0;
        for (const task in LocalStorage.tasks)
            count++;
        return count;
    }
    /**
     * Runs the sequencer in the local cloud
     * @param params the parameters to run the sequencer
     * @param params.worker the worker to execute the tasks
     * @param params.data the data to use
     * @returns the proof
     */
    static async sequencer(params) {
        const { worker, data } = params;
        const { transactions } = data;
        if (transactions.length === 0)
            throw new Error("No transactions to process");
        const proofs = [];
        for (const transaction of transactions) {
            const result = await worker.create(transaction);
            if (result === undefined)
                throw new Error("Failed to create proof");
            proofs.push(result);
        }
        let proof = proofs[0];
        for (let i = 1; i < proofs.length; i++) {
            const result = await worker.merge(proof, proofs[i]);
            if (result === undefined)
                throw new Error("Failed to merge proofs");
            proof = result;
        }
        return proof;
    }
    /**
     * forces the worker to restart
     */
    async forceWorkerRestart() {
        throw new Error("forceWorkerRestart called in LocalCloud");
    }
}
/**
 * LocalStorage is a local storage for the local cloud.
 * It stores jobs, tasks, transactions, and data.
 * It can be used to test the cloud functionality without deploying to the cloud.
 */
export class LocalStorage {
    /**
     * Saves the data.
     * @param name The name to save the data under.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static async saveData(name) {
        throw new Error("Method not implemented to keep web compatibility.");
        const data = {
            jobs: LocalStorage.jobs,
            data: LocalStorage.data,
            transactions: LocalStorage.transactions,
            tasks: LocalStorage.tasks,
        };
        const filename = name + ".cloud";
        // await saveFile({ data, filename });
    }
    /**
     * Loads the data.
     * @param name The name to load the data from.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static async loadData(name) {
        throw new Error("Method not implemented to keep web compatibility.");
        const filename = name + ".cloud";
        /*
        const data = await loadFile(filename);
        if (data === undefined) return;
        LocalStorage.jobs = data.jobs;
        LocalStorage.data = data.data;
        LocalStorage.transactions = data.transactions;
        LocalStorage.tasks = data.tasks;
        */
    }
}
/** The jobs */
LocalStorage.jobs = {};
/** The job events */
LocalStorage.jobEvents = {};
/** The data */
LocalStorage.data = {};
/** The files */
LocalStorage.files = {};
/** The transactions */
LocalStorage.transactions = {};
/** The tasks */
LocalStorage.tasks = {};
//# sourceMappingURL=local.js.map
```

Contents of dist/lib/web/src/mina/local/local.js.map:
```
{"version":3,"file":"local.js","sourceRoot":"","sources":["../../../../../../src/mina/local/local.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/mina/local/local.d.ts:
```
import { blockchain, TransactionMetadata, CloudTransaction, DeployerKeyPair, TaskData, JobData, JobEvent, Cloud, zkCloudWorker } from "../../cloud";
import { ApiCommand } from "../api/api";
/**
 * LocalCloud is a cloud that runs on the local machine for testing and development
 * It uses LocalStorage to store jobs, tasks, transactions, and data
 * It uses a localWorker to execute the tasks
 * It can be used to test the cloud functionality without deploying to the cloud
 * @param localWorker the worker to execute the tasks
 */
export declare class LocalCloud extends Cloud {
    readonly localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
    /**
     * Constructor for LocalCloud
     * @param params the parameters to create the LocalCloud
     * @param params.job the job data
     * @param params.chain the blockchain to execute the job on, can be any blockchain, not only local
     * @param params.cache the cache folder
     * @param params.stepId the step id
     * @param params.localWorker the worker to execute the tasks
     */
    constructor(params: {
        job: JobData;
        chain: blockchain;
        cache?: string;
        stepId?: string;
        localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
    });
    /**
     * Provides the deployer key pair for testing and development
     * @returns the deployer key pair
     */
    getDeployer(): Promise<DeployerKeyPair | undefined>;
    /**
     * Releases the deployer key pair
     */
    releaseDeployer(params: {
        publicKey: string;
        txsHashes: string[];
    }): Promise<void>;
    /**
     * Gets the data by key
     * @param key the key to get the data
     * @returns the data
     */
    getDataByKey(key: string): Promise<string | undefined>;
    /**
     * Saves the data by key
     * @param key the key to save the data
     * @param value the value to save
     */
    saveDataByKey(key: string, value: string | undefined): Promise<void>;
    /**
     * Saves the file
     * @param filename the filename to save
     * @param value the value to save
     */
    saveFile(filename: string, value: Buffer): Promise<void>;
    /**
     * Loads the file
     * @param filename
     * @returns the file data
     */
    loadFile(filename: string): Promise<Buffer | undefined>;
    /**
     * Encrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns encrypted data
     */
    encrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Decrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns
     */
    decrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Generates an id for local cloud
     * @returns generated unique id
     */
    private static generateId;
    /**
     * Send transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    sendTransactions(transactions: string[]): Promise<CloudTransaction[]>;
    /**
     * Adds transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    static addTransactions(transactions: string[] | CloudTransaction[]): Promise<CloudTransaction[]>;
    /**
     * Deletes a transaction from the local cloud
     * @param txId the transaction id to delete
     */
    deleteTransaction(txId: string): Promise<void>;
    getTransactions(): Promise<CloudTransaction[]>;
    /**
     * Publish the transaction metadata in human-readable format
     * @param params
     * @param params.txId the transaction id
     * @param params.metadata the metadata
     */
    publishTransactionMetadata(params: {
        txId: string;
        metadata: TransactionMetadata;
    }): Promise<void>;
    /**
     * Runs the worker in the local cloud
     * @param params the parameters to run the worker
     * @param params.command the command to run
     * @param params.data the data to use
     * @param params.chain the blockchain to execute the job on
     * @param params.localWorker the worker to execute the tasks
     * @returns the job id
     */
    static run(params: {
        command: ApiCommand;
        data: {
            developer: string;
            repo: string;
            transactions: string[];
            task: string;
            userId?: string;
            args?: string;
            metadata?: string;
        };
        chain: blockchain;
        localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
    }): Promise<string>;
    /**
     * Runs the recursive proof in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    recursiveProof(data: {
        transactions: string[];
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Executes the task in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    execute(data: {
        transactions: string[];
        task: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Gets the job result
     * @param jobId the job id
     * @returns the job data
     */
    jobResult(jobId: string): Promise<JobData | undefined>;
    /**
     * Adds a task to the local cloud
     * @param data the data to use
     * @param data.task the task to execute
     * @param data.startTime the start time for the task
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the task id
     */
    addTask(data: {
        task: string;
        startTime?: number;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Deletes a task from the local cloud
     * @param taskId the task id to delete
     */
    deleteTask(taskId: string): Promise<void>;
    /**
     * Processes the tasks in the local cloud
     */
    processTasks(): Promise<void>;
    /**
     * Processes the local tasks
     * @param params the parameters to process the local tasks
     * @param params.developer the developer of the repo
     * @param params.repo the repo
     * @param params.localWorker the worker to execute the tasks
     * @param params.chain the blockchain to execute the job on
     */
    static processLocalTasks(params: {
        developer: string;
        repo: string;
        localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
        chain: blockchain;
    }): Promise<number>;
    /**
     * Runs the sequencer in the local cloud
     * @param params the parameters to run the sequencer
     * @param params.worker the worker to execute the tasks
     * @param params.data the data to use
     * @returns the proof
     */
    static sequencer(params: {
        worker: zkCloudWorker;
        data: {
            developer: string;
            repo: string;
            transactions: string[];
            task?: string;
            userId?: string;
            args?: string;
            metadata?: string;
        };
    }): Promise<string>;
    /**
     * forces the worker to restart
     */
    forceWorkerRestart(): Promise<void>;
}
/**
 * LocalStorage is a local storage for the local cloud.
 * It stores jobs, tasks, transactions, and data.
 * It can be used to test the cloud functionality without deploying to the cloud.
 */
export declare class LocalStorage {
    /** The jobs */
    static jobs: {
        [key: string]: JobData;
    };
    /** The job events */
    static jobEvents: {
        [key: string]: JobEvent;
    };
    /** The data */
    static data: {
        [key: string]: string;
    };
    /** The files */
    static files: {
        [key: string]: Buffer;
    };
    /** The transactions */
    static transactions: {
        [key: string]: CloudTransaction;
    };
    /** The tasks */
    static tasks: {
        [key: string]: TaskData;
    };
    /**
     * Saves the data.
     * @param name The name to save the data under.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static saveData(name: string): Promise<void>;
    /**
     * Loads the data.
     * @param name The name to load the data from.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static loadData(name: string): Promise<void>;
}

```

Contents of dist/lib/web/src/mina/verification/verification.js.map:
```
{"version":3,"file":"verification.js","sourceRoot":"","sources":["../../../../../../src/mina/verification/verification.ts"],"names":[],"mappings":""}
```

Contents of dist/lib/web/src/mina/verification/index.js:
```
export * from "./verification";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/mina/verification/verification.js:
```
export {};
//# sourceMappingURL=verification.js.map
```

Contents of dist/lib/web/src/mina/verification/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/mina/verification/index.ts"],"names":[],"mappings":"AAAA,cAAc,gBAAgB,CAAC"}
```

Contents of dist/lib/web/src/mina/verification/verification.d.ts:
```
import { blockchain } from "../../cloud/networks";
import { SmartContract } from "o1js";
/**
 * VerificationData is a data structure that contains all the information needed to verify a smart contract on a blockchain.
 * contract: The smart contract that needs to be verified.
 * contractDependencies: The smart contracts that need to be compiled before verification.
 * programDependencies: The zk programs that need to be compiled before verification.
 * address: The address of the smart contract on the blockchain.
 * chain: The blockchain on which the smart contract is deployed.
 * image: The logo of the smart contract (public url)
 *
 * Contract, contractDependencies, and programDependencies should be exported from the repo
 */
export interface VerificationData {
    contract: typeof SmartContract;
    contractDependencies?: (typeof SmartContract)[];
    programDependencies?: any[];
    address: string;
    chain: blockchain;
    image?: string;
}

```

Contents of dist/lib/web/src/mina/verification/index.d.ts:
```
export * from "./verification";

```

Contents of dist/lib/web/src/mina/api/api.d.ts:
```
import { zkCloudWorker, Cloud } from "../../cloud/worker";
import { blockchain } from "../../cloud/networks";
/**
 * The APICommand type for interacting with the zkCloudWorker
 * @typedef { "recursiveProof" | "execute" | "sendTransactions" | "jobResult" | "deploy" | "getBalance" | "queryBilling" } ApiCommand
 * @property recursiveProof The command for the recursiveProof calculation
 * @property execute The command for the execute function call (sync or async)
 * @property sendTransactions The command for sending transactions to the cloud
 * @property jobResult The command for getting the result of the job
 * @property deploy The command for deploying the code to the cloud, it is recommended use CLI tools for deployment
 * @property getBalance The command for getting the balance of the user's account with zkCloudWorker
 * @property queryBilling The command for getting the billing report of the user's account with zkCloudWorker
 */
export type ApiCommand = "recursiveProof" | "execute" | "sendTransactions" | "jobResult" | "deploy" | "getBalance" | "queryBilling";
/**
 * API class for interacting with the zkCloudWorker
 * @property jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
 * @property endpoint The endpoint of the serverless api
 * @property chain The blockchain network to use
 * @property webhook The webhook for the serverless api to get the results
 * @property localWorker The local worker for the serverless api to test the code locally
 */
export declare class zkCloudWorkerClient {
    readonly jwt: string;
    readonly endpoint?: string;
    readonly chain: blockchain;
    readonly webhook?: string;
    readonly localWorker?: (cloud: Cloud) => Promise<zkCloudWorker>;
    /**
     * Constructor for the API class
     * @param params the parameters for the API class
     * @param params.jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
     * @param params.zkcloudworker The local worker for the serverless api to test the code locally
     * @param params.chain The blockchain network to use
     * @param params.webhook The webhook for the serverless api to get the results
     */
    constructor(params: {
        jwt: string;
        zkcloudworker?: (cloud: Cloud) => Promise<zkCloudWorker>;
        chain?: blockchain;
        webhook?: string;
    });
    /**
     * Starts a new job for the proof calculation using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job, should be serialized JSON or string
     * @param data.metadata the metadata of the job, should be serialized JSON or string
     * @param data.webhook the webhook for the job
     * @returns { success: boolean, error?: string, jobId?: string }
     * where jonId is the jobId of the job
     *
     * The developers repo should provide a zkcloudworker function
     * that can be called with the given parameters, see the examples
     */
    recursiveProof(data: {
        developer: string;
        repo: string;
        transactions: string[];
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
        webhook?: string;
    }): Promise<{
        success: boolean;
        error?: string;
        jobId?: string;
    }>;
    /**
     * Starts a new job for the function call using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job
     * @param data.metadata the metadata of the job
     * @param data.mode the mode of the job execution: "sync" will not create a job, it will execute the function synchronously within 30 seconds and with the memory limit of 256 MB
     * @returns { success: boolean, error?: string, jobId?: string, result?: any }
     * where jonId is the jobId of the job (for async calls), result is the result of the job (for sync calls)
     */
    execute(data: {
        developer: string;
        repo: string;
        transactions: string[];
        task: string;
        userId?: string;
        args?: string;
        metadata?: string;
        mode?: string;
    }): Promise<{
        success: boolean;
        error?: string;
        jobId?: string;
        result?: any;
    }>;
    /**
     * Sends transactions to the blockchain using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @returns { success: boolean, error?: string, txId?: string[] }
     * where txId is the transaction id of the transaction, in the sequence of the input transactions
     */
    sendTransactions(data: {
        developer: string;
        repo: string;
        transactions: string[];
    }): Promise<{
        success: boolean;
        error?: string;
        txId?: string[];
    }>;
    /**
     * Gets the result of the job using serverless api call
     * @param data the data for the jobResult call
     * @param data.jobId the jobId of the job
     * @param data.includeLogs include logs in the result, default is false
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     * if the job is not finished yet, the result will be undefined
     * if the job failed, the result will be undefined and error will be set
     * if the job is finished, the result will be set and error will be undefined
     * if the job is not found, the result will be undefined and error will be set
     */
    jobResult(data: {
        jobId: string;
        includeLogs?: boolean;
    }): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Deploys the code to the cloud using serverless api call
     * @param data the data for the deploy call
     * @param data.repo the repo to use
     * @param data.developer the developer
     * @param data.packageManager the package manager to use
     * @returns { success: boolean, error?: string, jobId?: string}
     * where jobId is the jobId of the job
     */
    deploy(data: {
        repo: string;
        developer: string;
        packageManager: string;
    }): Promise<{
        success: boolean;
        error?: string;
        jobId?: string;
    }>;
    /**
     * Gets the billing report for the jobs sent using JWT
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the billing report
     */
    queryBilling(): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Gets the remaining balance
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the balance
     */
    getBalance(): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Waits for the job to finish
     * @param data the data for the waitForJobResult call
     * @param data.jobId the jobId of the job
     * @param data.maxAttempts the maximum number of attempts, default is 360 (2 hours)
     * @param data.interval the interval between attempts, default is 20000 (20 seconds)
     * @param data.maxErrors the maximum number of network errors, default is 10
     * @param data.printLogs print logs, default is true
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     */
    waitForJobResult(data: {
        jobId: string;
        maxAttempts?: number;
        interval?: number;
        maxErrors?: number;
        printLogs?: boolean;
    }): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Calls the serverless API
     * @param command the command of the API
     * @param data the data of the API
     * */
    private apiHub;
    private isError;
}

```

Contents of dist/lib/web/src/mina/api/api.js.map:
```
{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../../src/mina/api/api.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/mina/api/api.js:
```
import axios from "axios";
import chalk from "chalk";
import { sleep } from "../../cloud/utils";
import { LocalCloud, LocalStorage } from "../local/local";
import config from "../../cloud/config";
const { ZKCLOUDWORKER_AUTH, ZKCLOUDWORKER_API } = config;
/**
 * API class for interacting with the zkCloudWorker
 * @property jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
 * @property endpoint The endpoint of the serverless api
 * @property chain The blockchain network to use
 * @property webhook The webhook for the serverless api to get the results
 * @property localWorker The local worker for the serverless api to test the code locally
 */
export class zkCloudWorkerClient {
    /**
     * Constructor for the API class
     * @param params the parameters for the API class
     * @param params.jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
     * @param params.zkcloudworker The local worker for the serverless api to test the code locally
     * @param params.chain The blockchain network to use
     * @param params.webhook The webhook for the serverless api to get the results
     */
    constructor(params) {
        const { jwt, zkcloudworker, webhook } = params;
        this.jwt = jwt;
        const chain = params.chain ?? "devnet";
        this.chain = chain;
        this.endpoint =
            chain === "devnet" || chain === "zeko"
                ? ZKCLOUDWORKER_API + chain
                : undefined;
        this.webhook = webhook;
        if (jwt === "local") {
            if (zkcloudworker === undefined)
                throw new Error("worker is required for local mode");
            this.localWorker = zkcloudworker;
        }
    }
    /**
     * Starts a new job for the proof calculation using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job, should be serialized JSON or string
     * @param data.metadata the metadata of the job, should be serialized JSON or string
     * @param data.webhook the webhook for the job
     * @returns { success: boolean, error?: string, jobId?: string }
     * where jonId is the jobId of the job
     *
     * The developers repo should provide a zkcloudworker function
     * that can be called with the given parameters, see the examples
     */
    async recursiveProof(data) {
        const result = await this.apiHub("recursiveProof", data);
        if (result.data === "error" ||
            (typeof result.data === "string" && result.data.startsWith("error")))
            return {
                success: false,
                error: result.error,
            };
        else if (result.success === false || result.data?.success === false)
            return {
                success: false,
                error: result.error ?? result.data?.error ?? "recursiveProof call failed",
            };
        else if (result.success === true &&
            result.data?.success === true &&
            result.data?.jobId !== undefined)
            return {
                success: result.success,
                jobId: result.data.jobId,
                error: result.error,
            };
        else
            return {
                success: false,
                error: "recursiveProof call error",
            };
    }
    /**
     * Starts a new job for the function call using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job
     * @param data.metadata the metadata of the job
     * @param data.mode the mode of the job execution: "sync" will not create a job, it will execute the function synchronously within 30 seconds and with the memory limit of 256 MB
     * @returns { success: boolean, error?: string, jobId?: string, result?: any }
     * where jonId is the jobId of the job (for async calls), result is the result of the job (for sync calls)
     */
    async execute(data) {
        const result = await this.apiHub("execute", data);
        if (result.data === "error" ||
            (typeof result.data === "string" && result.data.startsWith("error")))
            return {
                success: false,
                error: result.error,
            };
        else if (result.success === false || result.data?.success === false)
            return {
                success: false,
                error: result.error ?? result.data?.error ?? "execute call failed",
            };
        else if (result.success === true &&
            data.mode === "sync" &&
            result.data !== undefined)
            return {
                success: result.success,
                jobId: undefined,
                result: result.data,
                error: result.error,
            };
        else if (result.success === true &&
            data.mode !== "sync" &&
            result.data?.success === true &&
            result.data?.jobId !== undefined)
            return {
                success: result.success,
                jobId: result.data.jobId,
                result: undefined,
                error: result.error,
            };
        else
            return {
                success: false,
                error: "execute call error",
            };
    }
    /**
     * Sends transactions to the blockchain using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @returns { success: boolean, error?: string, txId?: string[] }
     * where txId is the transaction id of the transaction, in the sequence of the input transactions
     */
    async sendTransactions(data) {
        const result = await this.apiHub("sendTransactions", data);
        if (result.data === "error")
            // TODO: check if this is correct in AWS code
            return {
                success: false,
                error: result.error,
            };
        else
            return {
                success: result.success,
                txId: result.data,
                error: result.error,
            };
    }
    /**
     * Gets the result of the job using serverless api call
     * @param data the data for the jobResult call
     * @param data.jobId the jobId of the job
     * @param data.includeLogs include logs in the result, default is false
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     * if the job is not finished yet, the result will be undefined
     * if the job failed, the result will be undefined and error will be set
     * if the job is finished, the result will be set and error will be undefined
     * if the job is not found, the result will be undefined and error will be set
     */
    async jobResult(data) {
        const result = await this.apiHub("jobResult", data);
        if (this.isError(result.data))
            return {
                success: false,
                error: result.error,
                result: result.data,
            };
        else
            return {
                success: result.success,
                error: result.error,
                result: result.data,
            };
    }
    /**
     * Deploys the code to the cloud using serverless api call
     * @param data the data for the deploy call
     * @param data.repo the repo to use
     * @param data.developer the developer
     * @param data.packageManager the package manager to use
     * @returns { success: boolean, error?: string, jobId?: string}
     * where jobId is the jobId of the job
     */
    async deploy(data) {
        // TODO: encrypt env.json
        const { repo, developer, packageManager } = data;
        const result = await this.apiHub("deploy", {
            developer,
            repo,
            args: packageManager,
        });
        if (result.data === "error" ||
            (typeof result.data === "string" && result.data.startsWith("error")))
            return {
                success: false,
                error: result.error,
            };
        else
            return {
                success: result.success && result.data?.success,
                jobId: result.data?.jobId,
                error: result.error,
            };
    }
    /**
     * Gets the billing report for the jobs sent using JWT
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the billing report
     */
    async queryBilling() {
        const result = await this.apiHub("queryBilling", {});
        if (this.isError(result.data))
            return {
                success: false,
                error: result.error,
                result: result.data,
            };
        else
            return {
                success: result.success,
                error: result.error,
                result: result.data,
            };
    }
    /**
     * Gets the remaining balance
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the balance
     */
    async getBalance() {
        const result = await this.apiHub("getBalance", {});
        if (this.isError(result.data))
            return {
                success: false,
                error: result.error,
                result: result.data,
            };
        else
            return {
                success: result.success,
                error: result.error,
                result: result.data,
            };
    }
    /**
     * Waits for the job to finish
     * @param data the data for the waitForJobResult call
     * @param data.jobId the jobId of the job
     * @param data.maxAttempts the maximum number of attempts, default is 360 (2 hours)
     * @param data.interval the interval between attempts, default is 20000 (20 seconds)
     * @param data.maxErrors the maximum number of network errors, default is 10
     * @param data.printLogs print logs, default is true
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     */
    async waitForJobResult(data) {
        if (this.jwt === "local")
            return this.jobResult({ jobId: data.jobId });
        const maxAttempts = data?.maxAttempts ?? 360; // 1 hour
        const interval = data?.interval ?? 10000;
        const maxErrors = data?.maxErrors ?? 10;
        const errorDelay = 30000; // 30 seconds
        const printedLogs = [];
        const printLogs = data.printLogs ?? true;
        function print(logs) {
            logs.forEach((log) => {
                if (printedLogs.includes(log) === false) {
                    printedLogs.push(log);
                    if (printLogs) {
                        // replace all occurrences of "error" with red color
                        const text = log.replace(/error/gi, (matched) => chalk.red(matched));
                        console.log(text);
                    }
                }
            });
        }
        let attempts = 0;
        let errors = 0;
        while (attempts < maxAttempts) {
            const result = await this.apiHub("jobResult", {
                jobId: data.jobId,
                includeLogs: printLogs,
            });
            const isAllLogsFetched = result?.data?.isFullLog === true || printLogs === false;
            if (printLogs === true &&
                result?.data?.logs !== undefined &&
                result?.data?.logs !== null &&
                Array.isArray(result.data.logs) === true)
                print(result.data.logs);
            if (result.success === false) {
                errors++;
                if (errors > maxErrors) {
                    return {
                        success: false,
                        error: "Too many network errors",
                        result: undefined,
                    };
                }
                await sleep(errorDelay * errors);
            }
            else {
                if (this.isError(result.data) && isAllLogsFetched)
                    return {
                        success: false,
                        error: result.error,
                        result: result.data,
                    };
                else if (result.data?.result !== undefined && isAllLogsFetched) {
                    return {
                        success: result.success,
                        error: result.error,
                        result: result.data,
                    };
                }
                else if (result.data?.jobStatus === "failed" && isAllLogsFetched) {
                    return {
                        success: false,
                        error: "Job failed",
                        result: result.data,
                    };
                }
                await sleep(interval);
            }
            attempts++;
        }
        return {
            success: false,
            error: "Timeout",
            result: undefined,
        };
    }
    /**
     * Calls the serverless API
     * @param command the command of the API
     * @param data the data of the API
     * */
    async apiHub(command, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    data
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ) {
        if (this.jwt === "local") {
            if (this.localWorker === undefined)
                throw new Error("localWorker is undefined");
            switch (command) {
                case "recursiveProof": {
                    const jobId = await LocalCloud.run({
                        command: "recursiveProof",
                        data,
                        chain: this.chain,
                        localWorker: this.localWorker,
                    });
                    return {
                        success: true,
                        data: { success: true, jobId },
                    };
                }
                case "execute": {
                    const jobId = await LocalCloud.run({
                        command: "execute",
                        data,
                        chain: this.chain,
                        localWorker: this.localWorker,
                    });
                    if (data.mode === "sync")
                        return {
                            success: true,
                            data: LocalStorage.jobEvents[jobId].result,
                        };
                    else
                        return {
                            success: true,
                            data: { success: true, jobId },
                        };
                }
                case "jobResult": {
                    const job = LocalStorage.jobs[data.jobId];
                    if (job === undefined) {
                        return {
                            success: false,
                            error: "local job not found",
                        };
                    }
                    else {
                        return {
                            success: true,
                            data: job,
                        };
                    }
                }
                case "sendTransactions": {
                    return {
                        success: true,
                        data: await LocalCloud.addTransactions(data.transactions),
                    };
                }
                case "deploy":
                    return {
                        success: true,
                        data: "local_deploy",
                    };
                case "queryBilling":
                    return {
                        success: true,
                        data: "local_queryBilling",
                    };
                default:
                    return {
                        success: false,
                        error: "local_error",
                    };
            }
        }
        else {
            if (this.endpoint === undefined)
                throw new Error("zkCloudWorker supports only devnet and zeko chains in the cloud.");
            const apiData = {
                auth: ZKCLOUDWORKER_AUTH,
                command: command,
                jwtToken: this.jwt,
                data: data,
                chain: this.chain,
                webhook: this.webhook, // TODO: implement webhook code on AWS
            };
            try {
                const response = await axios.post(this.endpoint, apiData);
                return { success: true, data: response.data };
            }
            catch (error) {
                console.error("apiHub error:", error.message ?? error);
                return { success: false, error: error };
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isError(data) {
        if (data === "error")
            return true;
        if (data?.jobStatus === "failed")
            return true;
        if (typeof data === "string" && data.toLowerCase().startsWith("error"))
            return true;
        if (data !== undefined && data.error !== undefined)
            return true;
        return false;
    }
}
//# sourceMappingURL=api.js.map
```

Contents of dist/lib/web/src/cloud/config.d.ts:
```
declare const config: {
    MINAFEE: string;
    ZKCLOUDWORKER_AUTH: string;
    ZKCLOUDWORKER_API: string;
    ZKCLOUDWORKER_NATS: string;
    ZKCLOUDWORKER_NATS_WS: string;
};
export default config;

```

Contents of dist/lib/web/src/cloud/networks.d.ts:
```
export { blockchain, MinaNetwork, networks, Mainnet, Devnet, Zeko, Lightnet, Local, };
/**
 * blockchain is the type for the chain ID.
 */
type blockchain = "local" | "devnet" | "lightnet" | "mainnet" | "zeko";
/**
 * MinaNetwork is the data structure for a Mina network, keeping track of the Mina and archive endpoints, chain ID, name, account manager, explorer account URL, explorer transaction URL, and faucet.
 */
interface MinaNetwork {
    /** The Mina endpoints */
    mina: string[];
    /** The archive endpoints */
    archive: string[];
    /** The chain ID */
    chainId: blockchain;
    /** The name of the network (optional) */
    name?: string;
    /** The account manager for Lightnet (optional) */
    accountManager?: string;
    /** The explorer account URL (optional) */
    explorerAccountUrl?: string;
    /** The explorer transaction URL (optional) */
    explorerTransactionUrl?: string;
    /** The faucet URL (optional) */
    faucet?: string;
}
declare const Mainnet: MinaNetwork;
declare const Local: MinaNetwork;
declare const Devnet: MinaNetwork;
declare const Zeko: MinaNetwork;
declare const Lightnet: MinaNetwork;
declare const networks: MinaNetwork[];

```

Contents of dist/lib/web/src/cloud/index.js:
```
export * from "./utils";
export * from "./worker";
export * from "./config";
export * from "./networks";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/cloud/config.js:
```
const config = {
    MINAFEE: "200000000",
    ZKCLOUDWORKER_AUTH: "M6t4jtbBAFFXhLERHQWyEB9JA9xi4cWqmYduaCXtbrFjb7yaY7TyaXDunKDJNiUTBEcyUomNXJgC",
    ZKCLOUDWORKER_API: "https://api.zkcloudworker.com/v1/",
    ZKCLOUDWORKER_NATS: "https://cloud.zkcloudworker.com:4222",
    ZKCLOUDWORKER_NATS_WS: "wss://cloud.zkcloudworker.com:4223",
};
export default config;
//# sourceMappingURL=config.js.map
```

Contents of dist/lib/web/src/cloud/config.js.map:
```
{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../src/cloud/config.ts"],"names":[],"mappings":"AAAA,MAAM,MAAM,GAAG;IACb,OAAO,EAAE,WAAW;IACpB,kBAAkB,EAChB,8EAA8E;IAChF,iBAAiB,EAAE,mCAAmC;IACtD,kBAAkB,EAAE,sCAAsC;IAC1D,qBAAqB,EAAE,oCAAoC;CAC5D,CAAC;AAEF,eAAe,MAAM,CAAC"}
```

Contents of dist/lib/web/src/cloud/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/cloud/index.ts"],"names":[],"mappings":"AAAA,cAAc,SAAS,CAAC;AACxB,cAAc,UAAU,CAAC;AACzB,cAAc,UAAU,CAAC;AACzB,cAAc,YAAY,CAAC"}
```

Contents of dist/lib/web/src/cloud/networks.js.map:
```
{"version":3,"file":"networks.js","sourceRoot":"","sources":["../../../../../src/cloud/networks.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,QAAQ,EACR,OAAO,EACP,MAAM,EACN,IAAI,EACJ,QAAQ,EACR,KAAK,GACN,CAAC;AAoCF,MAAM,OAAO,GAAgB;IAC3B,IAAI,EAAE;QACJ,kDAAkD;QAClD,iDAAiD;KAClD;IACD,OAAO,EAAE;QACP,oDAAoD;QACpD,4CAA4C;KAC7C;IACD,kBAAkB,EAAE,sCAAsC;IAC1D,sBAAsB,EAAE,iCAAiC;IACzD,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE,SAAS;CAChB,CAAC;AAEF,MAAM,KAAK,GAAgB;IACzB,IAAI,EAAE,EAAE;IACR,OAAO,EAAE,EAAE;IACX,OAAO,EAAE,OAAO;CACjB,CAAC;AAEF,MAAM,MAAM,GAAgB;IAC1B,IAAI,EAAE;QACJ,gDAAgD;QAChD,kDAAkD;KACnD;IACD,OAAO,EAAE;QACP,mDAAmD;QACnD,4CAA4C;KAC7C;IACD,kBAAkB,EAAE,qCAAqC;IACzD,sBAAsB,EAAE,gCAAgC;IACxD,OAAO,EAAE,QAAQ;IACjB,IAAI,EAAE,QAAQ;IACd,MAAM,EAAE,iCAAiC;CAC1C,CAAC;AAEF,MAAM,IAAI,GAAgB;IACxB,IAAI,EAAE,CAAC,gCAAgC,CAAC;IACxC,OAAO,EAAE,EAAE;IACX,kBAAkB,EAAE,qCAAqC;IACzD,sBAAsB,EAAE,gCAAgC;IACxD,OAAO,EAAE,MAAM;IACf,IAAI,EAAE,MAAM;IACZ,MAAM,EAAE,wBAAwB;CACjC,CAAC;AAEF,MAAM,QAAQ,GAAgB;IAC5B,IAAI,EAAE,CAAC,+BAA+B,CAAC;IACvC,OAAO,EAAE,CAAC,uBAAuB,CAAC;IAClC,cAAc,EAAE,uBAAuB;IACvC,OAAO,EAAE,UAAU;IACnB,IAAI,EAAE,UAAU;CACjB,CAAC;AAEF,MAAM,QAAQ,GAAkB,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;AAEzE;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BE"}
```

Contents of dist/lib/web/src/cloud/networks.js:
```
export { networks, Mainnet, Devnet, Zeko, Lightnet, Local, };
const Mainnet = {
    mina: [
        //"https://proxy.devnet.minaexplorer.com/graphql",
        "https://api.minascan.io/node/mainnet/v1/graphql",
    ],
    archive: [
        "https://api.minascan.io/archive/mainnet/v1/graphql",
        //"https://archive.devnet.minaexplorer.com",
    ],
    explorerAccountUrl: "https://minascan.io/mainnet/account/",
    explorerTransactionUrl: "https://minascan.io/mainnet/tx/",
    chainId: "mainnet",
    name: "Mainnet",
};
const Local = {
    mina: [],
    archive: [],
    chainId: "local",
};
const Devnet = {
    mina: [
        "https://api.minascan.io/node/devnet/v1/graphql",
        //"https://proxy.devnet.minaexplorer.com/graphql",
    ],
    archive: [
        "https://api.minascan.io/archive/devnet/v1/graphql",
        //"https://archive.devnet.minaexplorer.com",
    ],
    explorerAccountUrl: "https://minascan.io/devnet/account/",
    explorerTransactionUrl: "https://minascan.io/devnet/tx/",
    chainId: "devnet",
    name: "Devnet",
    faucet: "https://faucet.minaprotocol.com",
};
const Zeko = {
    mina: ["https://devnet.zeko.io/graphql"],
    archive: [],
    explorerAccountUrl: "https://zekoscan.io/devnet/account/",
    explorerTransactionUrl: "https://zekoscan.io/devnet/tx/",
    chainId: "zeko",
    name: "Zeko",
    faucet: "https://zeko.io/faucet",
};
const Lightnet = {
    mina: ["http://localhost:8080/graphql"],
    archive: ["http://localhost:8282"],
    accountManager: "http://localhost:8181",
    chainId: "lightnet",
    name: "Lightnet",
};
const networks = [Mainnet, Local, Devnet, Zeko, Lightnet];
/*
// not supported by o1js v1

const Berkeley: MinaNetwork = {
  mina: [
    "https://api.minascan.io/node/berkeley/v1/graphql",
    "https://proxy.berkeley.minaexplorer.com/graphql",
  ],
  archive: [
    "https://api.minascan.io/archive/berkeley/v1/graphql",
    "https://archive.berkeley.minaexplorer.com",
  ],
  explorerAccountUrl: "https://minascan.io/berkeley/account/",
  explorerTransactionUrl: "https://minascan.io/berkeley/tx/",
  chainId: "berkeley",
  name: "Berkeley",
};

const TestWorld2: MinaNetwork = {
  mina: ["https://api.minascan.io/node/testworld/v1/graphql"],
  archive: ["https://archive.testworld.minaexplorer.com"],
  explorerAccountUrl: "https://minascan.io/testworld/account/",
  explorerTransactionUrl: "https://minascan.io/testworld/tx/",
  chainId: "testworld2",
  name: "TestWorld2",
};

*/
//# sourceMappingURL=networks.js.map
```

Contents of dist/lib/web/src/cloud/index.d.ts:
```
export * from "./utils";
export * from "./worker";
export * from "./config";
export * from "./networks";

```

Contents of dist/lib/web/src/cloud/utils/graphql.js:
```
export const defaultToken = "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf";
export async function getBalanceFromGraphQL(params) {
    const { publicKey, mina } = params;
    const tokenId = params.tokenId ?? defaultToken;
    if (mina.length === 0)
        throw new Error("no mina endpoints provided");
    const account = await fetchAccountInternal({
        publicKey,
        tokenId,
        mina,
        queryType: "balance",
    });
    //console.log("getBalanceFromGraphQL account:", account);
    const balance = account?.account?.balance?.total;
    return balance ? BigInt(balance) : 0n;
}
export async function getAccountFromGraphQL(params) {
    const { publicKey, mina } = params;
    const tokenId = params.tokenId ?? defaultToken;
    if (mina.length === 0)
        throw new Error("no mina endpoints provided");
    const account = await fetchAccountInternal({
        publicKey,
        tokenId,
        mina,
        queryType: "account",
    });
    return account?.account;
}
async function fetchAccountInternal(params) {
    const { publicKey, tokenId, mina, timeout, queryType } = params;
    const query = queryType === "balance"
        ? balanceQuery(publicKey, tokenId)
        : accountQuery(publicKey, tokenId);
    let [response, error] = await makeGraphqlRequest({
        query,
        mina,
        timeout,
    });
    if (error !== undefined)
        return { account: undefined, error };
    const account = response?.data?.account;
    if (!account) {
        return {
            account: undefined,
            error: {
                statusCode: 404,
                statusText: `fetchAccount: Account with public key ${publicKey} does not exist.`,
            },
        };
    }
    return {
        account,
        error: undefined,
    };
}
async function makeGraphqlRequest(params) {
    const defaultTimeout = 5 * 60 * 1000; // 5 minutes
    const timeout = params.timeout ?? defaultTimeout;
    const { query, mina } = params;
    const graphqlEndpoint = mina[0];
    const fallbackEndpoints = mina.slice(1);
    if (graphqlEndpoint === "none")
        throw Error("Should have made a graphql request, but don't know to which endpoint.");
    let timeouts = [];
    const clearTimeouts = () => {
        timeouts.forEach((t) => clearTimeout(t));
        timeouts = [];
    };
    const makeRequest = async (url) => {
        const controller = new AbortController();
        const timer = setTimeout(() => controller.abort(), timeout);
        timeouts.push(timer);
        let body = JSON.stringify({
            operationName: null,
            query,
            variables: {},
        });
        try {
            let response = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body,
                signal: controller.signal,
            });
            return checkResponseStatus(response);
        }
        finally {
            clearTimeouts();
        }
    };
    // try to fetch from endpoints in pairs
    let timeoutErrors = [];
    let urls = [graphqlEndpoint, ...fallbackEndpoints];
    for (let i = 0; i < urls.length; i += 2) {
        let url1 = urls[i];
        let url2 = urls[i + 1];
        if (url2 === undefined) {
            try {
                return await makeRequest(url1);
            }
            catch (error) {
                return [undefined, inferError(error)];
            }
        }
        try {
            return await Promise.race([makeRequest(url1), makeRequest(url2)]);
        }
        catch (unknownError) {
            let error = inferError(unknownError);
            if (error.statusCode === 408) {
                // If the request timed out, try the next 2 endpoints
                timeoutErrors.push({ url1, url2, error });
            }
            else {
                // If the request failed for some other reason (e.g. o1js error), return the error
                return [undefined, error];
            }
        }
    }
    const statusText = timeoutErrors
        .map(({ url1, url2, error }) => `Request to ${url1} and ${url2} timed out. Error: ${error}`)
        .join("\n");
    return [undefined, { statusCode: 408, statusText }];
}
function inferError(error) {
    let errorMessage = JSON.stringify(error);
    if (error instanceof AbortSignal) {
        return { statusCode: 408, statusText: `Request Timeout: ${errorMessage}` };
    }
    else {
        return {
            statusCode: 500,
            statusText: `Unknown Error: ${errorMessage}`,
        };
    }
}
async function checkResponseStatus(response) {
    if (response.ok) {
        const jsonResponse = (await response.json());
        if (jsonResponse.errors && jsonResponse.errors.length > 0) {
            return [
                undefined,
                {
                    statusCode: response.status,
                    statusText: jsonResponse.errors
                        .map((error) => error.message)
                        .join("\n"),
                },
            ];
        }
        else if (jsonResponse.data === undefined) {
            return [
                undefined,
                {
                    statusCode: response.status,
                    statusText: `GraphQL response data is undefined`,
                },
            ];
        }
        return [jsonResponse, undefined];
    }
    else {
        return [
            undefined,
            {
                statusCode: response.status,
                statusText: response.statusText,
            },
        ];
    }
}
const balanceQuery = (publicKey, tokenId) => `{
  account(publicKey: "${publicKey}", token: "${tokenId}") {
    balance { total }
  }
}
`;
const accountQuery = (publicKey, tokenId) => `{
  account(publicKey: "${publicKey}", token: "${tokenId}") {
    publicKey
    token
    nonce
    balance { total }
    tokenSymbol
    receiptChainHash
    timing {
      initialMinimumBalance
      cliffTime
      cliffAmount
      vestingPeriod
      vestingIncrement
    }
    permissions {
      editState
      access
      send
      receive
      setDelegate
      setPermissions
      setVerificationKey {
        auth
        txnVersion
      }
      setZkappUri
      editActionState
      setTokenSymbol
      incrementNonce
      setVotingFor
      setTiming
    }
    delegateAccount { publicKey }
    votingFor
    zkappState
    verificationKey {
      verificationKey
      hash
    }
    actionState
    provedState
    zkappUri
  }
}
`;
//# sourceMappingURL=graphql.js.map
```

Contents of dist/lib/web/src/cloud/utils/base64.js.map:
```
{"version":3,"file":"base64.js","sourceRoot":"","sources":["../../../../../../src/cloud/utils/base64.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/cloud/utils/graphql.js.map:
```
{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../../../../../../src/cloud/utils/graphql.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/cloud/utils/index.js:
```
export * from "./graphql";
export * from "./utils";
export * from "./base64";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/cloud/utils/base64.js:
```
// URL friendly base64 encoding
const TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
export function bigintToBase56(value) {
    const digits = toBase(value, 56n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
export function bigintFromBase56(str) {
    const base56Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = fromBase(base56Digits, 56n);
    return x;
}
export function bigintToBase64(value) {
    const digits = toBase(value, 64n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
export function bigintFromBase64(str) {
    const base64Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = fromBase(base64Digits, 64n);
    return x;
}
export function fromBase(digits, base) {
    if (base <= 0n)
        throw Error("fromBase: base must be positive");
    // compute powers base, base^2, base^4, ..., base^(2^k)
    // with largest k s.t. n = 2^k < digits.length
    let basePowers = [];
    for (let power = base, n = 1; n < digits.length; power **= 2n, n *= 2) {
        basePowers.push(power);
    }
    let k = basePowers.length;
    // pad digits array with zeros s.t. digits.length === 2^k
    digits = digits.concat(Array(2 ** k - digits.length).fill(0n));
    // accumulate [x0, x1, x2, x3, ...] -> [x0 + base*x1, x2 + base*x3, ...] -> [x0 + base*x1 + base^2*(x2 + base*x3), ...] -> ...
    // until we end up with a single element
    for (let i = 0; i < k; i++) {
        let newDigits = Array(digits.length >> 1);
        let basePower = basePowers[i];
        for (let j = 0; j < newDigits.length; j++) {
            newDigits[j] = digits[2 * j] + basePower * digits[2 * j + 1];
        }
        digits = newDigits;
    }
    console.assert(digits.length === 1);
    let [digit] = digits;
    return digit;
}
export function toBase(x, base) {
    if (base <= 0n)
        throw Error("toBase: base must be positive");
    // compute powers base, base^2, base^4, ..., base^(2^k)
    // with largest k s.t. base^(2^k) < x
    let basePowers = [];
    for (let power = base; power <= x; power **= 2n) {
        basePowers.push(power);
    }
    let digits = [x]; // single digit w.r.t base^(2^(k+1))
    // successively split digits w.r.t. base^(2^j) into digits w.r.t. base^(2^(j-1))
    // until we arrive at digits w.r.t. base
    let k = basePowers.length;
    for (let i = 0; i < k; i++) {
        let newDigits = Array(2 * digits.length);
        let basePower = basePowers[k - 1 - i];
        for (let j = 0; j < digits.length; j++) {
            let x = digits[j];
            let high = x / basePower;
            newDigits[2 * j + 1] = high;
            newDigits[2 * j] = x - high * basePower;
        }
        digits = newDigits;
    }
    // pop "leading" zero digits
    while (digits[digits.length - 1] === 0n) {
        digits.pop();
    }
    return digits;
}
//# sourceMappingURL=base64.js.map
```

Contents of dist/lib/web/src/cloud/utils/utils.d.ts:
```
export declare function sleep(ms: number): Promise<unknown>;
export declare function makeString(length: number): string;
export declare function formatTime(ms: number): string;
export declare class Memory {
    static rss: number;
    constructor();
    static info(description?: string, fullInfo?: boolean): void;
}

```

Contents of dist/lib/web/src/cloud/utils/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/cloud/utils/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,SAAS,CAAC;AACxB,cAAc,UAAU,CAAC"}
```

Contents of dist/lib/web/src/cloud/utils/utils.js:
```
export function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
export function makeString(length) {
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    let outString = ``;
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    const inOptions = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`;
    for (let i = 0; i < length; i++) {
        outString += inOptions.charAt(Math.floor(Math.random() * inOptions.length));
    }
    return outString;
}
export function formatTime(ms) {
    if (ms === undefined)
        return "";
    if (ms < 1000)
        return ms.toString() + " ms";
    if (ms < 60 * 1000)
        return parseInt((ms / 1000).toString()).toString() + " sec";
    if (ms < 60 * 60 * 1000) {
        const minutes = parseInt((ms / 1000 / 60).toString());
        const seconds = parseInt(((ms - minutes * 60 * 1000) / 1000).toString());
        return minutes.toString() + " min " + seconds.toString() + " sec";
    }
    else {
        const hours = parseInt((ms / 1000 / 60 / 60).toString());
        const minutes = parseInt(((ms - hours * 60 * 60 * 1000) / 1000 / 60).toString());
        return hours.toString() + " h " + minutes.toString() + " min";
    }
}
export class Memory {
    constructor() {
        Memory.rss = 0;
    }
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    static info(description = ``, fullInfo = false) {
        const memoryData = process.memoryUsage();
        const formatMemoryUsage = (data) => `${Math.round(data / 1024 / 1024)} MB`;
        const oldRSS = Memory.rss;
        Memory.rss = Math.round(memoryData.rss / 1024 / 1024);
        const memoryUsage = fullInfo
            ? {
                step: `${description}:`,
                rssDelta: `${(oldRSS === 0
                    ? 0
                    : Memory.rss - oldRSS).toString()} MB -> Resident Set Size memory change`,
                rss: `${formatMemoryUsage(memoryData.rss)} -> Resident Set Size - total memory allocated`,
                heapTotal: `${formatMemoryUsage(memoryData.heapTotal)} -> total size of the allocated heap`,
                heapUsed: `${formatMemoryUsage(memoryData.heapUsed)} -> actual memory used during the execution`,
                external: `${formatMemoryUsage(memoryData.external)} -> V8 external memory`,
            }
            : `RSS memory ${description}: ${formatMemoryUsage(memoryData.rss)}${oldRSS === 0
                ? ``
                : `, changed by ` + (Memory.rss - oldRSS).toString() + ` MB`}`;
        console.log(memoryUsage);
    }
}
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
Memory.rss = 0;
//# sourceMappingURL=utils.js.map
```

Contents of dist/lib/web/src/cloud/utils/utils.js.map:
```
{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../src/cloud/utils/utils.ts"],"names":[],"mappings":"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"}
```

Contents of dist/lib/web/src/cloud/utils/base64.d.ts:
```
export declare function bigintToBase56(value: bigint): string;
export declare function bigintFromBase56(str: string): bigint;
export declare function bigintToBase64(value: bigint): string;
export declare function bigintFromBase64(str: string): bigint;
export declare function fromBase(digits: bigint[], base: bigint): bigint;
export declare function toBase(x: bigint, base: bigint): bigint[];

```

Contents of dist/lib/web/src/cloud/utils/index.d.ts:
```
export * from "./graphql";
export * from "./utils";
export * from "./base64";

```

Contents of dist/lib/web/src/cloud/utils/graphql.d.ts:
```
export declare const defaultToken = "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf";
export declare function getBalanceFromGraphQL(params: {
    publicKey: string;
    tokenId?: string;
    mina: string[];
}): Promise<bigint>;
export declare function getAccountFromGraphQL(params: {
    publicKey: string;
    tokenId?: string;
    mina: string[];
}): Promise<any>;

```

Contents of dist/lib/web/src/cloud/worker/transaction.d.ts:
```
/**
 * Human-readable transaction metadata
 * events: the events
 * actions: the actions
 * custom: the custom metadata defined by the developer
 */
export interface TransactionMetadata {
    events?: object[];
    actions?: object[];
    custom?: object;
}

```

Contents of dist/lib/web/src/cloud/worker/transaction.js:
```
/**
 * Human-readable transaction metadata
 * events: the events
 * actions: the actions
 * custom: the custom metadata defined by the developer
 */
export {};
//# sourceMappingURL=transaction.js.map
```

Contents of dist/lib/web/src/cloud/worker/job.js:
```
export {};
//# sourceMappingURL=job.js.map
```

Contents of dist/lib/web/src/cloud/worker/worker.js.map:
```
{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../../../../../src/cloud/worker/worker.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,OAAgB,aAAa;IAIjC;;;OAGG;IACH,YAAY,KAAY;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,wEAAwE;IACxE;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,WAAmB;QAC9B,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,KAAK,CAAC,MAAc,EAAE,MAAc;QACxC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,+EAA+E;IAC/E;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,YAAsB;QAClC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CAAC,YAAgC,IAAkB,CAAC;IAE7E;;;OAGG;IACH,KAAK,CAAC,IAAI;QACR,OAAO,SAAS,CAAC;IACnB,CAAC;CACF"}
```

Contents of dist/lib/web/src/cloud/worker/job.js.map:
```
{"version":3,"file":"job.js","sourceRoot":"","sources":["../../../../../../src/cloud/worker/job.ts"],"names":[],"mappings":""}
```

Contents of dist/lib/web/src/cloud/worker/task.js.map:
```
{"version":3,"file":"task.js","sourceRoot":"","sources":["../../../../../../src/cloud/worker/task.ts"],"names":[],"mappings":""}
```

Contents of dist/lib/web/src/cloud/worker/task.d.ts:
```
import { blockchain } from "../networks";
/**
 * TaskData is the data structure for a task, keeping track of the task status, result, logs, and metadata.
 */
export interface TaskData {
    /** The ID of the user */
    id: string;
    /** The ID of the task */
    taskId: string;
    /** The time the task was started (optional) */
    startTime?: number;
    /** The time the task was created */
    timeCreated: number;
    /** The maximum number of attempts (default is 5) (optional) */
    maxAttempts?: number;
    /** The number of attempts */
    attempts: number;
    /** The developer of the repo executing the task */
    developer: string;
    /** The repo executing the task */
    repo: string;
    /** The task to execute */
    task: string;
    /** The ID of the user (optional) */
    userId?: string;
    /** The arguments for the task (optional) */
    args?: string;
    /** The metadata for the task (optional) */
    metadata?: string;
    /** The blockchain to execute the task on */
    chain: blockchain;
}

```

Contents of dist/lib/web/src/cloud/worker/task.js:
```
export {};
//# sourceMappingURL=task.js.map
```

Contents of dist/lib/web/src/cloud/worker/worker.js:
```
/**
 * Abstract class for the zkCloudWorker
 * Used to define the zkCloudWorker methods and properties
 * Should be implemented for by the developer for the zkCloudWorker in the cloud
 */
export class zkCloudWorker {
    /**
     * Constructor for the zkCloudWorker class
     * @param cloud the cloud instance provided by the zkCloudWorker in the local environment or in the cloud
     */
    constructor(cloud) {
        this.cloud = cloud;
    }
    // Those methods should be implemented for recursive proofs calculations
    /**
     * Creates a new proof from a transaction
     * @param transaction the transaction
     * @returns the serialized proof
     */
    async create(transaction) {
        return undefined;
    }
    /**
     * Merges two proofs
     * @param proof1 the first proof
     * @param proof2 the second proof
     * @returns the merged proof
     */
    async merge(proof1, proof2) {
        return undefined;
    }
    // Those methods should be implemented for anything except for recursive proofs
    /**
     * Executes the transactions
     * @param transactions the transactions, can be empty list
     * @returns the result
     */
    async execute(transactions) {
        return undefined;
    }
    /* Process the transactions received by the cloud
     * @param transactions: the transactions
     */
    async processTransactions(transactions) { }
    /**
     * process the task defined by the developer
     * @returns the result
     */
    async task() {
        return undefined;
    }
}
//# sourceMappingURL=worker.js.map
```

Contents of dist/lib/web/src/cloud/worker/cloud.d.ts:
```
import { blockchain } from "../networks";
import { JobData } from "./job";
import { TransactionMetadata } from "./transaction";
/**
 * Interface for the deployer key pair
 * Used to get the public and private keys of the deployer for test networks only.
 * Devnet and Zeko are supported.
 */
export interface DeployerKeyPair {
    /** The public key of the deployer */
    publicKey: string;
    /** The private key of the deployer */
    privateKey: string;
}
/**
 * Interface for the cloud transaction
 * Used to get the transaction id, the transaction, and the time received
 */
export interface CloudTransaction {
    /** The transaction id */
    txId: string;
    /** The transaction */
    transaction: string;
    /** The time received */
    timeReceived: number;
    /** The status of the transaction */
    status: string;
}
export declare abstract class Cloud {
    readonly id: string;
    readonly jobId: string;
    readonly stepId: string;
    readonly taskId: string;
    readonly cache: string;
    readonly developer: string;
    readonly repo: string;
    readonly task?: string;
    readonly userId?: string;
    readonly args?: string;
    readonly metadata?: string;
    readonly chain: blockchain;
    readonly isLocalCloud: boolean;
    /**
     * Constructor for the Cloud class
     * @param params the parameters for the Cloud class
     * @param params.id the id of the user
     * @param params.jobId the job id
     * @param params.stepId the step id
     * @param params.taskId the task id
     * @param params.cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
     * @param params.developer the developer id
     * @param params.repo the repo id
     * @param params.task the task id
     * @param params.userId the user id
     * @param params.args the arguments, should be a string or serialized JSON
     * @param params.metadata the metadata, should be a string or serialized JSON
     * @param params.chain the blockchain network
     * @param params.isLocalCloud a boolean to check if the cloud is local or not
     */
    constructor(params: {
        id: string;
        jobId: string;
        stepId: string;
        taskId: string;
        cache: string;
        developer: string;
        repo: string;
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
        isLocalCloud?: boolean;
        chain: blockchain;
    });
    /**
     * Abstract method to get the deployer key pair
     * Used to get the public and private keys of the deployer for test networks only
     * Devnet and Zeko are supported
     * @returns the deployer key pair
     */
    abstract getDeployer(): Promise<DeployerKeyPair | undefined>;
    /**
     * Abstract method to release the deployer
     * @param params the public key of the deployer and the transactions hashes
     * Used to release the deployer after the transactions are sent to the blockchain
     * @param params.publicKey the public key of the deployer
     * @param params.txsHashes the transactions hashes
     */
    abstract releaseDeployer(params: {
        publicKey: string;
        txsHashes: string[];
    }): Promise<void>;
    /**
     * Abstract method to get the data by key
     * Used to get the data by key from the cloud storage
     * @param key the key
     * @returns the value of the key
     */
    abstract getDataByKey(key: string): Promise<string | undefined>;
    /**
     * Abstract method to save the data by key
     * Used to save the data by key to the cloud storage
     * @param key the key
     * @param value the value
     */
    abstract saveDataByKey(key: string, value: string | undefined): Promise<void>;
    /**
     * Abstract method to save the file
     * Used to save the file to the cloud storage
     * @param filename the filename
     * @param value the value
     */
    abstract saveFile(filename: string, value: Buffer): Promise<void>;
    /**
     * Abstract method to load the file
     * Used to load the file from the cloud storage
     * @param filename the filename
     * @returns the value of the file
     */
    abstract loadFile(filename: string): Promise<Buffer | undefined>;
    /**
     * Abstract method to encrypt the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     */
    abstract encrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Abstract method to decrypt the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     */
    abstract decrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Abstract method to calculate the recursive proof
     * Used to calculate the recursive proof
     * @param data the data
     * @param data.transactions the transactions
     * @param data.task the task
     * @param data.userId the user id
     * @param data.args the arguments
     * @param data.metadata the metadata
     * @returns the proof
     */
    abstract recursiveProof(data: {
        transactions: string[];
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Abstract method to execute the transactions
     * Used to execute the transactions
     * @param data the data
     * @param data.transactions the transactions
     * @param data.task the task
     * @param data.userId the user id
     * @param data.args the arguments
     * @param data.metadata the metadata
     * @returns the result
     */
    abstract execute(data: {
        transactions: string[];
        task: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Abstract method to add the task
     * Used to add the task
     * @param data the data
     * @param data.task the task
     * @param data.startTime the start time
     * @param data.userId the user id
     * @param data.args the arguments
     * @param data.metadata the metadata
     * @param data.maxAttempts the maximum attempts
     * @returns the task id
     */
    abstract addTask(data: {
        task: string;
        startTime?: number;
        userId?: string;
        args?: string;
        metadata?: string;
        maxAttempts?: number;
    }): Promise<string>;
    /**
     * Abstract method to send the transactions
     * @param transactions
     */
    abstract sendTransactions(transactions: string[] | CloudTransaction[]): Promise<CloudTransaction[]>;
    /**
     * Abstract method to delete the transaction
     * Used to delete the transaction
     * @param txId the transaction id
     */
    abstract deleteTransaction(txId: string): Promise<void>;
    /**
     * Abstract method to get the transactions
     * Used to get the transactions
     * @returns the transactions
     */
    abstract getTransactions(): Promise<CloudTransaction[]>;
    /**
     * Publish the transaction metadata in human-readable format
     * @param params
     * @param params.txId the transaction id
     * @param params.metadata the metadata
     */
    abstract publishTransactionMetadata(params: {
        txId: string;
        metadata: TransactionMetadata;
    }): Promise<void>;
    /**
     * Abstract method to delete the task
     * Used to delete the task
     * @param taskId the task id
     */
    abstract deleteTask(taskId: string): Promise<void>;
    /**
     * Abstract method to process the tasks
     */
    abstract processTasks(): Promise<void>;
    /**
     * Abstract method to get the job result
     * Used to get the job result
     * @param jobId the job id
     * @returns the job result
     */
    abstract jobResult(jobId: string): Promise<JobData | undefined>;
    /**
     * forces the worker to restart the AWS lambda container
     * See https://github.com/o1-labs/o1js/issues/1651
     */
    abstract forceWorkerRestart(): Promise<void>;
}

```

Contents of dist/lib/web/src/cloud/worker/cloud.js:
```
/*
 * Abstract class for the cloud service
 * Used to define the cloud methods and properties
 * Should be implemented by for local testing and for the zkCloudWorker in the cloud
 * @param id the id of the user
 * @param jobId the job id
 * @param stepId the step id
 * @param taskId the task id
 * @param cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
 * @param developer the developer id
 * @param repo the repo id
 * @param task the task id
 * @param userId the user id
 * @param args the arguments, should be a string or serialized JSON
 * @param metadata the metadata, should be a string or serialized JSON
 * @param chain the blockchain network
 * @param isLocalCloud a boolean to check if the cloud is local or not
 */
export class Cloud {
    /**
     * Constructor for the Cloud class
     * @param params the parameters for the Cloud class
     * @param params.id the id of the user
     * @param params.jobId the job id
     * @param params.stepId the step id
     * @param params.taskId the task id
     * @param params.cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
     * @param params.developer the developer id
     * @param params.repo the repo id
     * @param params.task the task id
     * @param params.userId the user id
     * @param params.args the arguments, should be a string or serialized JSON
     * @param params.metadata the metadata, should be a string or serialized JSON
     * @param params.chain the blockchain network
     * @param params.isLocalCloud a boolean to check if the cloud is local or not
     */
    constructor(params) {
        const { id, jobId, stepId, taskId, cache, developer, repo, task, userId, args, metadata, isLocalCloud, chain, } = params;
        this.id = id;
        this.jobId = jobId;
        this.stepId = stepId;
        this.taskId = taskId;
        this.cache = cache;
        this.developer = developer;
        this.repo = repo;
        this.task = task;
        this.userId = userId;
        this.args = args;
        this.metadata = metadata;
        this.isLocalCloud = isLocalCloud ?? false;
        this.chain = chain;
    }
}
//# sourceMappingURL=cloud.js.map
```

Contents of dist/lib/web/src/cloud/worker/index.js:
```
export * from "./cloud";
export * from "./job";
export * from "./task";
export * from "./transaction";
export * from "./worker";
//# sourceMappingURL=index.js.map
```

Contents of dist/lib/web/src/cloud/worker/worker.d.ts:
```
import { Cloud, CloudTransaction } from "./cloud";
/**
 * Abstract class for the zkCloudWorker
 * Used to define the zkCloudWorker methods and properties
 * Should be implemented for by the developer for the zkCloudWorker in the cloud
 */
export declare abstract class zkCloudWorker {
    /**  cloud: the cloud instance */
    readonly cloud: Cloud;
    /**
     * Constructor for the zkCloudWorker class
     * @param cloud the cloud instance provided by the zkCloudWorker in the local environment or in the cloud
     */
    constructor(cloud: Cloud);
    /**
     * Creates a new proof from a transaction
     * @param transaction the transaction
     * @returns the serialized proof
     */
    create(transaction: string): Promise<string | undefined>;
    /**
     * Merges two proofs
     * @param proof1 the first proof
     * @param proof2 the second proof
     * @returns the merged proof
     */
    merge(proof1: string, proof2: string): Promise<string | undefined>;
    /**
     * Executes the transactions
     * @param transactions the transactions, can be empty list
     * @returns the result
     */
    execute(transactions: string[]): Promise<string | undefined>;
    processTransactions(transactions: CloudTransaction[]): Promise<void>;
    /**
     * process the task defined by the developer
     * @returns the result
     */
    task(): Promise<string | undefined>;
}

```

Contents of dist/lib/web/src/cloud/worker/job.d.ts:
```
import { blockchain } from "../networks";
export type JobStatus = "created" | "started" | "finished" | "failed" | "used" | "restarted";
/**
 * LogStream is a subset of the log stream data returned by AWS CloudWatch Logs when running the worker.
 * @see {@link https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/cloudwatch-logs/command/GetLogEventsCommand/}
 *
 * Example:
 * ```
 * {
 *   logGroupName: '/aws/lambda/zkcloudworker-dev-test',
 *   logStreamName: '2024/05/09/[$LATEST]52d048f64e894d2e8ba2800df93629c5',
 *   awsRequestId: '581d0d45-9165-47e8-84d9-678599938811'
 * }
 * ```
 */
export interface LogStream {
    /** The log group name */
    logGroupName: string;
    /** The log stream name */
    logStreamName: string;
    /** The AWS request ID */
    awsRequestId: string;
}
/**
 * JobData is the data structure for a job, keeping track of the job status, result, logs, and metadata.
 */
export interface JobData {
    /** The ID of the user */
    id: string;
    /** The ID of the job */
    jobId: string;
    /** The ID of the task (optional) */
    taskId?: string;
    /** The developer of the repo executing the job */
    developer: string;
    /** The repo executing the job */
    repo: string;
    /** The task to execute (optional) */
    task?: string;
    /** The ID of the user (optional) */
    userId?: string;
    /** The arguments for the job (optional) */
    args?: string;
    /** The metadata for the job (optional) */
    metadata?: string;
    /** The blockchain to execute the job on */
    chain: blockchain;
    /** The filename where transactions data is stored (optional) */
    filename?: string;
    /** The number of transactions */
    txNumber: number;
    /** The time the job was created */
    timeCreated: number;
    /** The time the job was started (optional) */
    timeStarted?: number;
    /** The time the job was finished (optional) */
    timeFinished?: number;
    /** The time the job failed (optional) */
    timeFailed?: number;
    /** The time the job result was used (optional) */
    timeUsed?: number;
    /** The status of the job */
    jobStatus: JobStatus;
    /** The duration the job was billed for in ms (optional) */
    billedDuration?: number;
    /** The result of the job (optional) */
    result?: string;
    /** The log streams of the job (optional) */
    logStreams?: LogStream[];
    /** The logs of the job (optional) */
    logs?: string[];
    /** Whether the logs are full (optional) */
    isFullLog?: boolean;
}
/**
 * JobEvent is the data structure for a job events, keeping track of the job status changes.
 */
export interface JobEvent {
    /** The ID of the job */
    jobId: string;
    /** The time the event occurred */
    eventTime: number;
    /** The status of the job */
    jobStatus: JobStatus;
    /** The result of the job (optional) */
    result?: string;
}

```

Contents of dist/lib/web/src/cloud/worker/index.js.map:
```
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/cloud/worker/index.ts"],"names":[],"mappings":"AAAA,cAAc,SAAS,CAAC;AACxB,cAAc,OAAO,CAAC;AACtB,cAAc,QAAQ,CAAC;AACvB,cAAc,eAAe,CAAC;AAC9B,cAAc,UAAU,CAAC"}
```

Contents of dist/lib/web/src/cloud/worker/transaction.js.map:
```
{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../../../src/cloud/worker/transaction.ts"],"names":[],"mappings":"AAAA;;;;;GAKG"}
```

Contents of dist/lib/web/src/cloud/worker/cloud.js.map:
```
{"version":3,"file":"cloud.js","sourceRoot":"","sources":["../../../../../../src/cloud/worker/cloud.ts"],"names":[],"mappings":"AAmCA;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,OAAgB,KAAK;IAezB;;;;;;;;;;;;;;;;OAgBG;IACH,YAAY,MAcX;QACC,MAAM,EACJ,EAAE,EACF,KAAK,EACL,MAAM,EACN,MAAM,EACN,KAAK,EACL,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,QAAQ,EACR,YAAY,EACZ,KAAK,GACN,GAAG,MAAM,CAAC;QACX,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,KAAK,CAAC;QAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CAqMF"}
```

Contents of dist/lib/web/src/cloud/worker/index.d.ts:
```
export * from "./cloud";
export * from "./job";
export * from "./task";
export * from "./transaction";
export * from "./worker";

```

Contents of dist/lib/ts/tsconfig.tsbuildinfo:
```
{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.es2021.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2016.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.date.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.es2021.promise.d.ts","../../../node_modules/typescript/lib/lib.es2021.string.d.ts","../../../node_modules/typescript/lib/lib.es2021.weakref.d.ts","../../../node_modules/typescript/lib/lib.es2021.intl.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../node_modules/typescript/lib/lib.decorators.d.ts","../../../node_modules/typescript/lib/lib.decorators.legacy.d.ts","../../../src/cloud/utils/graphql.ts","../../../src/cloud/utils/utils.ts","../../../src/cloud/utils/base64.ts","../../../src/cloud/utils/index.ts","../../../src/cloud/networks.ts","../../../src/cloud/worker/job.ts","../../../src/cloud/worker/transaction.ts","../../../src/cloud/worker/cloud.ts","../../../src/cloud/worker/task.ts","../../../src/cloud/worker/worker.ts","../../../src/cloud/worker/index.ts","../../../src/cloud/config.ts","../../../src/cloud/index.ts","../../../node_modules/axios/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../src/mina/local/local.ts","../../../src/mina/api/api.ts","../../../src/mina/encryption/connections.ts","../../../node_modules/o1js/dist/node/bindings/crypto/non-negative.d.ts","../../../node_modules/o1js/dist/node/lib/provable/core/fieldvar.d.ts","../../../node_modules/o1js/dist/node/lib/provable/bool.d.ts","../../../node_modules/o1js/dist/node/lib/provable/field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/provable-intf.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/transaction-leaves-json.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/gen/transaction-json.d.ts","../../../node_modules/o1js/dist/node/lib/util/types.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/foreign-field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/native-curve.d.ts","../../../node_modules/o1js/dist/node/lib/provable/group.d.ts","../../../node_modules/o1js/dist/node/lib/provable/wrapped.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/binable.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/generic.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/provable-generic.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/provable-derivers.d.ts","../../../node_modules/o1js/dist/node/lib/provable/scalar.d.ts","../../../node_modules/o1js/dist/node/lib/ml/base.d.ts","../../../node_modules/o1js/dist/node/lib/util/global-context.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/bigint256.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/field.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/vector.d.ts","../../../node_modules/o1js/dist/node/lib/provable/core/provable-context.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/witness.d.ts","../../../node_modules/o1js/dist/node/lib/provable/provable.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/struct.d.ts","../../../node_modules/reflect-metadata/index.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/circuit-value.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/signature.d.ts","../../../node_modules/o1js/dist/node/lib/ml/conversion.d.ts","../../../node_modules/o1js/dist/node/bindings/compiled/node_bindings/plonk_wasm.d.cts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/lookup.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/elliptic-curve.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/curve.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/bindings/kimchi-types.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/cache.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/zkprogram.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/prover-keys.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gates.d.ts","../../../node_modules/o1js/dist/node/snarky.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/finite-field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/foreign-field.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/elliptic-curve.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/foreign-curve.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/transaction-leaves.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/from-layout.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/derivers-bigint.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/field-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/poseidon.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/constants.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/poseidon-bigint.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/curve-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/transaction-leaves-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/gen/transaction-bigint.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/gen/transaction.d.ts","../../../node_modules/o1js/dist/node/bindings/mina-transaction/types.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/poseidon.d.ts","../../../node_modules/o1js/dist/node/lib/provable/int.d.ts","../../../node_modules/o1js/dist/node/lib/provable/bytes.d.ts","../../../node_modules/o1js/dist/node/lib/provable/wrapped-classes.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/foreign-ecdsa.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/keccak.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/hash.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/common.d.ts","../../../node_modules/o1js/dist/node/lib/provable/types/unconstrained.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/circuit.d.ts","../../../node_modules/o1js/dist/node/lib/provable/packed.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/arithmetic.d.ts","../../../node_modules/o1js/dist/node/lib/provable/gadgets/gadgets.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-list.d.ts","../../../node_modules/o1js/dist/node/lib/provable/option.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-tree-indexed.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/signature.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/types.d.ts","../../../node_modules/o1js/dist/node/lib/mina/smart-contract-base.d.ts","../../../node_modules/o1js/dist/node/lib/mina/precondition.d.ts","../../../node_modules/o1js/dist/node/lib/mina/zkapp.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/sign-zkapp-command.d.ts","../../../node_modules/o1js/dist/node/lib/mina/account-update.d.ts","../../../node_modules/o1js/dist/node/lib/mina/transaction-context.d.ts","../../../node_modules/o1js/dist/node/lib/mina/account.d.ts","../../../node_modules/o1js/dist/node/lib/mina/fetch.d.ts","../../../node_modules/o1js/dist/node/lib/mina/graphql.d.ts","../../../node_modules/o1js/dist/node/lib/mina/transaction.d.ts","../../../node_modules/o1js/dist/node/lib/mina/mina-instance.d.ts","../../../node_modules/o1js/dist/node/lib/mina/transaction-validation.d.ts","../../../node_modules/o1js/dist/node/lib/mina/local-blockchain.d.ts","../../../node_modules/o1js/dist/node/lib/mina/mina.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/reducer.d.ts","../../../node_modules/o1js/dist/node/lib/mina/state.d.ts","../../../node_modules/o1js/dist/node/lib/mina/token/forest-iterator.d.ts","../../../node_modules/o1js/dist/node/lib/mina/token/token-contract.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/encryption.d.ts","../../../node_modules/o1js/dist/node/bindings/lib/encoding.d.ts","../../../node_modules/o1js/dist/node/lib/provable/string.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-tree.d.ts","../../../node_modules/o1js/dist/node/lib/provable/merkle-map.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/nullifier.d.ts","../../../node_modules/o1js/dist/node/bindings/crypto/elliptic-curve-examples.d.ts","../../../node_modules/o1js/dist/node/lib/provable/crypto/crypto.d.ts","../../../node_modules/o1js/dist/node/mina-signer/src/rosetta.d.ts","../../../node_modules/o1js/dist/node/mina-signer/mina-signer.d.ts","../../../node_modules/o1js/dist/node/lib/proof-system/workers.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/offchain-state-serialization.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/offchain-state-rollup.d.ts","../../../node_modules/o1js/dist/node/lib/mina/actions/offchain-state.d.ts","../../../node_modules/o1js/dist/node/index.d.ts","../../../src/mina/encryption/encryption.ts","../../../node_modules/nats/lib/nats-base-client/util.d.ts","../../../node_modules/nats/lib/nats-base-client/codec.d.ts","../../../node_modules/nats/lib/jetstream/jsbaseclient_api.d.ts","../../../node_modules/nats/lib/jetstream/jsapi_types.d.ts","../../../node_modules/nats/lib/jetstream/jslister.d.ts","../../../node_modules/nats/lib/jetstream/jsmconsumer_api.d.ts","../../../node_modules/nats/lib/nats-base-client/queued_iterator.d.ts","../../../node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.d.ts","../../../node_modules/nats/lib/jetstream/jsmsg.d.ts","../../../node_modules/nats/lib/jetstream/consumer.d.ts","../../../node_modules/nats/lib/nats-base-client/typedsub.d.ts","../../../node_modules/nats/lib/jetstream/types.d.ts","../../../node_modules/nats/lib/nats-base-client/core.d.ts","../../../node_modules/nats/lib/nats-base-client/transport.d.ts","../../../node_modules/nats/lib/nats-base-client/databuffer.d.ts","../../../node_modules/nats/lib/nats-base-client/servers.d.ts","../../../node_modules/nats/lib/nats-base-client/muxsubscription.d.ts","../../../node_modules/nats/lib/nats-base-client/heartbeats.d.ts","../../../node_modules/nats/lib/nats-base-client/denobuffer.d.ts","../../../node_modules/nats/lib/nats-base-client/parser.d.ts","../../../node_modules/nats/lib/nats-base-client/semver.d.ts","../../../node_modules/nats/lib/nats-base-client/protocol.d.ts","../../../node_modules/nats/lib/nats-base-client/encoders.d.ts","../../../node_modules/nats/lib/nats-base-client/types.d.ts","../../../node_modules/nats/lib/nats-base-client/nats.d.ts","../../../node_modules/nats/lib/nats-base-client/nuid.d.ts","../../../node_modules/nats/lib/nats-base-client/msg.d.ts","../../../node_modules/nats/lib/nats-base-client/headers.d.ts","../../../node_modules/nats/lib/nats-base-client/options.d.ts","../../../node_modules/nats/lib/nats-base-client/request.d.ts","../../../node_modules/nats/lib/nats-base-client/authenticator.d.ts","../../../node_modules/nats/lib/nats-base-client/nkeys.d.ts","../../../node_modules/nats/lib/nats-base-client/bench.d.ts","../../../node_modules/nats/lib/nats-base-client/ipparser.d.ts","../../../node_modules/nats/lib/jetstream/kv.d.ts","../../../node_modules/nats/lib/nats-base-client/internal_mod.d.ts","../../../node_modules/nats/lib/jetstream/jsutil.d.ts","../../../node_modules/nats/lib/jetstream/internal_mod.d.ts","../../../node_modules/nats/lib/src/nats-base-client.d.ts","../../../node_modules/nats/lib/src/connect.d.ts","../../../node_modules/nats/lib/nats-base-client/mod.d.ts","../../../node_modules/nats/lib/jetstream/mod.d.ts","../../../node_modules/nats/lib/src/mod.d.ts","../../../src/mina/encryption/client.ts","../../../src/mina/encryption/messages.ts","../../../src/mina/encryption/index.ts","../../../src/mina/utils/base64.ts","../../../src/mina/utils/fetch.ts","../../../src/mina/utils/fields.ts","../../../src/mina/utils/fee.ts","../../../src/mina/utils/mina.ts","../../../src/mina/utils/index.ts","../../../src/mina/verification/verification.ts","../../../src/mina/verification/index.ts","../../../src/mina/index.ts","../../../src/index.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/undici-types/header.d.ts","../../../node_modules/undici-types/readable.d.ts","../../../node_modules/undici-types/file.d.ts","../../../node_modules/undici-types/fetch.d.ts","../../../node_modules/undici-types/formdata.d.ts","../../../node_modules/undici-types/connector.d.ts","../../../node_modules/undici-types/client.d.ts","../../../node_modules/undici-types/errors.d.ts","../../../node_modules/undici-types/dispatcher.d.ts","../../../node_modules/undici-types/global-dispatcher.d.ts","../../../node_modules/undici-types/global-origin.d.ts","../../../node_modules/undici-types/pool-stats.d.ts","../../../node_modules/undici-types/pool.d.ts","../../../node_modules/undici-types/handlers.d.ts","../../../node_modules/undici-types/balanced-pool.d.ts","../../../node_modules/undici-types/agent.d.ts","../../../node_modules/undici-types/mock-interceptor.d.ts","../../../node_modules/undici-types/mock-agent.d.ts","../../../node_modules/undici-types/mock-client.d.ts","../../../node_modules/undici-types/mock-pool.d.ts","../../../node_modules/undici-types/mock-errors.d.ts","../../../node_modules/undici-types/proxy-agent.d.ts","../../../node_modules/undici-types/api.d.ts","../../../node_modules/undici-types/cookies.d.ts","../../../node_modules/undici-types/patch.d.ts","../../../node_modules/undici-types/filereader.d.ts","../../../node_modules/undici-types/diagnostics-channel.d.ts","../../../node_modules/undici-types/websocket.d.ts","../../../node_modules/undici-types/content-type.d.ts","../../../node_modules/undici-types/cache.d.ts","../../../node_modules/undici-types/interceptors.d.ts","../../../node_modules/undici-types/index.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/dom-events.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/readline/promises.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/sea.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts"],"fileInfos":[{"version":"44e584d4f6444f58791784f1d530875970993129442a847597db702a073ca68c","affectsGlobalScope":true},"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","9a68c0c07ae2fa71b44384a839b7b8d81662a236d4b9ac30916718f7510b1b2d","5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569",{"version":"6920e1448680767498a0b77c6a00a8e77d14d62c3da8967b171f1ddffa3c18e4","affectsGlobalScope":true},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true},{"version":"4443e68b35f3332f753eacc66a04ac1d2053b8b035a0e0ac1d455392b5e243b3","affectsGlobalScope":true},{"version":"bc47685641087c015972a3f072480889f0d6c65515f12bd85222f49a98952ed7","affectsGlobalScope":true},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true},{"version":"93495ff27b8746f55d19fcbcdbaccc99fd95f19d057aed1bd2c0cafe1335fbf0","affectsGlobalScope":true},{"version":"6fc23bb8c3965964be8c597310a2878b53a0306edb71d4b5a4dfe760186bcc01","affectsGlobalScope":true},{"version":"ea011c76963fb15ef1cdd7ce6a6808b46322c527de2077b6cfdf23ae6f5f9ec7","affectsGlobalScope":true},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true},{"version":"bb42a7797d996412ecdc5b2787720de477103a0b2e53058569069a0e2bae6c7e","affectsGlobalScope":true},{"version":"4738f2420687fd85629c9efb470793bb753709c2379e5f85bc1815d875ceadcd","affectsGlobalScope":true},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true},{"version":"9fc46429fbe091ac5ad2608c657201eb68b6f1b8341bd6d670047d32ed0a88fa","affectsGlobalScope":true},{"version":"61c37c1de663cf4171e1192466e52c7a382afa58da01b1dc75058f032ddf0839","affectsGlobalScope":true},{"version":"b541a838a13f9234aba650a825393ffc2292dc0fc87681a5d81ef0c96d281e7a","affectsGlobalScope":true},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true},{"version":"ae37d6ccd1560b0203ab88d46987393adaaa78c919e51acf32fb82c86502e98c","affectsGlobalScope":true},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true},{"version":"bf14a426dbbf1022d11bd08d6b8e709a2e9d246f0c6c1032f3b2edb9a902adbe","affectsGlobalScope":true},{"version":"5e07ed3809d48205d5b985642a59f2eba47c402374a7cf8006b686f79efadcbd","affectsGlobalScope":true},{"version":"2b72d528b2e2fe3c57889ca7baef5e13a56c957b946906d03767c642f386bbc3","affectsGlobalScope":true},{"version":"479553e3779be7d4f68e9f40cdb82d038e5ef7592010100410723ceced22a0f7","affectsGlobalScope":true},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true},{"version":"d3d7b04b45033f57351c8434f60b6be1ea71a2dfec2d0a0c3c83badbb0e3e693","affectsGlobalScope":true},{"version":"956d27abdea9652e8368ce029bb1e0b9174e9678a273529f426df4b3d90abd60","affectsGlobalScope":true},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true},{"version":"33358442698bb565130f52ba79bfd3d4d484ac85fe33f3cb1759c54d18201393","affectsGlobalScope":true},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true},{"version":"fcb637e11e53742c8414d7d768c31221262f1650ff1860c9d96e58d401628b4c","signature":"81722da336015ccd03dd0868fb492c748b40d6292217e1e3c4572f0a4e93c5bf"},{"version":"75b9f11a7abe59e903626f55f4b39c300ef0d203435a20d2690e7e9867ea8fde","signature":"78d243bdc278e2efce4c7a39f70627286af3d99193f4f52ba22b77ad976be473"},{"version":"3f8969dbf35e920081bfaae80102fb3416ce3aee45872461be8898180335f0e4","signature":"ea8446c6e28df31746c8609ec7fe7f26553b6b2faff808d25b739d5915b1a471"},"0094dee76ef8576557b17f4deae2dfe83e482227399d0731a8554e99de95e178",{"version":"bbf4f1af06efa9ba1a65ec7f047ecd6d3092d35650c9a60fd9d42196b3c60146","signature":"d47761d98e8aa5c3213d29ba258c144046a0dd8788871f617fb5148f5bab116f"},{"version":"84336e042966652a474160c9d5de421f9400edb10ef95a53bb30bb50cb70b82f","signature":"22ad9c982cf572190ada5718cb8bea38651cd5b13407b8f926ed10fd0150d024"},{"version":"846f052f3a3813ee18c469c6c9555c07846ff84a8963cd2af27e61f5ed466550","signature":"e90aced94d9fa6386f394d457eef6be106c15973cbb7b3533c90bbd4259e2954"},{"version":"710e3f4ceda593cb570e00007a5b25566459af876c3a54dc24e5d1d0fa4ef327","signature":"c923799de7f8b55708a2f0146c13b5458a83fedb153d6b3d93839acd0077cd21"},{"version":"ba142d8bce049af9f48c4d6b09743a4787862a99fde53e06f113c74414c0edae","signature":"b61d141fc37156db206acad2eda3c43fa980b30b06b522c9e3ea27937f95f596"},{"version":"95ba1d53714456428c63719bd5475554a23cd627956f33b9d23a5ef6c14535ef","signature":"b6f97b6097aae00f5b93e7f574ebafd8bf229dce1dc4a1f7e42d5462919d02fc"},"6e88d368297506d500bef0a247957f1da85510cdf5740662989e119cfd85faac",{"version":"0ecc1d9a70ef1d620f5b895afeed5b67a8b236a1fa801d2d9ddfd73acf9a4002","signature":"3b426ca49f4263b96473702d3b0e039eb755683ba0288a72a732b368e1ef3f4e"},"aba307df7c63b5a97f7c496e8db55a3c51a9281848aa3137147f19f56e7019f3","01ba761ce6d75a4142858a053f45d64d255e057049ab1cc4d9a93e76b8b5c444","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2",{"version":"ffbd648b93dd8d81e3155cdccead93cfc34a5eb917abe809526b68f0af6d91c7","signature":"c9b81be2bf31f9416b01fead0756eb0615ba31e5e8ee5d5c27af26e16e3eb63e"},{"version":"c92a55b58392d79ecf7115298c2ae5fe7adf5bdd10efe1f2017cbd992931eb9b","signature":"2d260866f1468ae706914ce6078917bbb72a64edba20ea140de3bbdbe6d563ec"},{"version":"4bb3acab27ae7671765631bc9976cae710b8fbebf061a80d403da619954278eb","signature":"262c43a08c3db86ede3f97dfaa43f65de2fa2c4f9a4938a8bba1b6e2a2a5de10"},"9a9d48f04dca9bb787522b012092ac36dd6ea22748f9f721d13dc4d84e42387d","f689b555fd226b172c13328f29fbdcabbb636b1746e75abfc9b620353819746f","dc957ce057181ebbf806448f8c4e8577987843e84e92b536096887d8e7505169","c0f652b8eea8975652ca6c19691ee534097a15553898521c84f9ea740f272ae9","830e5eaa2ee0c5b78cb15acfeec2753d6da27f5fa74b89b9ec88e2f7eff922c4","a72629c8ed67cd5d8ecb5fd60e1c64b07e11b246894aaf8a17e29a676f4be041","5240a5f0bf490d199ebf97f36a50e1e3b7844c3144dd90f45b93a7b0f3e404c2","ab557c40fb8521c229448329d2e17451921dab9559ec38ed8737e718bf305e2b","e819fa9a1d4c1d2d3788a895f9e6a6a7ddfe29d2d0164b9e16ec2bb386eef2bc","191c1b4e730675dd156b344c57c37d14b48aa3d5c969316b3a2e4a3af13e98ed","74d62a10e5ed7938e46793f3f9c40776d2fd667de084e65dc903c2da7941b175","204cc68eb2f61d8f1a76d88289d50621fb080d171fa73c993cebde8be683f3d5","8a0f60fc69219ca8e4e811e5f4dd0d4db28981dabff325389cd795764bf2d4ba","90b2f277502bdd447a0e2e0b71af206c13ecbabd6db9918bcf58d03be9f13421","444c4d349577d6d6aa5647bfd01ae101620ec1f0933d270dc5de21778406bf1c","a42f3fa88a87327ddbf976cd5093ea5e42e2ad1a6a09980b4fb96fb53f244acf","ce267ea5884bca498f7fad2b5ecfe0f6b09d764a5d869b9722063ba634ffae98","0c2840a30adce420d9ed6fc6b07004bad6faf36b98c26fa396f90644ae88e7ef","21ddd09adb35e88374ad316a30bdfb811326eaae550be488c52db212f29f500f","c132bf7e51370bc34639ce847f464ef709be92110bf5c6ff4825a2ca9dcb6b04","70fa1179eac0abc1067862fd6b274a3284e75c1b5ee6a2bb0c20cbf53b56e75d","51a41894321c9f22da9e9a59ac83e40acfb1c9976a69021ac4d7072619654e8c","5689ea3d0adbb2ba216ec54d151a8a55c0d4fc71367905d46487fbf1fd0e696e","bf17161ce72ac862080e6165fe12330f8220947d696c2cc38ce0e12672320758","04ccdd6359a26501937de4f750a91ebb2687ca47289022047cc2a1c5e5f3f2ac","c236befe9470326ecd9280bc542c15702fdeb0bdc791174855a3bd94fe28068e",{"version":"8d6d51a5118d000ed3bfe6e1dd1335bebfff3fef23cd2af2f84a24d30f90cc90","affectsGlobalScope":true},"e28279e587a0b5359eae2d3ffa5fddcfd3d026e42950e09f1a445e18a88d8520","7198c144555f4c3ef3876ebb957bf4aacbf5a4f74fece22589f2f45cc56bf743","e7b6a7f50f6210249095bd316442d174ebbab403f608748e01ad2e705cc6e8bc","3e3f35cfcf432d22ae7fb8f0df272ce15dc6b6002375664feb9d9d7579080b5d","249a8fae114d1f1209a12ecc2a8d31ff7b7b822f8da0ff22093a8fd8cbf72018","7cc8fc6f9807181ac6773bfa99720e02543dd42c9fc4764a3492774902ded143","3119d821f41fb14c6dd351cbc023956fe996923e561ee31c9265577dbe8aefcf","714316f5c511bd8dbbe3fa52ea348244811166bef2158c1bc0394cd3d7d905fe","eb0938d65fb4fa32d2506e4064e00f0e5715f7b9c0e87c06ebed4602868bf823","2c220095be1d76040518e0194cbad8f6011456eee9fb0b5e09351038589b2fc9","8c9d88a4c651ef1c6c16bc0dc7ddb39ae25f69aeb968806765df0bd4899fcc0e","f71ae3fba6a8d89c4e2ede6e1f2055e993b835a52fdbc9436d060a34e55ade5e","0683bbc485d52643011da70eaa3f2249e87614cb5fe853eb3adf720a5973f8af","a3987faae6ca116a29967e87f7909a4aca1ca9c46aa78e5c4b5abc62cb253e9e","a3f0b51dd226bcc83aab289d3625ee5214fcb0b317722f9a7904039c8006fee8","5882a88178b51993c7354a2ac9a563f117728006eb9793cabad5e0f8b3f1f15b","fabf9112185e2adc4dd059999b6a19882852c8abc66c17b115e83a917af80770","7865b6229a4bb89d5da8900139a01b3570e84b966f84589648b79fcd997d2827","e4ac7476c958c0e2e03343a447239b55d3111c23fe410c424ba36dee8361f045","44cde016e9d8416da32ffa2bcb2d0788062e1f2b08920423b2844fd87c4bf17d","2260b86ac7f0f51b84bb9ce6e4e19186cb27deefadf1d535333c8189bb441a79","b722834af2a8bf739b3775e4b195e338e022a272920c589734c7ceea2b597f85","19f937341c4bf0cc8ef1a9add035727478a4697af1964ab24d3ddd87c3d32351","832e187002065695afa922e8e43fb9b4c20a54bc9c09361239e52e239bdb774d","ab0b6884679a45eeda23591d1fa49abfcd949e4bea2955331f06f4fe2bd522c6","d1dfb574b16822880c28cfb2fc5926bfbd0d566aab798b77d143e203a01a2cca","2ba7674b8bedd99b4d290cb738c2ed1bfa729a970b1c38e5e8986ba915a82ab0","dc6ddafce66147f3fe949e59ab7bbdd909e40dfbbec64bb88ef0f0af2e649348","5f2b91b05147c42aecb704e53b724b958de2adc503c17236199c9ba251c79d02","e902d090310b5aed646ba13c7a89320308ada69a703c9111457f7db5744e8d9e","f3fda18de1328c6d0c5a8f9db67f3d69c89286b230b19bd72567d680d747690e","75ad1bf960ae5062e21291ac75e326a2e693350c158de7a9b6611ef46c89c86a","a44554abb5d268058f91e5b834f4c71751959a6ec395ef56c94b8c69d8c4e244","8ae00073ccca98af600ef6eaaed98734abb5b6ed92c9ff1f49aa985e20c695ee","6d85671cb695f685fd40d7c605ceff16fd80c920c4391dcb7239699f866db19a","338a77519dd2aa2d0a6de3b15feea7e4ec01ec1fd231a553daec7d4f332b39f1","840059423f100f2e3687355daf6275625ed644f3c2051bd8652e71268c63a5c8","bd43c167d8d2494bd70c682f9245e464df22b8bfedac6f21f5f27d80ecbfb25c","004357369ef2304f6b200d85d6c1e284d086c865ff40a86abcb0c80008444a02","3da1856e62b8ce08d3c61f21c158f856810da8d1bd9a0fec18971c8cf911a152","0081e2fbb388deecb709c29c0a5d503297edfa6e64fc28d661d333d3caaef8b8","3d1f40116cd77813e8c5de5c11b723ce9e4aba4967b55aabe2caa3611587b7a2","b210ec0c3e213c224125d52ce383a0f622130f5a657e665b4bb230827448f31e","77e7cf60f57bbbabac775ca986d642a966d41a45f6dcde6176e846a2449a5be4","37d779a39e134a762d49451329f2d8a761c64b53a4287fb8fa2b8bb67fa2584e","288f89447c29e68b3a1850c0307ceff9d93d3943efc0a9a8a93019607607eb29","afa54fdb0227c19df096a3142920c8c02581017f3d3a3aece5cf77320ab7f789","7a14e610f62f5f1ab564b04311fdb80e32d3a2097e06d426d5dcb46328fd7b88","e8f564935faca22891d975d8e46217424ffc15bbe007a61488ca4b42f905b299","d81b1fc5c78cefa3bf7e4f5a54f4184bb89a32717b45da76d87363caf27cd88a","3b16135caa4bdd7dbeb6b476f0e227b4a2449501aaa6a7f66f5cb3c1ef88a40e","c80a25d34c20d5effc94f690903225b421ae8a2413ff49c8eca90ddfe310ca68","1127c4ace9371cc78b71e92f57310597739f1aaafb415f81d674df0ef253e8e1","455942d06fd42630bcf9d48f579048b2b3d9a79668a23bfd4ab58423857dfef0","35aee4acd707b159c795c9d7d0c6e085a0717d3e9edf1e95166cd14fd6208153","2c84b30f081cc4111fe1978836730987e4a4b1fbf06bf46f2348609247aea2ec","6625c4fff7c92e4203984462fbbaa2b81c614a2122f68ca074519bdb45cf85a3","98c36a41db4860e20715b54e2f39d0ffcdfdcff021559bf03adec23b5c39c656","57cdc4ed8569f62db5af43dfb88dc4d9d8a2795a6afaba39e237d6dcc750413a","b76bf4e1676ec8b6e6f97069a4f8f78bdd4a71e636667e334fc14836d4428a86","6f55dca45e78ef90f57d836e231b6333e92bc7450be6ac872877f9713046adf0","261aba75738663dbe499b271e471c684362638f890fe4de51f162a1b6bf6621f","f2f9b616251fc8f6499b9a650cdfcd3548f65a3f495a82254e6568769edaec44","cffff0c1ef1d1a82233cce9d9567a046e26917ef759e99c57e5f98881c9e7442","6adafabcd9a167589fdf2740f9aa28f9862d95f9ea3e52819557ebf07db6687c","f9461da3ae116642de3fdd207afb0853c1acd80b95c13fdce4e54e7b6ca251b3","04c69dd5905cc3eb015d4bff55f7425815e54296678a7d88f9001329e07b2346","2e14bda3173cf126cd67b176e13ffbe16cc59a2a3052b1324f6c83baed71a989","0c0db8600baad7249aa0a0cd93f789a9122ff672c65169e1cbe1496f24f4f473","69e0ead4905e446616eb3bd8857e45e3c5047e0bb4aa5ead77f35e807ce96114","3e24c4e8c1d659188e3c637071509458416c8d63ec854de259cfce063961304c","67c965aff094b69e4d8ab243749697ed9cabffd8d5def86ff01de88d808ffdb7","615f21a9f5830bafcb29e4c25e31abd4a2a8ac20c750fc1d842e34dbd7381f3b","d8fa5a43e48c6633c04f634a1a97fabac4a85a08b513f7ba4573677328345c56","4e2f5c1b58ac658de016723e1877644803a50f282c2defcfccb55b1e307d5ad5","7ba86c896b6ffb46aa5802a457a760e752793bb7733b2029acbd1ff0b4719037","11cefca06ddb881683cd89f5805f70902675931e0de303a4909bbb3bd84e22b2","a0764ca85fe1b3463ab8bdd5e1a13a84adca4e15addc804e576fca6a176d0071","f3ff4e877d17df71dffbb19c744a38344628652fc25fefc0d336c9ba0aed66f2","b55bc43b7e6a218f0c7f82a9a7282dec12ea755f54bde8107e0c65a263133903",{"version":"60c223a003fe788e9396d9c02b0f1da97fe32780712693983b38bc0716ddf364","signature":"f952b72f489ec3e76010ac6c74027c3a86a8fed67118a716eacb77c8511b24ce"},"a64604bce9efa09bf3ef246d8ab174b573f13068fb0d0e29ae4d6d825bbfad4a","33d47592253ddf2c8b7a294ae95ab40a94b5ddb5f6b9b83b722ed43849f17e41","de9850a04c2e1d54602a3e88bb5aa4760d9db22cf345ea3b02a08dcd1fc37c8b","4c11d7f23b1862075222da74ed1d911916afc2007b978f0dd2e2a3237b03ef59","f67a33e9e24f568c91a4e3e2d8cabb3daf3caae32d3d08fb397dae3780639eec","af1307c43f75b749851f8e2f67b2e6736487d1441621ca18732c218a47496a48","1614011a9cb4b5228fe0819521394890c28ac1b6fdfca626b71d84c110d02850","4d26aca4ae69dfa0bfcd19c7b291e5867698b1ffe1f6af6098b4456697386c6e","dd25fcae2a22239186cf454fc05b1c02820b1df3f704cdc74eebe3ead60beb48","b6ceba20c577dd7ffe1dc023d1f356c521c5afe94e589e7e3899cfede465f14f","79d5f1841caac458d7a47ace5cc547b4d7e0b6349e8949b2c4c6e6ac236fb1aa","34e5d02cd29d7bb38dd2c677b046b69c33eb6e06e080cc93e156cdc39e4937d6","bc3892f84ba8e408a72d5b1e8235b24367056ac597875c09cd0a71ac48504e50","d575ac31e0a1d72f3b2af47381bbe038257d78712a953aa7d3273ca247e00e6a","ecde95506bc9bfaf169eba3337005fe1a4a3fc4a4ae3f4d317a85553e2f22c64","9fb9631b0787790e799594970cf6ef7cb2173d730d7ae2d57697f60f5a860e94","0cd87633b68c343a4b995c1f7ae28799737d46d950abbb3fc07fbd9db15ab560","3e28f9c9b27f5789204aad8692d12fe46a69c962d79dfaf70d3c37bc41db247d","30e03e99c34605a4a408d6b8535e769b1d02f21af421598d1f44bef153637566","5528fcd80925b30412eab8131182c1a77baa335dfe875334ed90e9ad0e129281","45459e5e862aa6152414fdc4a73ff3a5ca68a703cf9040e4a5af3788a62820f4","9f4eb5b4f6ee41dc7d1cabadee8e0ca38d5ab4a63b060e370147524baff2ca9d","d3f94171eceb81ac757bcc2012262648d160236ad92115265256ee3f8e4270d0","aaa9935369c79df9901d01238721a0c9552d2d5d8b2003e38f198d5042f75b51","b8d3d3d6e53a69c166096c572bd0c1d857ea9cf065320b1912eb3bac79d1f455","db6b1282d27fa7c0c1f63af90a134e2b3641b2517fe63e79600173f938825883","7a86ebd2511b08bd29ea232c128c26e6408697984945927bc2d3521e3a407512","89fbcb36e692ef4511d71acc2c3c1ef9579b1a9217da2ce207fe0f016fa77440","3bd2b18fb7a8e2858563f285e5195fc3cb58bddc030705bc845b8a1d85bb3894","caf0ba1b68ff9c4435615c16bb252e1ef51170aab1d355bb6663cbb58c09b06c","7179bfaac26759ccb4ed3ea13d7fcfb5cf3150d9632e97cd8f4650990e8d63ad","bc399896d66e5cc6cb7d069180a7181b93d14c43e938852b5c8cfefe1b76b443","abc8bcb0d28b91aa8de5f35cd60d107e4d4db4087217ebd1ab145673ba7ac0ad","1a4df56182c0c3db0c3cd24053b2a448a7cf0cf434c132b3baad7f7779502e90","849b7a65dd513282a5d2ba5dd3345dcdccf7ce5a3b69c30a7b094b9b3b36e46d","88350c55901c9c8c3849b2e8622d414c731adb164633e239173e491097d616ec","2ead347cdc2610b3ea0f000c4e55a02904a9fb58e45efc9baf1d0589a181c221","06e64968516bbf12b7d388d01d5f3f9c18e705fd1b15ce108eb4c568d0ab3f2d","5824546363337819f73a70cb94120a0cca407c63bf1f57098dd57a89ee825b2e","fe343271f55363e8602b4fb43ad712833cb68ebeb50b2ff1c05b91ee04b4e07e","7ffa23db9027d9029976f874d028fbc95c4e96cbedc2708895e15870457ae59f","465447d62f1750e04d98cc30df8756dc79a0e8ce0a33a02bc8da46f303bdd8e5","34c89375bf43cf3caec2b2e3eb4709d22b7d991d8db89a2744a95106c64532a6",{"version":"d52e0174d065c7df904f0a179d17f7ae9d3266574bf09f42146bff0f37a96643","signature":"f019942b10f5072ca0f20227b85dbceeb6e2b2a04d542062ff51e0a07f16275a"},{"version":"d2e48062e706e0a484f68e912f17dd73311e58acddd54f60ababb8d964a1f54d","signature":"96e6d9c19290bd7a795614bc3773de3140c045587deaf95e3fcb4b52f609f005"},{"version":"f735c8b899502d12eb0d549522e94775af3baeefc90d82f7ba0b0e02ae45b8fd","signature":"1d7f022474587716f5f2bae722bfe4db7d63949e977db088f73d8df9e3d1c30a"},{"version":"c7ab292b59b6b60881140e0b328b25baa388ca69fc322f1c43a7e262fd15827e","signature":"c2fae9cfc024fc680af21bac9ed691a515c37b1ef28bea1cfe3c8d44844302d6"},{"version":"638e777f0bb28754ddfa3803c5d02b0ee50c2802e9da8e0f1c836e9c7df9b743","signature":"b5c049530a84e5a15345514436849c7de5981a90821a7fee52d6d9938a02c403"},{"version":"2d054ef8048423c1263fc541ce1b916698ca6d7f92b7f13298dcbdb1b1664557","signature":"70d1b4c17ecc28087fd639e6905d255f97eef894ade69cef52f763153a278af5"},{"version":"26fcd0a8ad148bd100e85d1115fc39a60cc0fe61bccdfa9411a92e9c6e72c3da","signature":"4094348a5d639a71e24c33a5e3a8bf1ebb559be3c79fd79b6c2b422b652877aa"},{"version":"7ac367c72f94636dab4ddd2ac0873a2bb846bdea04ec747257abfbf44221949c","signature":"51a50ae6c8ea5592ec3e3511ef38c26f76854d23a83da12df158e2c834092b14"},"c4354c1ea92ded40e359685d59dfe23ade9a4866f2f5fa1a7d5bc4baf44bc7a0",{"version":"b55a94e9d21b5a18f382ac8cc24337dfd5b76e0c70157d141b4b3586d98b1a71","signature":"87a836363e4ca63e27e02e87e69c97f7b8d9df881b4191ec684bb2297aaf314c"},"5de460345b220ebc24be0f147e360302606ffafefb3250831a1f1a56c19faba3","3bd2d413636faa566b78ccf6c7664f33d277ae4f4d931fea0f191f7af4cc8618","f523375919d7397fe0e46f05c009a3f8efbe259497db89b6aafede875111eda4","2db0dd3aaa2ed285950273ce96ae8a450b45423aa9da2d10e194570f1233fa6b","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","7180c03fd3cb6e22f911ce9ba0f8a7008b1a6ddbe88ccf16a9c8140ef9ac1686","25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","54cb85a47d760da1c13c00add10d26b5118280d44d58e6908d8e89abbd9d7725","3e4825171442666d31c845aeb47fcd34b62e14041bb353ae2b874285d78482aa","c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","a967bfe3ad4e62243eb604bf956101e4c740f5921277c60debaf325c1320bf88","e9775e97ac4877aebf963a0289c81abe76d1ec9a2a7778dbe637e5151f25c5f3","471e1da5a78350bc55ef8cef24eb3aca6174143c281b8b214ca2beda51f5e04a","cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","db3435f3525cd785bf21ec6769bf8da7e8a776be1a99e2e7efb5f244a2ef5fee","c3b170c45fc031db31f782e612adf7314b167e60439d304b49e704010e7bafe5","40383ebef22b943d503c6ce2cb2e060282936b952a01bea5f9f493d5fb487cc7","4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","3a84b7cb891141824bd00ef8a50b6a44596aded4075da937f180c90e362fe5f6","13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","33203609eba548914dc83ddf6cadbc0bcb6e8ef89f6d648ca0908ae887f9fcc5","0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","9f0a92164925aa37d4a5d9dd3e0134cff8177208dba55fd2310cd74beea40ee2","8bfdb79bf1a9d435ec48d9372dc93291161f152c0865b81fc0b2694aedb4578d","2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","d32275be3546f252e3ad33976caf8c5e842c09cb87d468cb40d5f4cf092d1acc","4a0c3504813a3289f7fb1115db13967c8e004aa8e4f8a9021b95285502221bd1",{"version":"e7be367719c613d580d4b27fdf8fe64c9736f48217f4b322c0d63b2971460918","affectsGlobalScope":true},"3d77c73be94570813f8cadd1f05ebc3dc5e2e4fdefe4d340ca20cd018724ee36",{"version":"392eadc2af403dd10b4debfbc655c089a7fa6a9750caeb770cfb30051e55e848","affectsGlobalScope":true},"62f1c00d3d246e0e3cf0224f91e122d560428ec1ccc36bb51d4574a84f1dbad0","53f0960fdcc53d097918adfd8861ffbe0db989c56ffc16c052197bf115da5ed6",{"version":"662163e5327f260b23ca0a1a1ad8a74078aabb587c904fcb5ef518986987eaff","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb",{"version":"c48c503c6b3f63baf18257e9a87559b5602a4e960107c762586d2a6a62b64a18","affectsGlobalScope":true},"b0c0d1d13be149f790a75b381b413490f98558649428bb916fd2d71a3f47a134","3c884d9d9ec454bdf0d5a0b8465bf8297d2caa4d853851d92cc417ac6f30b969","0364f8bb461d6e84252412d4e5590feda4eb582f77d47f7a024a7a9ff105dfdc","5433f7f77cd1fd53f45bd82445a4e437b2f6a72a32070e907530a4fea56c30c8","d0ca5d7df114035258a9d01165be309371fcccf0cccd9d57b1453204686d1ed0",{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true},{"version":"9a30b7fefd7f8abbca4828d481c61c18e40fe5ff107e113b1c1fcd2c8dcf2743","affectsGlobalScope":true},"173b6275a81ebdb283b180654890f46516c21199734fed01a773b1c168b8c45c","304f66274aa8119e8d65a49b1cff84cbf803def6afe1b2cc987386e9a9890e22","1b9adafe8a7fefaeaf9099a0e06f602903f6268438147b843a33a5233ac71745","98273274f2dbb79b0b2009b20f74eca4a7146a3447c912d580cd5d2d94a7ae30","c933f7ba4b201c98b14275fd11a14abb950178afd2074703250fe3654fc10cd2","2eaa31492906bc8525aff3c3ec2236e22d90b0dfeee77089f196cd0adf0b3e3b",{"version":"ea455cc68871b049bcecd9f56d4cf27b852d6dafd5e3b54468ca87cc11604e4d","affectsGlobalScope":true},"8f5814f29dbaf8bacd1764aebdf1c8a6eb86381f6a188ddbac0fcbaab855ce52","a63d03de72adfb91777784015bd3b4125abd2f5ef867fc5a13920b5649e8f52b","d20e003f3d518a7c1f749dbe27c6ab5e3be7b3c905a48361b04a9557de4a6900",{"version":"1d4d78c8b23c9ddaaaa49485e6adc2ec01086dfe5d8d4d36ca4cdc98d2f7e74a","affectsGlobalScope":true},{"version":"44fc16356b81c0463cc7d7b2b35dcf324d8144136f5bc5ce73ced86f2b3475b5","affectsGlobalScope":true},"575fb200043b11b464db8e42cc64379c5fd322b6d787638e005b5ee98a64486d","6de2f225d942562733e231a695534b30039bdf1875b377bb7255881f0df8ede8","56249fd3ef1f6b90888e606f4ea648c43978ef43a7263aafad64f8d83cd3b8aa","139ad1dc93a503da85b7a0d5f615bddbae61ad796bc68fedd049150db67a1e26","7b166975fdbd3b37afb64707b98bca88e46577bbc6c59871f9383a7df2daacd1","9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","81505c54d7cad0009352eaa21bd923ab7cdee7ec3405357a54d9a5da033a2084","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633","3c1f19c7abcda6b3a4cf9438a15c7307a080bd3b51dfd56b198d9f86baf19447","2ee1645e0df9d84467cfe1d67b0ad3003c2f387de55874d565094464ee6f2927",{"version":"7da97d603bf3dd0000f56467c56cb6efaf5f94692980474925fae6c33412b12a","affectsGlobalScope":true},{"version":"9cf780e96b687e4bdfd1907ed26a688c18b89797490a00598fa8b8ab683335dd","affectsGlobalScope":true},"98e00f3613402504bc2a2c9a621800ab48e0a463d1eed062208a4ae98ad8f84c","9ae88ce9f73446c24b2d2452e993b676da1b31fca5ceb7276e7f36279f693ed1","e49d7625faff2a7842e4e7b9b197f972633fca685afcf6b4403400c97d087c36","b82c38abc53922b1b3670c3af6f333c21b735722a8f156e7d357a2da7c53a0a0",{"version":"b423f53647708043299ded4daa68d95c967a2ac30aa1437adc4442129d7d0a6c","affectsGlobalScope":true},{"version":"7245af181218216bacb01fbdf51095617a51661f20d77178c69a377e16fb69ed","affectsGlobalScope":true},"4f0fc7b7f54422bd97cfaf558ddb4bca86893839367b746a8f86b60ac7619673","4cdd8b6b51599180a387cc7c1c50f49eca5ce06595d781638fd0216520d98246","d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c",{"version":"8704423bf338bff381ebc951ed819935d0252d90cd6de7dffe5b0a5debb65d07","affectsGlobalScope":true},"7c6929fd7cbf38499b6a600b91c3b603d1d78395046dc3499b2b92d01418b94b",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"a42be67ed1ddaec743582f41fc219db96a1b69719fccac6d1464321178d610fc"],"root":[[51,63],[66,68],176,[220,232]],"options":{"composite":true,"emitDecoratorMetadata":true,"esModuleInterop":true,"experimentalDecorators":true,"module":1,"outDir":"./","skipLibCheck":true,"strict":true,"strictPropertyInitialization":false,"target":8},"fileIdsList":[[233],[268],[269,274,303],[270,275,281,282,289,300,311],[270,271,281,289],[272,312],[273,274,282,290],[274,300,308],[275,277,281,289],[268,276],[277,278],[281],[279,281],[268,281],[281,282,283,300,311],[281,282,283,296,300,303],[266,269,316],[277,281,284,289,300,311],[281,282,284,285,289,300,308,311],[284,286,300,308,311],[233,234,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318],[281,287],[288,311,316],[277,281,289,300],[290],[291],[268,292],[289,290,293,310,316],[294],[295],[281,296,297],[296,298,312,314],[269,281,300,301,302,303],[269,300,302],[300,301],[303],[304],[268,300],[281,306,307],[306,307],[274,289,300,308],[309],[289,310],[269,284,295,311],[274,312],[300,313],[288,314],[315],[269,274,281,283,292,300,311,314,316],[300,317],[177,180,182,183,184,185,189],[179,180,181,182,185,186,188,213],[189],[178,189,201],[179,180],[179,180,181,189],[180,189],[180,185,188,189],[188,214],[179,180,181,182,185,186,187,189],[177,189],[188],[177,178,183,187,189,190,191,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211],[212],[178,189,196],[188,189,197,198,200],[189,195],[177,183,189,190,191,192,193,194,196,197],[177,189,193],[177,183,189,198],[187,189,199],[215],[216,217,218],[212,214],[86],[86,89,101],[86,88],[86,89,99,100,102],[86,89],[101],[69,82],[72,80],[82],[81],[75,82,114,121],[74],[72,75,82,113,114,122],[69,74,82,115,116,120],[71,72,74,80,82,97,126],[122,123],[73,80,84,93,94,97,104,105,108,110,112,124,125,126,128,129,130,131,132,133,134,135,137,138,139,140,145,147,149,150,151,152,156,157,158,159,160,161,162,163,164,165,166,168,170,171,174],[71,72,73,80,83,93,94,97,105,108,113,122,124,125,126,133,135,138,144,145,146],[72,80,82,97,122,124,151],[71,72,73,84,93,94,104,105,108,125,133,138,139,140,172],[71,72,73,80,93,97,125,133,138,139,140],[83,94,105,139,145,158,172,173],[80,93,94,138,145],[72,80,97,124,126,149,151,156],[124,126,147,150],[72,76,80,97,126,142,149,152,153],[72,80,97,126,142,144,149,150,151,152],[97,142,148,152,153,154,155],[80,97,124,126,147],[145],[73,80,94,145],[71,72,73,80,93,135,138,147],[72,80,97,126,145,147],[87,97,147],[142,144,147,149],[80,97,105,124,147,148,149,151,153],[70,71,72,73,80,93,94,95,97,104,105,108,126,143,144,147],[70,80,85,86,94,97,108],[73,95,108],[86,99,103,104,105],[70,71,72,73,80,83,93,94,104,105,108],[69,70,72],[72,94,126],[87,90,108],[101,167],[72,79,80,97],[77,94,101,110,111],[71,77,94,101,110,112,128],[72,79,84,127,128],[127],[71,72,73,79,80,97,142,165],[72,79,80,93,94],[71,80,94,96],[69,70,71],[71,72,76,77,94,109],[70,71,72,76],[71,72,77,82,101],[71,72,76],[71,72,76,77,80,126,127,136],[71,72,77],[70,72,76],[70,71,72,85],[70,71,72,73,80,94,96,121,124,125],[71,72,80,125,133],[72,80,96,164],[70,71,72,73,80,83,93,133,139],[72,80,96],[80,83,93,94],[72,94,125,133],[71,72,73,84,87,91,92,94],[71,72,78,84],[71,72,73,80],[71,80,84,94,95],[72,73,76,80,82,83],[72],[73,80,83,84,93],[72,93],[72,73,76,83,94],[70,71,72,79,85],[75,142,169],[69,101,116,119],[81,82,83],[69,81,115],[82,116,117,118],[81,116,120,141,142],[122,142],[69,116,119,120,142],[75,141],[70,71,72,75,85,86,90,91,98,99,106,107],[243,247,311],[243,300,311],[238],[240,243,308,311],[289,308],[319],[238,319],[240,243,289,311],[235,236,239,242,269,281,300,311],[235,241],[239,243,269,303,311,319],[269,319],[259,269,319],[237,238,319],[243],[237,238,239,240,241,242,243,244,245,247,248,249,250,251,252,253,254,255,256,257,258,260,261,262,263,264,265],[243,250,251],[241,243,251,252],[242],[235,238,243],[243,247,251,252],[247],[241,243,246,311],[235,240,241,243,247,250],[269,300],[238,243,259,269,316,319],[54,55,61,62],[51,52,53],[55,56,57],[56,57,58,59,60],[55],[58],[63,231],[54,55,61,62,64,65,66],[68,175,176,219],[175],[68,176,220,221],[68,219],[66,67,222,228,230],[63,67],[53,175],[62,175],[63,175],[175,223],[223,224,225,226,227],[229],[55,175]],"referencedMaplatestChangedDtsFile":"./src/index.d.ts"},"version":"5.5.3"}
```

Contents of dist/lib/ts/src/index.js:
```
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./cloud"), exports);
__exportStar(require("./mina"), exports);

```

Contents of dist/lib/ts/src/index.d.ts:
```
export * from "./cloud";
export * from "./mina";

```

Contents of dist/lib/ts/src/mina/index.js:
```
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./api/api"), exports);
__exportStar(require("./encryption"), exports);
__exportStar(require("./utils"), exports);
__exportStar(require("./local/local"), exports);
__exportStar(require("./verification"), exports);

```

Contents of dist/lib/ts/src/mina/index.d.ts:
```
export * from "./api/api";
export * from "./encryption";
export * from "./utils";
export * from "./local/local";
export * from "./verification";

```

Contents of dist/lib/ts/src/mina/encryption/connections.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NATS_SERVER = void 0;
exports.NATS_SERVER = "nats.socialcap.dev:4222";

```

Contents of dist/lib/ts/src/mina/encryption/client.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NATSClient = NATSClient;
exports.listen = listen;
const o1js_1 = require("o1js");
const nats_1 = require("nats");
const o1js_2 = require("o1js");
const encryption_1 = require("./encryption");
const connections_1 = require("./connections");
async function NATSClient(callme) {
    // create some client address, this will be done by
    // the web API BEFORE calling a worker
    const secret = o1js_1.PrivateKey.random();
    let address = secret.toPublicKey().toBase58();
    console.log("Client address ", address);
    // now subscribe and listen in this Address
    // we use the 'zkcw' prefix for zkCloudWorkers subscriptions
    await listen(`zkcw:${address}`, callme);
    return {
        address: address,
        secret: secret.toBase58(),
        callme: callme,
    };
}
async function listen(subject, callme) {
    // Create a JSON codec for encoding and decoding messages
    const codec = (0, nats_1.JSONCodec)();
    const connection = await (0, nats_1.connect)({ servers: connections_1.NATS_SERVER });
    // Subscribe to the subject
    const subscription = connection.subscribe(subject);
    console.log(`Subscribed to subject ${subject}`);
    // Process messages received on the subscribed subject
    (async () => {
        // Error decoding message:  Error: Could not encrypt message={}
        // Error: Poseidon.Sponge(): bindings are not initialized, try calling `await initializeBindings()` first.
        // This shouldn't have happened and indicates an internal bug.
        await (0, o1js_2.initializeBindings)();
        for await (const msg of subscription) {
            try {
                const data = codec.decode(msg.data);
                //console.log(`Received message on subject ${subject}:`, data);
                // Perform processing logic here
                const { post, params } = data;
                // console.log(`Post: `, post, params);
                switch (post) {
                    case "options":
                        {
                            // the workers announces it is ready
                            // and we receive the worker's publicKey
                            let workerKey = params.key || "";
                            console.log("\nReceived 'options' message from worker");
                            console.log("Worker publicKey: ", workerKey);
                            let options = callme.onOptions(params);
                            console.log("options:", options);
                            // we will use its key to encrypt the message
                            const encryptedOptions = encryption_1.CipherText.encrypt(JSON.stringify(options), workerKey);
                            console.log("Encrypted options: ", encryptedOptions);
                            // we reply with the command we want the worker to execute
                            // and with the encrypted payload
                            msg.respond(codec.encode({
                                success: true,
                                data: {
                                    command: "options",
                                    encrypted: encryptedOptions,
                                },
                                error: undefined,
                            }));
                        }
                        break;
                    case "ready":
                        {
                            // the workers announces it is ready
                            // and we receive the worker's publicKey
                            let workerKey = params.key || "";
                            console.log("\nReceived 'ready' message from worker");
                            console.log("Worker publicKey: ", workerKey);
                            let payload = callme.onReady(params);
                            console.log("payload:", payload);
                            // we will use its key to encrypt the message
                            const encryptedPayload = encryption_1.CipherText.encrypt(JSON.stringify(payload), workerKey);
                            console.log("Encrypted payload: ", encryptedPayload);
                            // we reply with the command we want the worker to execute
                            // and with the encrypted payload
                            msg.respond(codec.encode({
                                success: true,
                                data: {
                                    command: "execute",
                                    encrypted: encryptedPayload,
                                },
                                error: undefined,
                            }));
                        }
                        break;
                    case "done":
                        {
                            let result = params.result || "";
                            console.log("\nReceived 'done' message from worker");
                            let done = callme.onDone(params);
                            console.log("done: ", done);
                            msg.respond(codec.encode({
                                success: true,
                                data: {
                                    command: "close",
                                    status: JSON.stringify(done),
                                },
                                error: undefined,
                            }));
                            // we want to insure that messages that are in flight
                            // get processed, so we are going to drain the
                            // connection. Drain is the same as close, but makes
                            // sure that all messages in flight get seen
                            // by the iterator. After calling drain on the connection
                            // the connection closes.
                            setTimeout(async () => {
                                await connection.drain();
                            }, 1000);
                        }
                        break;
                }
            }
            catch (err) {
                console.error("Error decoding message: ", err);
            }
        }
    })();
}
/*
async function main(args: string[]) {
  const nc = await connect({ servers: NATS_SERVER });

  // create some client address, this will be done by
  // the web API when calling a worker
  const clientSecret = PrivateKey.random();
  let clientAddress = clientSecret.toPublicKey().toBase58();
  console.log("Client address ", clientAddress);
  
  clientAddress = "B62qrYPDY555koJFAdNaUyw21WCNUgie9bmsBs2gCh6DSdhQmuN4qu6";
  
  // now subscribe and listen in this Address
  listen(nc, `zkcw:${clientAddress}`);

  // we want to insure that messages that are in flight
  // get processed, so we are going to drain the
  // connection. Drain is the same as close, but makes
  // sure that all messages in flight get seen
  // by the iterator. After calling drain on the connection
  // the connection closes.
  //await nc.drain();
}

main(process.argv.slice(2)).catch((error) => {
  console.error(error);
});
*/

```

Contents of dist/lib/ts/src/mina/encryption/connections.d.ts:
```
export declare const NATS_SERVER = "nats.socialcap.dev:4222";

```

Contents of dist/lib/ts/src/mina/encryption/messages.d.ts:
```
export declare function postOptionsMessage(clientAddress: string, workerAddress: string): Promise<any>;
export declare function postReadyMessage(clientAddress: string, workerAddress: string): Promise<any>;
export declare function postDoneMessage(clientAddress: string, encrypted: string): Promise<any>;

```

Contents of dist/lib/ts/src/mina/encryption/index.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postOptionsMessage = exports.postDoneMessage = exports.postReadyMessage = exports.listen = exports.NATSClient = exports.CipherText = exports.NATS_SERVER = void 0;
var connections_1 = require("./connections");
Object.defineProperty(exports, "NATS_SERVER", { enumerable: true, get: function () { return connections_1.NATS_SERVER; } });
var encryption_1 = require("./encryption");
Object.defineProperty(exports, "CipherText", { enumerable: true, get: function () { return encryption_1.CipherText; } });
var client_1 = require("./client");
Object.defineProperty(exports, "NATSClient", { enumerable: true, get: function () { return client_1.NATSClient; } });
Object.defineProperty(exports, "listen", { enumerable: true, get: function () { return client_1.listen; } });
var messages_1 = require("./messages");
Object.defineProperty(exports, "postReadyMessage", { enumerable: true, get: function () { return messages_1.postReadyMessage; } });
Object.defineProperty(exports, "postDoneMessage", { enumerable: true, get: function () { return messages_1.postDoneMessage; } });
Object.defineProperty(exports, "postOptionsMessage", { enumerable: true, get: function () { return messages_1.postOptionsMessage; } });

```

Contents of dist/lib/ts/src/mina/encryption/encryption.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CipherText = void 0;
const o1js_1 = require("o1js");
class CipherText {
    static stringify(cipherText) {
        return JSON.stringify(cipherText);
    }
    static parse(jsonStr) {
        let obj = JSON.parse(jsonStr);
        return {
            publicKey: new o1js_1.Group(obj.publicKey),
            cipherText: (obj.cipherText || []).map((t) => (0, o1js_1.Field)(t)),
        };
    }
    static encrypt(message, publicId) {
        try {
            let fields = o1js_1.Encoding.stringToFields(message);
            let encripted = o1js_1.Encryption.encrypt(fields, o1js_1.PublicKey.fromBase58(publicId));
            return CipherText.stringify(encripted);
        }
        catch (err) {
            throw Error(`Could not encrypt message='${message}' using key='${publicId}'.` +
                ` Error ${err}`);
        }
    }
    static decrypt(cipherText, privateKey) {
        try {
            let fields = o1js_1.Encryption.decrypt(CipherText.parse(cipherText), o1js_1.PrivateKey.fromBase58(privateKey));
            let decrypted = o1js_1.Encoding.stringFromFields(fields);
            return decrypted;
        }
        catch (err) {
            throw Error(`Could not decrypt cipher='${cipherText}'.` + ` Error ${err}`);
        }
    }
    static async initialize() {
        await (0, o1js_1.initializeBindings)();
    }
}
exports.CipherText = CipherText;

```

Contents of dist/lib/ts/src/mina/encryption/encryption.d.ts:
```
import { Field, Group } from "o1js";
export { CipherText };
interface CipherTextObject {
    cipherText: Field[];
    publicKey: Group;
}
declare class CipherText {
    static stringify(cipherText: CipherTextObject): string;
    static parse(jsonStr: string): CipherTextObject;
    static encrypt(message: string, publicId: string): string;
    static decrypt(cipherText: string, privateKey: string): string;
    static initialize(): Promise<void>;
}

```

Contents of dist/lib/ts/src/mina/encryption/index.d.ts:
```
export { NATS_SERVER } from "./connections";
export { CipherText } from "./encryption";
export { NATSClient, listen } from "./client";
export { postReadyMessage, postDoneMessage, postOptionsMessage, } from "./messages";

```

Contents of dist/lib/ts/src/mina/encryption/client.d.ts:
```
export interface INATSClient {
    address: string;
    secret: string;
    callme: {
        onOptions: (params: any) => void;
        onReady: (params: any) => void;
        onDone: (params: any) => void;
    };
}
export declare function NATSClient(callme: {
    onOptions: (params: any) => void;
    onReady: (params: any) => void;
    onDone: (params: any) => void;
}): Promise<INATSClient>;
export declare function listen(subject: string, callme: {
    onOptions: (params: any) => void;
    onReady: (params: any) => void;
    onDone: (params: any) => void;
}): Promise<void>;

```

Contents of dist/lib/ts/src/mina/encryption/messages.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postOptionsMessage = postOptionsMessage;
exports.postReadyMessage = postReadyMessage;
exports.postDoneMessage = postDoneMessage;
const nats_1 = require("nats");
const connections_1 = require("./connections");
const codec = (0, nats_1.JSONCodec)();
async function postOptionsMessage(clientAddress, workerAddress) {
    // connect to the NATS server and send a 'ready' request
    const nc = await (0, nats_1.connect)({ servers: connections_1.NATS_SERVER });
    const msg = await nc.request(`zkcw:${clientAddress}`, codec.encode({
        "post": "options",
        "params": { "key": workerAddress }
    }));
    const response = codec.decode(msg.data);
    console.log("Response: ", response);
    // disconect and clean all pendings
    await nc.drain();
    return response;
}
;
async function postReadyMessage(clientAddress, workerAddress) {
    // connect to the NATS server and send a 'ready' request
    const nc = await (0, nats_1.connect)({ servers: connections_1.NATS_SERVER });
    const msg = await nc.request(`zkcw:${clientAddress}`, codec.encode({
        "post": "ready",
        "params": { "key": workerAddress }
    }));
    const response = codec.decode(msg.data);
    console.log("Response: ", response);
    // disconect and clean all pendings
    await nc.drain();
    return response;
}
;
async function postDoneMessage(clientAddress, encrypted) {
    // connect to the NATS server and send a 'ready' request
    const nc = await (0, nats_1.connect)({ servers: connections_1.NATS_SERVER });
    const msg = await nc.request(`zkcw:${clientAddress}`, codec.encode({
        "post": "done",
        "params": { "result": encrypted }
    }));
    const response = codec.decode(msg.data);
    console.log("Response: ", response);
    // disconect and clean all pendings
    await nc.drain();
    return response;
}
;

```

Contents of dist/lib/ts/src/mina/utils/fee.d.ts:
```
import { UInt64 } from "o1js";
/**
 * Calculate the fee for a transaction
 * @returns the fee for a transaction
 */
export declare function fee(): Promise<UInt64>;

```

Contents of dist/lib/ts/src/mina/utils/fee.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fee = fee;
const o1js_1 = require("o1js");
const config_1 = __importDefault(require("../../cloud/config"));
/**
 * Calculate the fee for a transaction
 * @returns the fee for a transaction
 */
async function fee() {
    //TODO: update after mainnet launch and resolution of the issue https://github.com/o1-labs/o1js/issues/1626
    return o1js_1.UInt64.fromJSON(config_1.default.MINAFEE);
}

```

Contents of dist/lib/ts/src/mina/utils/mina.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentNetwork = void 0;
exports.initBlockchain = initBlockchain;
exports.accountBalance = accountBalance;
exports.accountBalanceMina = accountBalanceMina;
exports.getNetworkIdHash = getNetworkIdHash;
exports.getCurrentNetwork = getCurrentNetwork;
exports.getDeployer = getDeployer;
const o1js_1 = require("o1js");
const cloud_1 = require("../../cloud");
let currentNetwork = undefined;
exports.currentNetwork = currentNetwork;
function getNetworkIdHash() {
    if (currentNetwork === undefined) {
        throw new Error("Network is not initialized");
    }
    return currentNetwork.networkIdHash;
}
function getCurrentNetwork() {
    if (currentNetwork === undefined) {
        throw new Error("Network is not initialized");
    }
    return currentNetwork;
}
function getDeployer() {
    if (currentNetwork === undefined) {
        throw new Error("Network is not initialized");
    }
    if (currentNetwork.keys.length < 1)
        return undefined;
    return currentNetwork.keys[0];
}
/**
 * Initializes the Mina blockchain network
 * Due to the limitations of the Mina SDK, only one network can be initialized at a time
 * This function should be called before any other Mina functions
 * @param instance the blockchain instance to initialize
 * @param deployersNumber the number of deployers to use for the network (only for local and lightnet networks)
 * @returns the Mina network instance
 */
async function initBlockchain(instance, deployersNumber = 0) {
    /*
    if (instance === "mainnet") {
      throw new Error("Mainnet is not supported yet by zkApps");
    }
    */
    if (currentNetwork !== undefined) {
        if (currentNetwork?.network.chainId === instance) {
            return currentNetwork;
        }
        else {
            throw new Error(`Network is already initialized to different chain ${currentNetwork.network.chainId}, cannot initialize to ${instance}`);
        }
    }
    const networkIdHash = o1js_1.CircuitString.fromString(instance).hash();
    // await used for compatibility with future versions of o1js
    if (instance === "local") {
        const local = await o1js_1.Mina.LocalBlockchain({
            proofsEnabled: true,
        });
        o1js_1.Mina.setActiveInstance(local);
        if (deployersNumber > local.testAccounts.length)
            throw new Error("Not enough test accounts");
        exports.currentNetwork = currentNetwork = {
            keys: local.testAccounts,
            network: cloud_1.Local,
            networkIdHash,
        };
        return currentNetwork;
    }
    const network = cloud_1.networks.find((n) => n.chainId === instance);
    if (network === undefined) {
        throw new Error("Unknown network");
    }
    const networkInstance = o1js_1.Mina.Network({
        mina: network.mina,
        archive: network.archive,
        lightnetAccountManager: network.accountManager,
        networkId: instance === "mainnet" ? "mainnet" : "testnet",
    });
    o1js_1.Mina.setActiveInstance(networkInstance);
    const keys = [];
    if (deployersNumber > 0) {
        if (instance === "lightnet") {
            for (let i = 0; i < deployersNumber; i++) {
                const keyPair = await o1js_1.Lightnet.acquireKeyPair();
                const key = o1js_1.Mina.TestPublicKey(keyPair.privateKey);
                keys.push(key);
            }
        }
        else {
            const deployers = process.env.DEPLOYERS;
            if (deployers === undefined ||
                Array.isArray(deployers) === false ||
                deployers.length < deployersNumber)
                throw new Error("Deployers are not set");
            for (let i = 0; i < deployersNumber; i++) {
                const privateKey = o1js_1.PrivateKey.fromBase58(deployers[i]);
                const key = o1js_1.Mina.TestPublicKey(privateKey);
                keys.push(key);
            }
        }
    }
    exports.currentNetwork = currentNetwork = {
        keys,
        network,
        networkIdHash,
    };
    return currentNetwork;
}
/**
 * Fetches the account balance for a given public key
 * @param address the public key
 * @returns the account balance
 */
async function accountBalance(address) {
    await (0, o1js_1.fetchAccount)({ publicKey: address });
    if (o1js_1.Mina.hasAccount(address))
        return o1js_1.Mina.getBalance(address);
    else
        return o1js_1.UInt64.from(0);
}
/**
 * Fetches the account balance for a given public key and returns it in Mina
 * @param address the public key
 * @returns the account balance in MINA
 */
async function accountBalanceMina(address) {
    return Number((await accountBalance(address)).toBigInt()) / 1e9;
}

```

Contents of dist/lib/ts/src/mina/utils/fetch.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchMinaAccount = fetchMinaAccount;
exports.fetchMinaActions = fetchMinaActions;
exports.checkMinaZkappTransaction = checkMinaZkappTransaction;
const o1js_1 = require("o1js");
const cloud_1 = require("../../cloud");
/**
 * Fetches the Mina account for a given public key with error handling
 * @param params the parameters for fetching the account
 * @param params.publicKey the public key of the account
 * @param params.tokenId the token id of the account
 * @param params.force whether to force the fetch - use it only if you are sure the account exists
 * @returns the account object
 */
async function fetchMinaAccount(params) {
    const { publicKey, tokenId, force } = params;
    const timeout = 1000 * 60 * 2; // 2 minutes
    const startTime = Date.now();
    let result = { account: undefined };
    while (Date.now() - startTime < timeout) {
        try {
            const result = await (0, o1js_1.fetchAccount)({
                publicKey,
                tokenId,
            });
            return result;
        }
        catch (error) {
            if (force === true)
                console.log("Error in fetchMinaAccount:", {
                    error,
                    publicKey: typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
                    tokenId: tokenId?.toString(),
                    force,
                });
            else {
                console.log("fetchMinaAccount error", {
                    error,
                    publicKey: typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
                    tokenId: tokenId?.toString(),
                    force,
                });
                return result;
            }
        }
        await (0, cloud_1.sleep)(1000 * 5);
    }
    if (force === true)
        throw new Error(`fetchMinaAccount timeout
      ${{
            publicKey: typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
            tokenId: tokenId?.toString(),
            force,
        }}`);
    else
        console.log("fetchMinaAccount timeout", typeof publicKey === "string" ? publicKey : publicKey.toBase58(), tokenId?.toString(), force);
    return result;
}
/**
 * Fetches the Mina actions for a given public key with error handling
 * @param publicKey the public key of the contract
 * @param fromActionState the starting action state
 * @param endActionState the ending action state
 * @returns the actions array
 */
async function fetchMinaActions(publicKey, fromActionState, endActionState) {
    const timeout = 1000 * 60 * 600; // 10 hours
    const startTime = Date.now();
    while (Date.now() - startTime < timeout) {
        try {
            let actions = await o1js_1.Mina.fetchActions(publicKey, {
                fromActionState,
                endActionState,
            });
            if (Array.isArray(actions))
                return actions;
            else
                console.log("Cannot fetch actions - wrong format");
        }
        catch (error) {
            console.log("Error in fetchMinaActions", error.toString().substring(0, 300));
        }
        await (0, cloud_1.sleep)(1000 * 60 * 2);
    }
    console.log("Timeout in fetchMinaActions");
    return undefined;
}
/**
 * Fetches the Mina transaction for a given hash with error handling
 * @param hash the hash of the transaction
 * @returns the transaction object
 */
async function checkMinaZkappTransaction(hash) {
    try {
        const result = await (0, o1js_1.checkZkappTransaction)(hash);
        return result;
    }
    catch (error) {
        console.error("Error in checkZkappTransaction:", error);
        return { success: false };
    }
}

```

Contents of dist/lib/ts/src/mina/utils/fields.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeFields = serializeFields;
exports.deserializeFields = deserializeFields;
const o1js_1 = require("o1js");
const base64_1 = require("./base64");
/**
 * Serialize fields to a string using base64 URL-friendly encoding
 * @param fields the fields array to serialize
 * @returns the serialized string
 */
function serializeFields(fields) {
    const hash = o1js_1.Poseidon.hash(fields);
    const value = [(0, o1js_1.Field)(fields.length), hash, ...fields];
    //return value.map((f) => f.toBigInt().toString(36)).join(".");
    return value.map((f) => (0, base64_1.fieldToBase64)(f)).join(".");
}
/**
 * Deserialize fields from a string using base64 URL-friendly encoding
 * @param s the string to deserialize
 * @returns the deserialized fields array
 */
function deserializeFields(s) {
    try {
        //const value = s.split(".").map((n) => Field(BigInt(convert(n, 36))));
        const value = s.split(".").map((n) => (0, base64_1.fieldFromBase64)(n));
        const length = value[0];
        if ((0, o1js_1.Field)(value.length - 2)
            .equals(length)
            .toBoolean() === false)
            throw new Error("deserializeFields: invalid length");
        const hash = o1js_1.Poseidon.hash(value.slice(2));
        if (hash.equals(value[1]).toBoolean()) {
            return value.slice(2);
        }
        else
            throw new Error("deserializeFields: invalid hash: data mismatch");
    }
    catch (e) {
        throw new Error(`deserializeFields: invalid string: ${s}: ${e}`);
    }
}

```

Contents of dist/lib/ts/src/mina/utils/index.js:
```
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./base64"), exports);
__exportStar(require("./fetch"), exports);
__exportStar(require("./fields"), exports);
__exportStar(require("./fee"), exports);
__exportStar(require("./mina"), exports);

```

Contents of dist/lib/ts/src/mina/utils/base64.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fieldToBase56 = fieldToBase56;
exports.fieldFromBase56 = fieldFromBase56;
exports.fieldToBase64 = fieldToBase64;
exports.fieldFromBase64 = fieldFromBase64;
const o1js_1 = require("o1js");
const base64_1 = require("../../cloud/utils/base64");
// URL friendly base64 encoding
const TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
function fieldToBase56(field) {
    const digits = (0, base64_1.toBase)(field.toBigInt(), 56n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
function fieldFromBase56(str) {
    const base56Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = (0, base64_1.fromBase)(base56Digits, 56n);
    return (0, o1js_1.Field)(x);
}
function fieldToBase64(field) {
    const digits = (0, base64_1.toBase)(field.toBigInt(), 64n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
function fieldFromBase64(str) {
    const base64Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = (0, base64_1.fromBase)(base64Digits, 64n);
    return (0, o1js_1.Field)(x);
}

```

Contents of dist/lib/ts/src/mina/utils/fields.d.ts:
```
import { Field } from "o1js";
/**
 * Serialize fields to a string using base64 URL-friendly encoding
 * @param fields the fields array to serialize
 * @returns the serialized string
 */
export declare function serializeFields(fields: Field[]): string;
/**
 * Deserialize fields from a string using base64 URL-friendly encoding
 * @param s the string to deserialize
 * @returns the deserialized fields array
 */
export declare function deserializeFields(s: string): Field[];

```

Contents of dist/lib/ts/src/mina/utils/fetch.d.ts:
```
import { PublicKey, Field } from "o1js";
/**
 * Fetches the Mina account for a given public key with error handling
 * @param params the parameters for fetching the account
 * @param params.publicKey the public key of the account
 * @param params.tokenId the token id of the account
 * @param params.force whether to force the fetch - use it only if you are sure the account exists
 * @returns the account object
 */
export declare function fetchMinaAccount(params: {
    publicKey: string | PublicKey;
    tokenId?: string | Field | undefined;
    force?: boolean;
}): Promise<{
    account: undefined;
} | {
    account: import("o1js/dist/node/bindings/mina-transaction/gen/transaction").Account;
    error: undefined;
}>;
/**
 * Fetches the Mina actions for a given public key with error handling
 * @param publicKey the public key of the contract
 * @param fromActionState the starting action state
 * @param endActionState the ending action state
 * @returns the actions array
 */
export declare function fetchMinaActions(publicKey: PublicKey, fromActionState: Field, endActionState?: Field): Promise<{
    actions: string[][];
    hash: string;
}[] | undefined>;
/**
 * Fetches the Mina transaction for a given hash with error handling
 * @param hash the hash of the transaction
 * @returns the transaction object
 */
export declare function checkMinaZkappTransaction(hash: string): Promise<{
    success: boolean;
    failureReason: string[][][];
} | {
    success: boolean;
    failureReason: null;
} | {
    success: boolean;
}>;

```

Contents of dist/lib/ts/src/mina/utils/mina.d.ts:
```
export { initBlockchain, accountBalance, accountBalanceMina, MinaNetworkInstance, currentNetwork, getNetworkIdHash, getCurrentNetwork, getDeployer, };
import { Mina, PublicKey, UInt64, Field } from "o1js";
import { blockchain, MinaNetwork } from "../../cloud";
/**
 * MinaNetworkInstance is the data structure for a Mina network instance, keeping track of the keys, network, and network ID hash.
 */
interface MinaNetworkInstance {
    /** The keys for the deployers */
    keys: Mina.TestPublicKey[];
    /** The network */
    network: MinaNetwork;
    /** The network ID hash */
    networkIdHash: Field;
}
declare let currentNetwork: MinaNetworkInstance | undefined;
declare function getNetworkIdHash(): Field;
declare function getCurrentNetwork(): MinaNetworkInstance;
declare function getDeployer(): Mina.TestPublicKey | undefined;
/**
 * Initializes the Mina blockchain network
 * Due to the limitations of the Mina SDK, only one network can be initialized at a time
 * This function should be called before any other Mina functions
 * @param instance the blockchain instance to initialize
 * @param deployersNumber the number of deployers to use for the network (only for local and lightnet networks)
 * @returns the Mina network instance
 */
declare function initBlockchain(instance: blockchain, deployersNumber?: number): Promise<MinaNetworkInstance>;
/**
 * Fetches the account balance for a given public key
 * @param address the public key
 * @returns the account balance
 */
declare function accountBalance(address: PublicKey): Promise<UInt64>;
/**
 * Fetches the account balance for a given public key and returns it in Mina
 * @param address the public key
 * @returns the account balance in MINA
 */
declare function accountBalanceMina(address: PublicKey): Promise<number>;

```

Contents of dist/lib/ts/src/mina/utils/base64.d.ts:
```
import { Field } from "o1js";
export declare function fieldToBase56(field: Field): string;
export declare function fieldFromBase56(str: string): Field;
export declare function fieldToBase64(field: Field): string;
export declare function fieldFromBase64(str: string): Field;

```

Contents of dist/lib/ts/src/mina/utils/index.d.ts:
```
export * from "./base64";
export * from "./fetch";
export * from "./fields";
export * from "./fee";
export * from "./mina";

```

Contents of dist/lib/ts/src/mina/local/local.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorage = exports.LocalCloud = void 0;
const cloud_1 = require("../../cloud");
/**
 * LocalCloud is a cloud that runs on the local machine for testing and development
 * It uses LocalStorage to store jobs, tasks, transactions, and data
 * It uses a localWorker to execute the tasks
 * It can be used to test the cloud functionality without deploying to the cloud
 * @param localWorker the worker to execute the tasks
 */
class LocalCloud extends cloud_1.Cloud {
    /**
     * Constructor for LocalCloud
     * @param params the parameters to create the LocalCloud
     * @param params.job the job data
     * @param params.chain the blockchain to execute the job on, can be any blockchain, not only local
     * @param params.cache the cache folder
     * @param params.stepId the step id
     * @param params.localWorker the worker to execute the tasks
     */
    constructor(params) {
        const { job, chain, cache, stepId, localWorker } = params;
        const { id, jobId, developer, repo, task, userId, args, metadata, taskId } = job;
        super({
            id: id,
            jobId: jobId,
            stepId: stepId ?? "stepId",
            taskId: taskId ?? "taskId",
            cache: cache ?? "./cache",
            developer: developer,
            repo: repo,
            task: task,
            userId: userId,
            args: args,
            metadata: metadata,
            isLocalCloud: true,
            chain,
        });
        this.localWorker = localWorker;
    }
    /**
     * Provides the deployer key pair for testing and development
     * @returns the deployer key pair
     */
    async getDeployer() {
        const privateKey = process.env.DEPLOYER_PRIVATE_KEY;
        const publicKey = process.env.DEPLOYER_PUBLIC_KEY;
        try {
            return privateKey === undefined || publicKey === undefined
                ? undefined
                : {
                    privateKey,
                    publicKey,
                };
        }
        catch (error) {
            console.error(`getDeployer: error getting deployer key pair: ${error}`, error);
            return undefined;
        }
    }
    /**
     * Releases the deployer key pair
     */
    async releaseDeployer(params) {
        console.log("LocalCloud: releaseDeployer", params);
    }
    /**
     * Gets the data by key
     * @param key the key to get the data
     * @returns the data
     */
    async getDataByKey(key) {
        const value = LocalStorage.data[key];
        return value;
    }
    /**
     * Saves the data by key
     * @param key the key to save the data
     * @param value the value to save
     */
    async saveDataByKey(key, value) {
        if (value !== undefined)
            LocalStorage.data[key] = value;
        else
            delete LocalStorage.data[key];
    }
    /**
     * Saves the file
     * @param filename the filename to save
     * @param value the value to save
     */
    async saveFile(filename, value) {
        LocalStorage.files[filename] = value;
        //throw new Error("Method not implemented.");
        //await saveBinaryFile({ data: value, filename });
    }
    /**
     * Loads the file
     * @param filename
     * @returns the file data
     */
    async loadFile(filename) {
        return LocalStorage.files[filename];
        //throw new Error("Method not implemented.");
        //const data = await loadBinaryFile(filename);
        //return data;
    }
    /**
     * Encrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns encrypted data
     */
    async encrypt(params) {
        return JSON.stringify(params);
    }
    /**
     * Decrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns
     */
    async decrypt(params) {
        const { data, context, keyId } = JSON.parse(params.data);
        if (context !== params.context) {
            console.error("decrypt: context mismatch");
            return undefined;
        }
        if (keyId !== params.keyId) {
            console.error("decrypt: keyId mismatch");
            return undefined;
        }
        return data;
    }
    /**
     * Generates an id for local cloud
     * @returns generated unique id
     */
    static generateId(tx = undefined) {
        //const data =
        //  tx ?? JSON.stringify({ time: Date.now(), data: makeString(32) });
        //return stringHash(data);
        return Date.now() + "." + (0, cloud_1.makeString)(32);
    }
    /**
     * Send transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    async sendTransactions(transactions) {
        return await LocalCloud.addTransactions(transactions);
    }
    /**
     * Adds transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    static async addTransactions(transactions) {
        const timeReceived = Date.now();
        const txs = [];
        transactions.forEach((tx) => {
            if (typeof tx === "string") {
                const txId = LocalCloud.generateId(JSON.stringify({ tx, time: timeReceived }));
                const transaction = {
                    txId,
                    transaction: tx,
                    timeReceived,
                    status: "accepted",
                };
                LocalStorage.transactions[txId] = transaction;
                txs.push(transaction);
            }
            else {
                LocalStorage.transactions[tx.txId] = tx;
                txs.push(tx);
            }
        });
        return txs;
    }
    /**
     * Deletes a transaction from the local cloud
     * @param txId the transaction id to delete
     */
    async deleteTransaction(txId) {
        if (LocalStorage.transactions[txId] === undefined)
            throw new Error(`deleteTransaction: Transaction ${txId} not found`);
        delete LocalStorage.transactions[txId];
    }
    async getTransactions() {
        const txs = Object.keys(LocalStorage.transactions).map((txId) => {
            return LocalStorage.transactions[txId];
        });
        return txs;
    }
    /**
     * Publish the transaction metadata in human-readable format
     * @param params
     * @param params.txId the transaction id
     * @param params.metadata the metadata
     */
    async publishTransactionMetadata(params) {
        console.log("publishTransactionMetadata:", params);
    }
    /**
     * Runs the worker in the local cloud
     * @param params the parameters to run the worker
     * @param params.command the command to run
     * @param params.data the data to use
     * @param params.chain the blockchain to execute the job on
     * @param params.localWorker the worker to execute the tasks
     * @returns the job id
     */
    static async run(params) {
        const { command, data, chain, localWorker } = params;
        const { developer, repo, transactions, task, userId, args, metadata } = data;
        const timeCreated = Date.now();
        const jobId = LocalCloud.generateId();
        const job = {
            id: "local",
            jobId,
            developer,
            repo,
            task,
            userId,
            args,
            metadata,
            txNumber: command === "recursiveProof" ? transactions.length : 1,
            timeCreated,
            timeStarted: timeCreated,
            chain,
        };
        const cloud = new LocalCloud({
            job,
            chain,
            localWorker,
        });
        const worker = await localWorker(cloud);
        if (worker === undefined)
            throw new Error("worker is undefined");
        const result = command === "recursiveProof"
            ? await LocalCloud.sequencer({
                worker,
                data,
            })
            : command === "execute"
                ? await worker.execute(transactions)
                : undefined;
        const timeFinished = Date.now();
        if (result !== undefined) {
            LocalStorage.jobEvents[jobId] = {
                jobId,
                jobStatus: "finished",
                eventTime: timeFinished,
                result,
            };
            job.timeFinished = timeFinished;
            job.jobStatus = "finished";
            job.result = result;
        }
        else {
            LocalStorage.jobEvents[jobId] = {
                jobId,
                jobStatus: "failed",
                eventTime: timeFinished,
            };
            job.timeFailed = timeFinished;
            job.jobStatus = "failed";
        }
        job.billedDuration = timeFinished - timeCreated;
        LocalStorage.jobs[jobId] = job;
        return jobId;
    }
    /**
     * Runs the recursive proof in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    async recursiveProof(data) {
        return await LocalCloud.run({
            command: "recursiveProof",
            data: {
                developer: this.developer,
                repo: this.repo,
                transactions: data.transactions,
                task: data.task ?? "recursiveProof",
                userId: data.userId,
                args: data.args,
                metadata: data.metadata,
            },
            chain: this.chain,
            localWorker: this.localWorker,
        });
    }
    /**
     * Executes the task in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    async execute(data) {
        return await LocalCloud.run({
            command: "execute",
            data: {
                developer: this.developer,
                repo: this.repo,
                transactions: data.transactions,
                task: data.task,
                userId: data.userId,
                args: data.args,
                metadata: data.metadata,
            },
            chain: this.chain,
            localWorker: this.localWorker,
        });
    }
    /**
     * Gets the job result
     * @param jobId the job id
     * @returns the job data
     */
    async jobResult(jobId) {
        return LocalStorage.jobs[jobId];
    }
    /**
     * Adds a task to the local cloud
     * @param data the data to use
     * @param data.task the task to execute
     * @param data.startTime the start time for the task
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the task id
     */
    async addTask(data) {
        const taskId = LocalCloud.generateId();
        LocalStorage.tasks[taskId] = {
            ...data,
            id: "local",
            taskId,
            timeCreated: Date.now(),
            developer: this.developer,
            repo: this.repo,
            chain: this.chain,
        };
        return taskId;
    }
    /**
     * Deletes a task from the local cloud
     * @param taskId the task id to delete
     */
    async deleteTask(taskId) {
        if (LocalStorage.tasks[taskId] === undefined)
            throw new Error(`deleteTask: Task ${taskId} not found`);
        delete LocalStorage.tasks[taskId];
    }
    /**
     * Processes the tasks in the local cloud
     */
    async processTasks() {
        await LocalCloud.processLocalTasks({
            developer: this.developer,
            repo: this.repo,
            localWorker: this.localWorker,
            chain: this.chain,
        });
    }
    /**
     * Processes the local tasks
     * @param params the parameters to process the local tasks
     * @param params.developer the developer of the repo
     * @param params.repo the repo
     * @param params.localWorker the worker to execute the tasks
     * @param params.chain the blockchain to execute the job on
     */
    static async processLocalTasks(params) {
        const { developer, repo, localWorker, chain } = params;
        for (const taskId in LocalStorage.tasks) {
            const data = LocalStorage.tasks[taskId];
            const jobId = LocalCloud.generateId();
            const timeCreated = Date.now();
            if (data.startTime !== undefined && data.startTime < timeCreated)
                continue;
            const job = {
                id: "local",
                jobId: jobId,
                taskId: taskId,
                developer,
                repo,
                task: data.task,
                userId: data.userId,
                args: data.args,
                metadata: data.metadata,
                txNumber: 1,
                timeCreated: timeCreated,
            };
            const cloud = new LocalCloud({
                job,
                chain,
                localWorker,
            });
            const worker = await localWorker(cloud);
            const result = await worker.task();
            const timeFinished = Date.now();
            if (result !== undefined) {
                LocalStorage.jobEvents[jobId] = {
                    jobId,
                    jobStatus: "finished",
                    eventTime: timeFinished,
                    result,
                };
                job.timeFinished = timeFinished;
            }
            else {
                LocalStorage.jobEvents[jobId] = {
                    jobId,
                    jobStatus: "failed",
                    eventTime: timeFinished,
                };
                job.timeFailed = timeFinished;
            }
            job.billedDuration = timeFinished - timeCreated;
            LocalStorage.jobs[jobId] = job;
        }
        let count = 0;
        for (const task in LocalStorage.tasks)
            count++;
        return count;
    }
    /**
     * Runs the sequencer in the local cloud
     * @param params the parameters to run the sequencer
     * @param params.worker the worker to execute the tasks
     * @param params.data the data to use
     * @returns the proof
     */
    static async sequencer(params) {
        const { worker, data } = params;
        const { transactions } = data;
        if (transactions.length === 0)
            throw new Error("No transactions to process");
        const proofs = [];
        for (const transaction of transactions) {
            const result = await worker.create(transaction);
            if (result === undefined)
                throw new Error("Failed to create proof");
            proofs.push(result);
        }
        let proof = proofs[0];
        for (let i = 1; i < proofs.length; i++) {
            const result = await worker.merge(proof, proofs[i]);
            if (result === undefined)
                throw new Error("Failed to merge proofs");
            proof = result;
        }
        return proof;
    }
    /**
     * forces the worker to restart
     */
    async forceWorkerRestart() {
        throw new Error("forceWorkerRestart called in LocalCloud");
    }
}
exports.LocalCloud = LocalCloud;
/**
 * LocalStorage is a local storage for the local cloud.
 * It stores jobs, tasks, transactions, and data.
 * It can be used to test the cloud functionality without deploying to the cloud.
 */
class LocalStorage {
    /**
     * Saves the data.
     * @param name The name to save the data under.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static async saveData(name) {
        throw new Error("Method not implemented to keep web compatibility.");
        const data = {
            jobs: LocalStorage.jobs,
            data: LocalStorage.data,
            transactions: LocalStorage.transactions,
            tasks: LocalStorage.tasks,
        };
        const filename = name + ".cloud";
        // await saveFile({ data, filename });
    }
    /**
     * Loads the data.
     * @param name The name to load the data from.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static async loadData(name) {
        throw new Error("Method not implemented to keep web compatibility.");
        const filename = name + ".cloud";
        /*
        const data = await loadFile(filename);
        if (data === undefined) return;
        LocalStorage.jobs = data.jobs;
        LocalStorage.data = data.data;
        LocalStorage.transactions = data.transactions;
        LocalStorage.tasks = data.tasks;
        */
    }
}
exports.LocalStorage = LocalStorage;
/** The jobs */
LocalStorage.jobs = {};
/** The job events */
LocalStorage.jobEvents = {};
/** The data */
LocalStorage.data = {};
/** The files */
LocalStorage.files = {};
/** The transactions */
LocalStorage.transactions = {};
/** The tasks */
LocalStorage.tasks = {};

```

Contents of dist/lib/ts/src/mina/local/local.d.ts:
```
import { blockchain, TransactionMetadata, CloudTransaction, DeployerKeyPair, TaskData, JobData, JobEvent, Cloud, zkCloudWorker } from "../../cloud";
import { ApiCommand } from "../api/api";
/**
 * LocalCloud is a cloud that runs on the local machine for testing and development
 * It uses LocalStorage to store jobs, tasks, transactions, and data
 * It uses a localWorker to execute the tasks
 * It can be used to test the cloud functionality without deploying to the cloud
 * @param localWorker the worker to execute the tasks
 */
export declare class LocalCloud extends Cloud {
    readonly localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
    /**
     * Constructor for LocalCloud
     * @param params the parameters to create the LocalCloud
     * @param params.job the job data
     * @param params.chain the blockchain to execute the job on, can be any blockchain, not only local
     * @param params.cache the cache folder
     * @param params.stepId the step id
     * @param params.localWorker the worker to execute the tasks
     */
    constructor(params: {
        job: JobData;
        chain: blockchain;
        cache?: string;
        stepId?: string;
        localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
    });
    /**
     * Provides the deployer key pair for testing and development
     * @returns the deployer key pair
     */
    getDeployer(): Promise<DeployerKeyPair | undefined>;
    /**
     * Releases the deployer key pair
     */
    releaseDeployer(params: {
        publicKey: string;
        txsHashes: string[];
    }): Promise<void>;
    /**
     * Gets the data by key
     * @param key the key to get the data
     * @returns the data
     */
    getDataByKey(key: string): Promise<string | undefined>;
    /**
     * Saves the data by key
     * @param key the key to save the data
     * @param value the value to save
     */
    saveDataByKey(key: string, value: string | undefined): Promise<void>;
    /**
     * Saves the file
     * @param filename the filename to save
     * @param value the value to save
     */
    saveFile(filename: string, value: Buffer): Promise<void>;
    /**
     * Loads the file
     * @param filename
     * @returns the file data
     */
    loadFile(filename: string): Promise<Buffer | undefined>;
    /**
     * Encrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns encrypted data
     */
    encrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Decrypts the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     * @returns
     */
    decrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Generates an id for local cloud
     * @returns generated unique id
     */
    private static generateId;
    /**
     * Send transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    sendTransactions(transactions: string[]): Promise<CloudTransaction[]>;
    /**
     * Adds transactions to the local cloud
     * @param transactions the transactions to add
     * @returns the transaction ids
     */
    static addTransactions(transactions: string[] | CloudTransaction[]): Promise<CloudTransaction[]>;
    /**
     * Deletes a transaction from the local cloud
     * @param txId the transaction id to delete
     */
    deleteTransaction(txId: string): Promise<void>;
    getTransactions(): Promise<CloudTransaction[]>;
    /**
     * Publish the transaction metadata in human-readable format
     * @param params
     * @param params.txId the transaction id
     * @param params.metadata the metadata
     */
    publishTransactionMetadata(params: {
        txId: string;
        metadata: TransactionMetadata;
    }): Promise<void>;
    /**
     * Runs the worker in the local cloud
     * @param params the parameters to run the worker
     * @param params.command the command to run
     * @param params.data the data to use
     * @param params.chain the blockchain to execute the job on
     * @param params.localWorker the worker to execute the tasks
     * @returns the job id
     */
    static run(params: {
        command: ApiCommand;
        data: {
            developer: string;
            repo: string;
            transactions: string[];
            task: string;
            userId?: string;
            args?: string;
            metadata?: string;
        };
        chain: blockchain;
        localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
    }): Promise<string>;
    /**
     * Runs the recursive proof in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    recursiveProof(data: {
        transactions: string[];
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Executes the task in the local cloud
     * @param data the data to use
     * @param data.transactions the transactions to process
     * @param data.task the task to execute
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the job id
     */
    execute(data: {
        transactions: string[];
        task: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Gets the job result
     * @param jobId the job id
     * @returns the job data
     */
    jobResult(jobId: string): Promise<JobData | undefined>;
    /**
     * Adds a task to the local cloud
     * @param data the data to use
     * @param data.task the task to execute
     * @param data.startTime the start time for the task
     * @param data.userId the user id
     * @param data.args the arguments for the job
     * @param data.metadata the metadata for the job
     * @returns the task id
     */
    addTask(data: {
        task: string;
        startTime?: number;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Deletes a task from the local cloud
     * @param taskId the task id to delete
     */
    deleteTask(taskId: string): Promise<void>;
    /**
     * Processes the tasks in the local cloud
     */
    processTasks(): Promise<void>;
    /**
     * Processes the local tasks
     * @param params the parameters to process the local tasks
     * @param params.developer the developer of the repo
     * @param params.repo the repo
     * @param params.localWorker the worker to execute the tasks
     * @param params.chain the blockchain to execute the job on
     */
    static processLocalTasks(params: {
        developer: string;
        repo: string;
        localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
        chain: blockchain;
    }): Promise<number>;
    /**
     * Runs the sequencer in the local cloud
     * @param params the parameters to run the sequencer
     * @param params.worker the worker to execute the tasks
     * @param params.data the data to use
     * @returns the proof
     */
    static sequencer(params: {
        worker: zkCloudWorker;
        data: {
            developer: string;
            repo: string;
            transactions: string[];
            task?: string;
            userId?: string;
            args?: string;
            metadata?: string;
        };
    }): Promise<string>;
    /**
     * forces the worker to restart
     */
    forceWorkerRestart(): Promise<void>;
}
/**
 * LocalStorage is a local storage for the local cloud.
 * It stores jobs, tasks, transactions, and data.
 * It can be used to test the cloud functionality without deploying to the cloud.
 */
export declare class LocalStorage {
    /** The jobs */
    static jobs: {
        [key: string]: JobData;
    };
    /** The job events */
    static jobEvents: {
        [key: string]: JobEvent;
    };
    /** The data */
    static data: {
        [key: string]: string;
    };
    /** The files */
    static files: {
        [key: string]: Buffer;
    };
    /** The transactions */
    static transactions: {
        [key: string]: CloudTransaction;
    };
    /** The tasks */
    static tasks: {
        [key: string]: TaskData;
    };
    /**
     * Saves the data.
     * @param name The name to save the data under.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static saveData(name: string): Promise<void>;
    /**
     * Loads the data.
     * @param name The name to load the data from.
     * @throws Error Method not implemented to keep web compatibility.
     */
    static loadData(name: string): Promise<void>;
}

```

Contents of dist/lib/ts/src/mina/verification/index.js:
```
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./verification"), exports);

```

Contents of dist/lib/ts/src/mina/verification/verification.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

```

Contents of dist/lib/ts/src/mina/verification/verification.d.ts:
```
import { blockchain } from "../../cloud/networks";
import { SmartContract } from "o1js";
/**
 * VerificationData is a data structure that contains all the information needed to verify a smart contract on a blockchain.
 * contract: The smart contract that needs to be verified.
 * contractDependencies: The smart contracts that need to be compiled before verification.
 * programDependencies: The zk programs that need to be compiled before verification.
 * address: The address of the smart contract on the blockchain.
 * chain: The blockchain on which the smart contract is deployed.
 * image: The logo of the smart contract (public url)
 *
 * Contract, contractDependencies, and programDependencies should be exported from the repo
 */
export interface VerificationData {
    contract: typeof SmartContract;
    contractDependencies?: (typeof SmartContract)[];
    programDependencies?: any[];
    address: string;
    chain: blockchain;
    image?: string;
}

```

Contents of dist/lib/ts/src/mina/verification/index.d.ts:
```
export * from "./verification";

```

Contents of dist/lib/ts/src/mina/api/api.d.ts:
```
import { zkCloudWorker, Cloud } from "../../cloud/worker";
import { blockchain } from "../../cloud/networks";
/**
 * The APICommand type for interacting with the zkCloudWorker
 * @typedef { "recursiveProof" | "execute" | "sendTransactions" | "jobResult" | "deploy" | "getBalance" | "queryBilling" } ApiCommand
 * @property recursiveProof The command for the recursiveProof calculation
 * @property execute The command for the execute function call (sync or async)
 * @property sendTransactions The command for sending transactions to the cloud
 * @property jobResult The command for getting the result of the job
 * @property deploy The command for deploying the code to the cloud, it is recommended use CLI tools for deployment
 * @property getBalance The command for getting the balance of the user's account with zkCloudWorker
 * @property queryBilling The command for getting the billing report of the user's account with zkCloudWorker
 */
export type ApiCommand = "recursiveProof" | "execute" | "sendTransactions" | "jobResult" | "deploy" | "getBalance" | "queryBilling";
/**
 * API class for interacting with the zkCloudWorker
 * @property jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
 * @property endpoint The endpoint of the serverless api
 * @property chain The blockchain network to use
 * @property webhook The webhook for the serverless api to get the results
 * @property localWorker The local worker for the serverless api to test the code locally
 */
export declare class zkCloudWorkerClient {
    readonly jwt: string;
    readonly endpoint?: string;
    readonly chain: blockchain;
    readonly webhook?: string;
    readonly localWorker?: (cloud: Cloud) => Promise<zkCloudWorker>;
    /**
     * Constructor for the API class
     * @param params the parameters for the API class
     * @param params.jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
     * @param params.zkcloudworker The local worker for the serverless api to test the code locally
     * @param params.chain The blockchain network to use
     * @param params.webhook The webhook for the serverless api to get the results
     */
    constructor(params: {
        jwt: string;
        zkcloudworker?: (cloud: Cloud) => Promise<zkCloudWorker>;
        chain?: blockchain;
        webhook?: string;
    });
    /**
     * Starts a new job for the proof calculation using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job, should be serialized JSON or string
     * @param data.metadata the metadata of the job, should be serialized JSON or string
     * @param data.webhook the webhook for the job
     * @returns { success: boolean, error?: string, jobId?: string }
     * where jonId is the jobId of the job
     *
     * The developers repo should provide a zkcloudworker function
     * that can be called with the given parameters, see the examples
     */
    recursiveProof(data: {
        developer: string;
        repo: string;
        transactions: string[];
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
        webhook?: string;
    }): Promise<{
        success: boolean;
        error?: string;
        jobId?: string;
    }>;
    /**
     * Starts a new job for the function call using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job
     * @param data.metadata the metadata of the job
     * @param data.mode the mode of the job execution: "sync" will not create a job, it will execute the function synchronously within 30 seconds and with the memory limit of 256 MB
     * @returns { success: boolean, error?: string, jobId?: string, result?: any }
     * where jonId is the jobId of the job (for async calls), result is the result of the job (for sync calls)
     */
    execute(data: {
        developer: string;
        repo: string;
        transactions: string[];
        task: string;
        userId?: string;
        args?: string;
        metadata?: string;
        mode?: string;
    }): Promise<{
        success: boolean;
        error?: string;
        jobId?: string;
        result?: any;
    }>;
    /**
     * Sends transactions to the blockchain using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @returns { success: boolean, error?: string, txId?: string[] }
     * where txId is the transaction id of the transaction, in the sequence of the input transactions
     */
    sendTransactions(data: {
        developer: string;
        repo: string;
        transactions: string[];
    }): Promise<{
        success: boolean;
        error?: string;
        txId?: string[];
    }>;
    /**
     * Gets the result of the job using serverless api call
     * @param data the data for the jobResult call
     * @param data.jobId the jobId of the job
     * @param data.includeLogs include logs in the result, default is false
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     * if the job is not finished yet, the result will be undefined
     * if the job failed, the result will be undefined and error will be set
     * if the job is finished, the result will be set and error will be undefined
     * if the job is not found, the result will be undefined and error will be set
     */
    jobResult(data: {
        jobId: string;
        includeLogs?: boolean;
    }): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Deploys the code to the cloud using serverless api call
     * @param data the data for the deploy call
     * @param data.repo the repo to use
     * @param data.developer the developer
     * @param data.packageManager the package manager to use
     * @returns { success: boolean, error?: string, jobId?: string}
     * where jobId is the jobId of the job
     */
    deploy(data: {
        repo: string;
        developer: string;
        packageManager: string;
    }): Promise<{
        success: boolean;
        error?: string;
        jobId?: string;
    }>;
    /**
     * Gets the billing report for the jobs sent using JWT
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the billing report
     */
    queryBilling(): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Gets the remaining balance
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the balance
     */
    getBalance(): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Waits for the job to finish
     * @param data the data for the waitForJobResult call
     * @param data.jobId the jobId of the job
     * @param data.maxAttempts the maximum number of attempts, default is 360 (2 hours)
     * @param data.interval the interval between attempts, default is 20000 (20 seconds)
     * @param data.maxErrors the maximum number of network errors, default is 10
     * @param data.printLogs print logs, default is true
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     */
    waitForJobResult(data: {
        jobId: string;
        maxAttempts?: number;
        interval?: number;
        maxErrors?: number;
        printLogs?: boolean;
    }): Promise<{
        success: boolean;
        error?: string;
        result?: any;
    }>;
    /**
     * Calls the serverless API
     * @param command the command of the API
     * @param data the data of the API
     * */
    private apiHub;
    private isError;
}

```

Contents of dist/lib/ts/src/mina/api/api.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zkCloudWorkerClient = void 0;
const axios_1 = __importDefault(require("axios"));
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../../cloud/utils");
const local_1 = require("../local/local");
const config_1 = __importDefault(require("../../cloud/config"));
const { ZKCLOUDWORKER_AUTH, ZKCLOUDWORKER_API } = config_1.default;
/**
 * API class for interacting with the zkCloudWorker
 * @property jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
 * @property endpoint The endpoint of the serverless api
 * @property chain The blockchain network to use
 * @property webhook The webhook for the serverless api to get the results
 * @property localWorker The local worker for the serverless api to test the code locally
 */
class zkCloudWorkerClient {
    /**
     * Constructor for the API class
     * @param params the parameters for the API class
     * @param params.jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
     * @param params.zkcloudworker The local worker for the serverless api to test the code locally
     * @param params.chain The blockchain network to use
     * @param params.webhook The webhook for the serverless api to get the results
     */
    constructor(params) {
        const { jwt, zkcloudworker, webhook } = params;
        this.jwt = jwt;
        const chain = params.chain ?? "devnet";
        this.chain = chain;
        this.endpoint =
            chain === "devnet" || chain === "zeko"
                ? ZKCLOUDWORKER_API + chain
                : undefined;
        this.webhook = webhook;
        if (jwt === "local") {
            if (zkcloudworker === undefined)
                throw new Error("worker is required for local mode");
            this.localWorker = zkcloudworker;
        }
    }
    /**
     * Starts a new job for the proof calculation using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job, should be serialized JSON or string
     * @param data.metadata the metadata of the job, should be serialized JSON or string
     * @param data.webhook the webhook for the job
     * @returns { success: boolean, error?: string, jobId?: string }
     * where jonId is the jobId of the job
     *
     * The developers repo should provide a zkcloudworker function
     * that can be called with the given parameters, see the examples
     */
    async recursiveProof(data) {
        const result = await this.apiHub("recursiveProof", data);
        if (result.data === "error" ||
            (typeof result.data === "string" && result.data.startsWith("error")))
            return {
                success: false,
                error: result.error,
            };
        else if (result.success === false || result.data?.success === false)
            return {
                success: false,
                error: result.error ?? result.data?.error ?? "recursiveProof call failed",
            };
        else if (result.success === true &&
            result.data?.success === true &&
            result.data?.jobId !== undefined)
            return {
                success: result.success,
                jobId: result.data.jobId,
                error: result.error,
            };
        else
            return {
                success: false,
                error: "recursiveProof call error",
            };
    }
    /**
     * Starts a new job for the function call using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @param data.task the task of the job
     * @param data.userId the userId of the job
     * @param data.args the arguments of the job
     * @param data.metadata the metadata of the job
     * @param data.mode the mode of the job execution: "sync" will not create a job, it will execute the function synchronously within 30 seconds and with the memory limit of 256 MB
     * @returns { success: boolean, error?: string, jobId?: string, result?: any }
     * where jonId is the jobId of the job (for async calls), result is the result of the job (for sync calls)
     */
    async execute(data) {
        const result = await this.apiHub("execute", data);
        if (result.data === "error" ||
            (typeof result.data === "string" && result.data.startsWith("error")))
            return {
                success: false,
                error: result.error,
            };
        else if (result.success === false || result.data?.success === false)
            return {
                success: false,
                error: result.error ?? result.data?.error ?? "execute call failed",
            };
        else if (result.success === true &&
            data.mode === "sync" &&
            result.data !== undefined)
            return {
                success: result.success,
                jobId: undefined,
                result: result.data,
                error: result.error,
            };
        else if (result.success === true &&
            data.mode !== "sync" &&
            result.data?.success === true &&
            result.data?.jobId !== undefined)
            return {
                success: result.success,
                jobId: result.data.jobId,
                result: undefined,
                error: result.error,
            };
        else
            return {
                success: false,
                error: "execute call error",
            };
    }
    /**
     * Sends transactions to the blockchain using serverless api call
     * @param data the data for the proof call
     * @param data.developer the developer
     * @param data.repo the repo to use
     * @param data.transactions the transactions
     * @returns { success: boolean, error?: string, txId?: string[] }
     * where txId is the transaction id of the transaction, in the sequence of the input transactions
     */
    async sendTransactions(data) {
        const result = await this.apiHub("sendTransactions", data);
        if (result.data === "error")
            // TODO: check if this is correct in AWS code
            return {
                success: false,
                error: result.error,
            };
        else
            return {
                success: result.success,
                txId: result.data,
                error: result.error,
            };
    }
    /**
     * Gets the result of the job using serverless api call
     * @param data the data for the jobResult call
     * @param data.jobId the jobId of the job
     * @param data.includeLogs include logs in the result, default is false
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     * if the job is not finished yet, the result will be undefined
     * if the job failed, the result will be undefined and error will be set
     * if the job is finished, the result will be set and error will be undefined
     * if the job is not found, the result will be undefined and error will be set
     */
    async jobResult(data) {
        const result = await this.apiHub("jobResult", data);
        if (this.isError(result.data))
            return {
                success: false,
                error: result.error,
                result: result.data,
            };
        else
            return {
                success: result.success,
                error: result.error,
                result: result.data,
            };
    }
    /**
     * Deploys the code to the cloud using serverless api call
     * @param data the data for the deploy call
     * @param data.repo the repo to use
     * @param data.developer the developer
     * @param data.packageManager the package manager to use
     * @returns { success: boolean, error?: string, jobId?: string}
     * where jobId is the jobId of the job
     */
    async deploy(data) {
        // TODO: encrypt env.json
        const { repo, developer, packageManager } = data;
        const result = await this.apiHub("deploy", {
            developer,
            repo,
            args: packageManager,
        });
        if (result.data === "error" ||
            (typeof result.data === "string" && result.data.startsWith("error")))
            return {
                success: false,
                error: result.error,
            };
        else
            return {
                success: result.success && result.data?.success,
                jobId: result.data?.jobId,
                error: result.error,
            };
    }
    /**
     * Gets the billing report for the jobs sent using JWT
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the billing report
     */
    async queryBilling() {
        const result = await this.apiHub("queryBilling", {});
        if (this.isError(result.data))
            return {
                success: false,
                error: result.error,
                result: result.data,
            };
        else
            return {
                success: result.success,
                error: result.error,
                result: result.data,
            };
    }
    /**
     * Gets the remaining balance
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the balance
     */
    async getBalance() {
        const result = await this.apiHub("getBalance", {});
        if (this.isError(result.data))
            return {
                success: false,
                error: result.error,
                result: result.data,
            };
        else
            return {
                success: result.success,
                error: result.error,
                result: result.data,
            };
    }
    /**
     * Waits for the job to finish
     * @param data the data for the waitForJobResult call
     * @param data.jobId the jobId of the job
     * @param data.maxAttempts the maximum number of attempts, default is 360 (2 hours)
     * @param data.interval the interval between attempts, default is 20000 (20 seconds)
     * @param data.maxErrors the maximum number of network errors, default is 10
     * @param data.printLogs print logs, default is true
     * @returns { success: boolean, error?: string, result?: any }
     * where result is the result of the job
     */
    async waitForJobResult(data) {
        if (this.jwt === "local")
            return this.jobResult({ jobId: data.jobId });
        const maxAttempts = data?.maxAttempts ?? 360; // 1 hour
        const interval = data?.interval ?? 10000;
        const maxErrors = data?.maxErrors ?? 10;
        const errorDelay = 30000; // 30 seconds
        const printedLogs = [];
        const printLogs = data.printLogs ?? true;
        function print(logs) {
            logs.forEach((log) => {
                if (printedLogs.includes(log) === false) {
                    printedLogs.push(log);
                    if (printLogs) {
                        // replace all occurrences of "error" with red color
                        const text = log.replace(/error/gi, (matched) => chalk_1.default.red(matched));
                        console.log(text);
                    }
                }
            });
        }
        let attempts = 0;
        let errors = 0;
        while (attempts < maxAttempts) {
            const result = await this.apiHub("jobResult", {
                jobId: data.jobId,
                includeLogs: printLogs,
            });
            const isAllLogsFetched = result?.data?.isFullLog === true || printLogs === false;
            if (printLogs === true &&
                result?.data?.logs !== undefined &&
                result?.data?.logs !== null &&
                Array.isArray(result.data.logs) === true)
                print(result.data.logs);
            if (result.success === false) {
                errors++;
                if (errors > maxErrors) {
                    return {
                        success: false,
                        error: "Too many network errors",
                        result: undefined,
                    };
                }
                await (0, utils_1.sleep)(errorDelay * errors);
            }
            else {
                if (this.isError(result.data) && isAllLogsFetched)
                    return {
                        success: false,
                        error: result.error,
                        result: result.data,
                    };
                else if (result.data?.result !== undefined && isAllLogsFetched) {
                    return {
                        success: result.success,
                        error: result.error,
                        result: result.data,
                    };
                }
                else if (result.data?.jobStatus === "failed" && isAllLogsFetched) {
                    return {
                        success: false,
                        error: "Job failed",
                        result: result.data,
                    };
                }
                await (0, utils_1.sleep)(interval);
            }
            attempts++;
        }
        return {
            success: false,
            error: "Timeout",
            result: undefined,
        };
    }
    /**
     * Calls the serverless API
     * @param command the command of the API
     * @param data the data of the API
     * */
    async apiHub(command, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    data
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ) {
        if (this.jwt === "local") {
            if (this.localWorker === undefined)
                throw new Error("localWorker is undefined");
            switch (command) {
                case "recursiveProof": {
                    const jobId = await local_1.LocalCloud.run({
                        command: "recursiveProof",
                        data,
                        chain: this.chain,
                        localWorker: this.localWorker,
                    });
                    return {
                        success: true,
                        data: { success: true, jobId },
                    };
                }
                case "execute": {
                    const jobId = await local_1.LocalCloud.run({
                        command: "execute",
                        data,
                        chain: this.chain,
                        localWorker: this.localWorker,
                    });
                    if (data.mode === "sync")
                        return {
                            success: true,
                            data: local_1.LocalStorage.jobEvents[jobId].result,
                        };
                    else
                        return {
                            success: true,
                            data: { success: true, jobId },
                        };
                }
                case "jobResult": {
                    const job = local_1.LocalStorage.jobs[data.jobId];
                    if (job === undefined) {
                        return {
                            success: false,
                            error: "local job not found",
                        };
                    }
                    else {
                        return {
                            success: true,
                            data: job,
                        };
                    }
                }
                case "sendTransactions": {
                    return {
                        success: true,
                        data: await local_1.LocalCloud.addTransactions(data.transactions),
                    };
                }
                case "deploy":
                    return {
                        success: true,
                        data: "local_deploy",
                    };
                case "queryBilling":
                    return {
                        success: true,
                        data: "local_queryBilling",
                    };
                default:
                    return {
                        success: false,
                        error: "local_error",
                    };
            }
        }
        else {
            if (this.endpoint === undefined)
                throw new Error("zkCloudWorker supports only devnet and zeko chains in the cloud.");
            const apiData = {
                auth: ZKCLOUDWORKER_AUTH,
                command: command,
                jwtToken: this.jwt,
                data: data,
                chain: this.chain,
                webhook: this.webhook, // TODO: implement webhook code on AWS
            };
            try {
                const response = await axios_1.default.post(this.endpoint, apiData);
                return { success: true, data: response.data };
            }
            catch (error) {
                console.error("apiHub error:", error.message ?? error);
                return { success: false, error: error };
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isError(data) {
        if (data === "error")
            return true;
        if (data?.jobStatus === "failed")
            return true;
        if (typeof data === "string" && data.toLowerCase().startsWith("error"))
            return true;
        if (data !== undefined && data.error !== undefined)
            return true;
        return false;
    }
}
exports.zkCloudWorkerClient = zkCloudWorkerClient;

```

Contents of dist/lib/ts/src/cloud/config.d.ts:
```
declare const config: {
    MINAFEE: string;
    ZKCLOUDWORKER_AUTH: string;
    ZKCLOUDWORKER_API: string;
    ZKCLOUDWORKER_NATS: string;
    ZKCLOUDWORKER_NATS_WS: string;
};
export default config;

```

Contents of dist/lib/ts/src/cloud/networks.d.ts:
```
export { blockchain, MinaNetwork, networks, Mainnet, Devnet, Zeko, Lightnet, Local, };
/**
 * blockchain is the type for the chain ID.
 */
type blockchain = "local" | "devnet" | "lightnet" | "mainnet" | "zeko";
/**
 * MinaNetwork is the data structure for a Mina network, keeping track of the Mina and archive endpoints, chain ID, name, account manager, explorer account URL, explorer transaction URL, and faucet.
 */
interface MinaNetwork {
    /** The Mina endpoints */
    mina: string[];
    /** The archive endpoints */
    archive: string[];
    /** The chain ID */
    chainId: blockchain;
    /** The name of the network (optional) */
    name?: string;
    /** The account manager for Lightnet (optional) */
    accountManager?: string;
    /** The explorer account URL (optional) */
    explorerAccountUrl?: string;
    /** The explorer transaction URL (optional) */
    explorerTransactionUrl?: string;
    /** The faucet URL (optional) */
    faucet?: string;
}
declare const Mainnet: MinaNetwork;
declare const Local: MinaNetwork;
declare const Devnet: MinaNetwork;
declare const Zeko: MinaNetwork;
declare const Lightnet: MinaNetwork;
declare const networks: MinaNetwork[];

```

Contents of dist/lib/ts/src/cloud/index.js:
```
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./utils"), exports);
__exportStar(require("./worker"), exports);
__exportStar(require("./config"), exports);
__exportStar(require("./networks"), exports);

```

Contents of dist/lib/ts/src/cloud/config.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = {
    MINAFEE: "200000000",
    ZKCLOUDWORKER_AUTH: "M6t4jtbBAFFXhLERHQWyEB9JA9xi4cWqmYduaCXtbrFjb7yaY7TyaXDunKDJNiUTBEcyUomNXJgC",
    ZKCLOUDWORKER_API: "https://api.zkcloudworker.com/v1/",
    ZKCLOUDWORKER_NATS: "https://cloud.zkcloudworker.com:4222",
    ZKCLOUDWORKER_NATS_WS: "wss://cloud.zkcloudworker.com:4223",
};
exports.default = config;

```

Contents of dist/lib/ts/src/cloud/networks.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Local = exports.Lightnet = exports.Zeko = exports.Devnet = exports.Mainnet = exports.networks = void 0;
const Mainnet = {
    mina: [
        //"https://proxy.devnet.minaexplorer.com/graphql",
        "https://api.minascan.io/node/mainnet/v1/graphql",
    ],
    archive: [
        "https://api.minascan.io/archive/mainnet/v1/graphql",
        //"https://archive.devnet.minaexplorer.com",
    ],
    explorerAccountUrl: "https://minascan.io/mainnet/account/",
    explorerTransactionUrl: "https://minascan.io/mainnet/tx/",
    chainId: "mainnet",
    name: "Mainnet",
};
exports.Mainnet = Mainnet;
const Local = {
    mina: [],
    archive: [],
    chainId: "local",
};
exports.Local = Local;
const Devnet = {
    mina: [
        "https://api.minascan.io/node/devnet/v1/graphql",
        //"https://proxy.devnet.minaexplorer.com/graphql",
    ],
    archive: [
        "https://api.minascan.io/archive/devnet/v1/graphql",
        //"https://archive.devnet.minaexplorer.com",
    ],
    explorerAccountUrl: "https://minascan.io/devnet/account/",
    explorerTransactionUrl: "https://minascan.io/devnet/tx/",
    chainId: "devnet",
    name: "Devnet",
    faucet: "https://faucet.minaprotocol.com",
};
exports.Devnet = Devnet;
const Zeko = {
    mina: ["https://devnet.zeko.io/graphql"],
    archive: [],
    explorerAccountUrl: "https://zekoscan.io/devnet/account/",
    explorerTransactionUrl: "https://zekoscan.io/devnet/tx/",
    chainId: "zeko",
    name: "Zeko",
    faucet: "https://zeko.io/faucet",
};
exports.Zeko = Zeko;
const Lightnet = {
    mina: ["http://localhost:8080/graphql"],
    archive: ["http://localhost:8282"],
    accountManager: "http://localhost:8181",
    chainId: "lightnet",
    name: "Lightnet",
};
exports.Lightnet = Lightnet;
const networks = [Mainnet, Local, Devnet, Zeko, Lightnet];
exports.networks = networks;
/*
// not supported by o1js v1

const Berkeley: MinaNetwork = {
  mina: [
    "https://api.minascan.io/node/berkeley/v1/graphql",
    "https://proxy.berkeley.minaexplorer.com/graphql",
  ],
  archive: [
    "https://api.minascan.io/archive/berkeley/v1/graphql",
    "https://archive.berkeley.minaexplorer.com",
  ],
  explorerAccountUrl: "https://minascan.io/berkeley/account/",
  explorerTransactionUrl: "https://minascan.io/berkeley/tx/",
  chainId: "berkeley",
  name: "Berkeley",
};

const TestWorld2: MinaNetwork = {
  mina: ["https://api.minascan.io/node/testworld/v1/graphql"],
  archive: ["https://archive.testworld.minaexplorer.com"],
  explorerAccountUrl: "https://minascan.io/testworld/account/",
  explorerTransactionUrl: "https://minascan.io/testworld/tx/",
  chainId: "testworld2",
  name: "TestWorld2",
};

*/

```

Contents of dist/lib/ts/src/cloud/index.d.ts:
```
export * from "./utils";
export * from "./worker";
export * from "./config";
export * from "./networks";

```

Contents of dist/lib/ts/src/cloud/utils/graphql.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultToken = void 0;
exports.getBalanceFromGraphQL = getBalanceFromGraphQL;
exports.getAccountFromGraphQL = getAccountFromGraphQL;
exports.defaultToken = "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf";
async function getBalanceFromGraphQL(params) {
    const { publicKey, mina } = params;
    const tokenId = params.tokenId ?? exports.defaultToken;
    if (mina.length === 0)
        throw new Error("no mina endpoints provided");
    const account = await fetchAccountInternal({
        publicKey,
        tokenId,
        mina,
        queryType: "balance",
    });
    //console.log("getBalanceFromGraphQL account:", account);
    const balance = account?.account?.balance?.total;
    return balance ? BigInt(balance) : 0n;
}
async function getAccountFromGraphQL(params) {
    const { publicKey, mina } = params;
    const tokenId = params.tokenId ?? exports.defaultToken;
    if (mina.length === 0)
        throw new Error("no mina endpoints provided");
    const account = await fetchAccountInternal({
        publicKey,
        tokenId,
        mina,
        queryType: "account",
    });
    return account?.account;
}
async function fetchAccountInternal(params) {
    const { publicKey, tokenId, mina, timeout, queryType } = params;
    const query = queryType === "balance"
        ? balanceQuery(publicKey, tokenId)
        : accountQuery(publicKey, tokenId);
    let [response, error] = await makeGraphqlRequest({
        query,
        mina,
        timeout,
    });
    if (error !== undefined)
        return { account: undefined, error };
    const account = response?.data?.account;
    if (!account) {
        return {
            account: undefined,
            error: {
                statusCode: 404,
                statusText: `fetchAccount: Account with public key ${publicKey} does not exist.`,
            },
        };
    }
    return {
        account,
        error: undefined,
    };
}
async function makeGraphqlRequest(params) {
    const defaultTimeout = 5 * 60 * 1000; // 5 minutes
    const timeout = params.timeout ?? defaultTimeout;
    const { query, mina } = params;
    const graphqlEndpoint = mina[0];
    const fallbackEndpoints = mina.slice(1);
    if (graphqlEndpoint === "none")
        throw Error("Should have made a graphql request, but don't know to which endpoint.");
    let timeouts = [];
    const clearTimeouts = () => {
        timeouts.forEach((t) => clearTimeout(t));
        timeouts = [];
    };
    const makeRequest = async (url) => {
        const controller = new AbortController();
        const timer = setTimeout(() => controller.abort(), timeout);
        timeouts.push(timer);
        let body = JSON.stringify({
            operationName: null,
            query,
            variables: {},
        });
        try {
            let response = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body,
                signal: controller.signal,
            });
            return checkResponseStatus(response);
        }
        finally {
            clearTimeouts();
        }
    };
    // try to fetch from endpoints in pairs
    let timeoutErrors = [];
    let urls = [graphqlEndpoint, ...fallbackEndpoints];
    for (let i = 0; i < urls.length; i += 2) {
        let url1 = urls[i];
        let url2 = urls[i + 1];
        if (url2 === undefined) {
            try {
                return await makeRequest(url1);
            }
            catch (error) {
                return [undefined, inferError(error)];
            }
        }
        try {
            return await Promise.race([makeRequest(url1), makeRequest(url2)]);
        }
        catch (unknownError) {
            let error = inferError(unknownError);
            if (error.statusCode === 408) {
                // If the request timed out, try the next 2 endpoints
                timeoutErrors.push({ url1, url2, error });
            }
            else {
                // If the request failed for some other reason (e.g. o1js error), return the error
                return [undefined, error];
            }
        }
    }
    const statusText = timeoutErrors
        .map(({ url1, url2, error }) => `Request to ${url1} and ${url2} timed out. Error: ${error}`)
        .join("\n");
    return [undefined, { statusCode: 408, statusText }];
}
function inferError(error) {
    let errorMessage = JSON.stringify(error);
    if (error instanceof AbortSignal) {
        return { statusCode: 408, statusText: `Request Timeout: ${errorMessage}` };
    }
    else {
        return {
            statusCode: 500,
            statusText: `Unknown Error: ${errorMessage}`,
        };
    }
}
async function checkResponseStatus(response) {
    if (response.ok) {
        const jsonResponse = (await response.json());
        if (jsonResponse.errors && jsonResponse.errors.length > 0) {
            return [
                undefined,
                {
                    statusCode: response.status,
                    statusText: jsonResponse.errors
                        .map((error) => error.message)
                        .join("\n"),
                },
            ];
        }
        else if (jsonResponse.data === undefined) {
            return [
                undefined,
                {
                    statusCode: response.status,
                    statusText: `GraphQL response data is undefined`,
                },
            ];
        }
        return [jsonResponse, undefined];
    }
    else {
        return [
            undefined,
            {
                statusCode: response.status,
                statusText: response.statusText,
            },
        ];
    }
}
const balanceQuery = (publicKey, tokenId) => `{
  account(publicKey: "${publicKey}", token: "${tokenId}") {
    balance { total }
  }
}
`;
const accountQuery = (publicKey, tokenId) => `{
  account(publicKey: "${publicKey}", token: "${tokenId}") {
    publicKey
    token
    nonce
    balance { total }
    tokenSymbol
    receiptChainHash
    timing {
      initialMinimumBalance
      cliffTime
      cliffAmount
      vestingPeriod
      vestingIncrement
    }
    permissions {
      editState
      access
      send
      receive
      setDelegate
      setPermissions
      setVerificationKey {
        auth
        txnVersion
      }
      setZkappUri
      editActionState
      setTokenSymbol
      incrementNonce
      setVotingFor
      setTiming
    }
    delegateAccount { publicKey }
    votingFor
    zkappState
    verificationKey {
      verificationKey
      hash
    }
    actionState
    provedState
    zkappUri
  }
}
`;

```

Contents of dist/lib/ts/src/cloud/utils/index.js:
```
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./graphql"), exports);
__exportStar(require("./utils"), exports);
__exportStar(require("./base64"), exports);

```

Contents of dist/lib/ts/src/cloud/utils/base64.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bigintToBase56 = bigintToBase56;
exports.bigintFromBase56 = bigintFromBase56;
exports.bigintToBase64 = bigintToBase64;
exports.bigintFromBase64 = bigintFromBase64;
exports.fromBase = fromBase;
exports.toBase = toBase;
// URL friendly base64 encoding
const TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
function bigintToBase56(value) {
    const digits = toBase(value, 56n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
function bigintFromBase56(str) {
    const base56Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = fromBase(base56Digits, 56n);
    return x;
}
function bigintToBase64(value) {
    const digits = toBase(value, 64n);
    //console.log("digits:", digits);
    const str = digits.map((x) => TABLE[Number(x)]).join("");
    //console.log("str:", str);
    return str;
}
function bigintFromBase64(str) {
    const base64Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
    const x = fromBase(base64Digits, 64n);
    return x;
}
function fromBase(digits, base) {
    if (base <= 0n)
        throw Error("fromBase: base must be positive");
    // compute powers base, base^2, base^4, ..., base^(2^k)
    // with largest k s.t. n = 2^k < digits.length
    let basePowers = [];
    for (let power = base, n = 1; n < digits.length; power **= 2n, n *= 2) {
        basePowers.push(power);
    }
    let k = basePowers.length;
    // pad digits array with zeros s.t. digits.length === 2^k
    digits = digits.concat(Array(2 ** k - digits.length).fill(0n));
    // accumulate [x0, x1, x2, x3, ...] -> [x0 + base*x1, x2 + base*x3, ...] -> [x0 + base*x1 + base^2*(x2 + base*x3), ...] -> ...
    // until we end up with a single element
    for (let i = 0; i < k; i++) {
        let newDigits = Array(digits.length >> 1);
        let basePower = basePowers[i];
        for (let j = 0; j < newDigits.length; j++) {
            newDigits[j] = digits[2 * j] + basePower * digits[2 * j + 1];
        }
        digits = newDigits;
    }
    console.assert(digits.length === 1);
    let [digit] = digits;
    return digit;
}
function toBase(x, base) {
    if (base <= 0n)
        throw Error("toBase: base must be positive");
    // compute powers base, base^2, base^4, ..., base^(2^k)
    // with largest k s.t. base^(2^k) < x
    let basePowers = [];
    for (let power = base; power <= x; power **= 2n) {
        basePowers.push(power);
    }
    let digits = [x]; // single digit w.r.t base^(2^(k+1))
    // successively split digits w.r.t. base^(2^j) into digits w.r.t. base^(2^(j-1))
    // until we arrive at digits w.r.t. base
    let k = basePowers.length;
    for (let i = 0; i < k; i++) {
        let newDigits = Array(2 * digits.length);
        let basePower = basePowers[k - 1 - i];
        for (let j = 0; j < digits.length; j++) {
            let x = digits[j];
            let high = x / basePower;
            newDigits[2 * j + 1] = high;
            newDigits[2 * j] = x - high * basePower;
        }
        digits = newDigits;
    }
    // pop "leading" zero digits
    while (digits[digits.length - 1] === 0n) {
        digits.pop();
    }
    return digits;
}

```

Contents of dist/lib/ts/src/cloud/utils/utils.d.ts:
```
export declare function sleep(ms: number): Promise<unknown>;
export declare function makeString(length: number): string;
export declare function formatTime(ms: number): string;
export declare class Memory {
    static rss: number;
    constructor();
    static info(description?: string, fullInfo?: boolean): void;
}

```

Contents of dist/lib/ts/src/cloud/utils/utils.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Memory = void 0;
exports.sleep = sleep;
exports.makeString = makeString;
exports.formatTime = formatTime;
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
function makeString(length) {
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    let outString = ``;
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    const inOptions = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`;
    for (let i = 0; i < length; i++) {
        outString += inOptions.charAt(Math.floor(Math.random() * inOptions.length));
    }
    return outString;
}
function formatTime(ms) {
    if (ms === undefined)
        return "";
    if (ms < 1000)
        return ms.toString() + " ms";
    if (ms < 60 * 1000)
        return parseInt((ms / 1000).toString()).toString() + " sec";
    if (ms < 60 * 60 * 1000) {
        const minutes = parseInt((ms / 1000 / 60).toString());
        const seconds = parseInt(((ms - minutes * 60 * 1000) / 1000).toString());
        return minutes.toString() + " min " + seconds.toString() + " sec";
    }
    else {
        const hours = parseInt((ms / 1000 / 60 / 60).toString());
        const minutes = parseInt(((ms - hours * 60 * 60 * 1000) / 1000 / 60).toString());
        return hours.toString() + " h " + minutes.toString() + " min";
    }
}
class Memory {
    constructor() {
        Memory.rss = 0;
    }
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    static info(description = ``, fullInfo = false) {
        const memoryData = process.memoryUsage();
        const formatMemoryUsage = (data) => `${Math.round(data / 1024 / 1024)} MB`;
        const oldRSS = Memory.rss;
        Memory.rss = Math.round(memoryData.rss / 1024 / 1024);
        const memoryUsage = fullInfo
            ? {
                step: `${description}:`,
                rssDelta: `${(oldRSS === 0
                    ? 0
                    : Memory.rss - oldRSS).toString()} MB -> Resident Set Size memory change`,
                rss: `${formatMemoryUsage(memoryData.rss)} -> Resident Set Size - total memory allocated`,
                heapTotal: `${formatMemoryUsage(memoryData.heapTotal)} -> total size of the allocated heap`,
                heapUsed: `${formatMemoryUsage(memoryData.heapUsed)} -> actual memory used during the execution`,
                external: `${formatMemoryUsage(memoryData.external)} -> V8 external memory`,
            }
            : `RSS memory ${description}: ${formatMemoryUsage(memoryData.rss)}${oldRSS === 0
                ? ``
                : `, changed by ` + (Memory.rss - oldRSS).toString() + ` MB`}`;
        console.log(memoryUsage);
    }
}
exports.Memory = Memory;
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
Memory.rss = 0;

```

Contents of dist/lib/ts/src/cloud/utils/base64.d.ts:
```
export declare function bigintToBase56(value: bigint): string;
export declare function bigintFromBase56(str: string): bigint;
export declare function bigintToBase64(value: bigint): string;
export declare function bigintFromBase64(str: string): bigint;
export declare function fromBase(digits: bigint[], base: bigint): bigint;
export declare function toBase(x: bigint, base: bigint): bigint[];

```

Contents of dist/lib/ts/src/cloud/utils/index.d.ts:
```
export * from "./graphql";
export * from "./utils";
export * from "./base64";

```

Contents of dist/lib/ts/src/cloud/utils/graphql.d.ts:
```
export declare const defaultToken = "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf";
export declare function getBalanceFromGraphQL(params: {
    publicKey: string;
    tokenId?: string;
    mina: string[];
}): Promise<bigint>;
export declare function getAccountFromGraphQL(params: {
    publicKey: string;
    tokenId?: string;
    mina: string[];
}): Promise<any>;

```

Contents of dist/lib/ts/src/cloud/worker/transaction.d.ts:
```
/**
 * Human-readable transaction metadata
 * events: the events
 * actions: the actions
 * custom: the custom metadata defined by the developer
 */
export interface TransactionMetadata {
    events?: object[];
    actions?: object[];
    custom?: object;
}

```

Contents of dist/lib/ts/src/cloud/worker/transaction.js:
```
"use strict";
/**
 * Human-readable transaction metadata
 * events: the events
 * actions: the actions
 * custom: the custom metadata defined by the developer
 */
Object.defineProperty(exports, "__esModule", { value: true });

```

Contents of dist/lib/ts/src/cloud/worker/job.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

```

Contents of dist/lib/ts/src/cloud/worker/task.d.ts:
```
import { blockchain } from "../networks";
/**
 * TaskData is the data structure for a task, keeping track of the task status, result, logs, and metadata.
 */
export interface TaskData {
    /** The ID of the user */
    id: string;
    /** The ID of the task */
    taskId: string;
    /** The time the task was started (optional) */
    startTime?: number;
    /** The time the task was created */
    timeCreated: number;
    /** The maximum number of attempts (default is 5) (optional) */
    maxAttempts?: number;
    /** The number of attempts */
    attempts: number;
    /** The developer of the repo executing the task */
    developer: string;
    /** The repo executing the task */
    repo: string;
    /** The task to execute */
    task: string;
    /** The ID of the user (optional) */
    userId?: string;
    /** The arguments for the task (optional) */
    args?: string;
    /** The metadata for the task (optional) */
    metadata?: string;
    /** The blockchain to execute the task on */
    chain: blockchain;
}

```

Contents of dist/lib/ts/src/cloud/worker/task.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

```

Contents of dist/lib/ts/src/cloud/worker/worker.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zkCloudWorker = void 0;
/**
 * Abstract class for the zkCloudWorker
 * Used to define the zkCloudWorker methods and properties
 * Should be implemented for by the developer for the zkCloudWorker in the cloud
 */
class zkCloudWorker {
    /**
     * Constructor for the zkCloudWorker class
     * @param cloud the cloud instance provided by the zkCloudWorker in the local environment or in the cloud
     */
    constructor(cloud) {
        this.cloud = cloud;
    }
    // Those methods should be implemented for recursive proofs calculations
    /**
     * Creates a new proof from a transaction
     * @param transaction the transaction
     * @returns the serialized proof
     */
    async create(transaction) {
        return undefined;
    }
    /**
     * Merges two proofs
     * @param proof1 the first proof
     * @param proof2 the second proof
     * @returns the merged proof
     */
    async merge(proof1, proof2) {
        return undefined;
    }
    // Those methods should be implemented for anything except for recursive proofs
    /**
     * Executes the transactions
     * @param transactions the transactions, can be empty list
     * @returns the result
     */
    async execute(transactions) {
        return undefined;
    }
    /* Process the transactions received by the cloud
     * @param transactions: the transactions
     */
    async processTransactions(transactions) { }
    /**
     * process the task defined by the developer
     * @returns the result
     */
    async task() {
        return undefined;
    }
}
exports.zkCloudWorker = zkCloudWorker;

```

Contents of dist/lib/ts/src/cloud/worker/cloud.d.ts:
```
import { blockchain } from "../networks";
import { JobData } from "./job";
import { TransactionMetadata } from "./transaction";
/**
 * Interface for the deployer key pair
 * Used to get the public and private keys of the deployer for test networks only.
 * Devnet and Zeko are supported.
 */
export interface DeployerKeyPair {
    /** The public key of the deployer */
    publicKey: string;
    /** The private key of the deployer */
    privateKey: string;
}
/**
 * Interface for the cloud transaction
 * Used to get the transaction id, the transaction, and the time received
 */
export interface CloudTransaction {
    /** The transaction id */
    txId: string;
    /** The transaction */
    transaction: string;
    /** The time received */
    timeReceived: number;
    /** The status of the transaction */
    status: string;
}
export declare abstract class Cloud {
    readonly id: string;
    readonly jobId: string;
    readonly stepId: string;
    readonly taskId: string;
    readonly cache: string;
    readonly developer: string;
    readonly repo: string;
    readonly task?: string;
    readonly userId?: string;
    readonly args?: string;
    readonly metadata?: string;
    readonly chain: blockchain;
    readonly isLocalCloud: boolean;
    /**
     * Constructor for the Cloud class
     * @param params the parameters for the Cloud class
     * @param params.id the id of the user
     * @param params.jobId the job id
     * @param params.stepId the step id
     * @param params.taskId the task id
     * @param params.cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
     * @param params.developer the developer id
     * @param params.repo the repo id
     * @param params.task the task id
     * @param params.userId the user id
     * @param params.args the arguments, should be a string or serialized JSON
     * @param params.metadata the metadata, should be a string or serialized JSON
     * @param params.chain the blockchain network
     * @param params.isLocalCloud a boolean to check if the cloud is local or not
     */
    constructor(params: {
        id: string;
        jobId: string;
        stepId: string;
        taskId: string;
        cache: string;
        developer: string;
        repo: string;
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
        isLocalCloud?: boolean;
        chain: blockchain;
    });
    /**
     * Abstract method to get the deployer key pair
     * Used to get the public and private keys of the deployer for test networks only
     * Devnet and Zeko are supported
     * @returns the deployer key pair
     */
    abstract getDeployer(): Promise<DeployerKeyPair | undefined>;
    /**
     * Abstract method to release the deployer
     * @param params the public key of the deployer and the transactions hashes
     * Used to release the deployer after the transactions are sent to the blockchain
     * @param params.publicKey the public key of the deployer
     * @param params.txsHashes the transactions hashes
     */
    abstract releaseDeployer(params: {
        publicKey: string;
        txsHashes: string[];
    }): Promise<void>;
    /**
     * Abstract method to get the data by key
     * Used to get the data by key from the cloud storage
     * @param key the key
     * @returns the value of the key
     */
    abstract getDataByKey(key: string): Promise<string | undefined>;
    /**
     * Abstract method to save the data by key
     * Used to save the data by key to the cloud storage
     * @param key the key
     * @param value the value
     */
    abstract saveDataByKey(key: string, value: string | undefined): Promise<void>;
    /**
     * Abstract method to save the file
     * Used to save the file to the cloud storage
     * @param filename the filename
     * @param value the value
     */
    abstract saveFile(filename: string, value: Buffer): Promise<void>;
    /**
     * Abstract method to load the file
     * Used to load the file from the cloud storage
     * @param filename the filename
     * @returns the value of the file
     */
    abstract loadFile(filename: string): Promise<Buffer | undefined>;
    /**
     * Abstract method to encrypt the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     */
    abstract encrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Abstract method to decrypt the data
     * @param params
     * @param params.data the data
     * @param params.context the context
     * @param params.keyId the key id, optional
     */
    abstract decrypt(params: {
        data: string;
        context: string;
        keyId?: string;
    }): Promise<string | undefined>;
    /**
     * Abstract method to calculate the recursive proof
     * Used to calculate the recursive proof
     * @param data the data
     * @param data.transactions the transactions
     * @param data.task the task
     * @param data.userId the user id
     * @param data.args the arguments
     * @param data.metadata the metadata
     * @returns the proof
     */
    abstract recursiveProof(data: {
        transactions: string[];
        task?: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Abstract method to execute the transactions
     * Used to execute the transactions
     * @param data the data
     * @param data.transactions the transactions
     * @param data.task the task
     * @param data.userId the user id
     * @param data.args the arguments
     * @param data.metadata the metadata
     * @returns the result
     */
    abstract execute(data: {
        transactions: string[];
        task: string;
        userId?: string;
        args?: string;
        metadata?: string;
    }): Promise<string>;
    /**
     * Abstract method to add the task
     * Used to add the task
     * @param data the data
     * @param data.task the task
     * @param data.startTime the start time
     * @param data.userId the user id
     * @param data.args the arguments
     * @param data.metadata the metadata
     * @param data.maxAttempts the maximum attempts
     * @returns the task id
     */
    abstract addTask(data: {
        task: string;
        startTime?: number;
        userId?: string;
        args?: string;
        metadata?: string;
        maxAttempts?: number;
    }): Promise<string>;
    /**
     * Abstract method to send the transactions
     * @param transactions
     */
    abstract sendTransactions(transactions: string[] | CloudTransaction[]): Promise<CloudTransaction[]>;
    /**
     * Abstract method to delete the transaction
     * Used to delete the transaction
     * @param txId the transaction id
     */
    abstract deleteTransaction(txId: string): Promise<void>;
    /**
     * Abstract method to get the transactions
     * Used to get the transactions
     * @returns the transactions
     */
    abstract getTransactions(): Promise<CloudTransaction[]>;
    /**
     * Publish the transaction metadata in human-readable format
     * @param params
     * @param params.txId the transaction id
     * @param params.metadata the metadata
     */
    abstract publishTransactionMetadata(params: {
        txId: string;
        metadata: TransactionMetadata;
    }): Promise<void>;
    /**
     * Abstract method to delete the task
     * Used to delete the task
     * @param taskId the task id
     */
    abstract deleteTask(taskId: string): Promise<void>;
    /**
     * Abstract method to process the tasks
     */
    abstract processTasks(): Promise<void>;
    /**
     * Abstract method to get the job result
     * Used to get the job result
     * @param jobId the job id
     * @returns the job result
     */
    abstract jobResult(jobId: string): Promise<JobData | undefined>;
    /**
     * forces the worker to restart the AWS lambda container
     * See https://github.com/o1-labs/o1js/issues/1651
     */
    abstract forceWorkerRestart(): Promise<void>;
}

```

Contents of dist/lib/ts/src/cloud/worker/cloud.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cloud = void 0;
/*
 * Abstract class for the cloud service
 * Used to define the cloud methods and properties
 * Should be implemented by for local testing and for the zkCloudWorker in the cloud
 * @param id the id of the user
 * @param jobId the job id
 * @param stepId the step id
 * @param taskId the task id
 * @param cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
 * @param developer the developer id
 * @param repo the repo id
 * @param task the task id
 * @param userId the user id
 * @param args the arguments, should be a string or serialized JSON
 * @param metadata the metadata, should be a string or serialized JSON
 * @param chain the blockchain network
 * @param isLocalCloud a boolean to check if the cloud is local or not
 */
class Cloud {
    /**
     * Constructor for the Cloud class
     * @param params the parameters for the Cloud class
     * @param params.id the id of the user
     * @param params.jobId the job id
     * @param params.stepId the step id
     * @param params.taskId the task id
     * @param params.cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
     * @param params.developer the developer id
     * @param params.repo the repo id
     * @param params.task the task id
     * @param params.userId the user id
     * @param params.args the arguments, should be a string or serialized JSON
     * @param params.metadata the metadata, should be a string or serialized JSON
     * @param params.chain the blockchain network
     * @param params.isLocalCloud a boolean to check if the cloud is local or not
     */
    constructor(params) {
        const { id, jobId, stepId, taskId, cache, developer, repo, task, userId, args, metadata, isLocalCloud, chain, } = params;
        this.id = id;
        this.jobId = jobId;
        this.stepId = stepId;
        this.taskId = taskId;
        this.cache = cache;
        this.developer = developer;
        this.repo = repo;
        this.task = task;
        this.userId = userId;
        this.args = args;
        this.metadata = metadata;
        this.isLocalCloud = isLocalCloud ?? false;
        this.chain = chain;
    }
}
exports.Cloud = Cloud;

```

Contents of dist/lib/ts/src/cloud/worker/index.js:
```
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./cloud"), exports);
__exportStar(require("./job"), exports);
__exportStar(require("./task"), exports);
__exportStar(require("./transaction"), exports);
__exportStar(require("./worker"), exports);

```

Contents of dist/lib/ts/src/cloud/worker/worker.d.ts:
```
import { Cloud, CloudTransaction } from "./cloud";
/**
 * Abstract class for the zkCloudWorker
 * Used to define the zkCloudWorker methods and properties
 * Should be implemented for by the developer for the zkCloudWorker in the cloud
 */
export declare abstract class zkCloudWorker {
    /**  cloud: the cloud instance */
    readonly cloud: Cloud;
    /**
     * Constructor for the zkCloudWorker class
     * @param cloud the cloud instance provided by the zkCloudWorker in the local environment or in the cloud
     */
    constructor(cloud: Cloud);
    /**
     * Creates a new proof from a transaction
     * @param transaction the transaction
     * @returns the serialized proof
     */
    create(transaction: string): Promise<string | undefined>;
    /**
     * Merges two proofs
     * @param proof1 the first proof
     * @param proof2 the second proof
     * @returns the merged proof
     */
    merge(proof1: string, proof2: string): Promise<string | undefined>;
    /**
     * Executes the transactions
     * @param transactions the transactions, can be empty list
     * @returns the result
     */
    execute(transactions: string[]): Promise<string | undefined>;
    processTransactions(transactions: CloudTransaction[]): Promise<void>;
    /**
     * process the task defined by the developer
     * @returns the result
     */
    task(): Promise<string | undefined>;
}

```

Contents of dist/lib/ts/src/cloud/worker/job.d.ts:
```
import { blockchain } from "../networks";
export type JobStatus = "created" | "started" | "finished" | "failed" | "used" | "restarted";
/**
 * LogStream is a subset of the log stream data returned by AWS CloudWatch Logs when running the worker.
 * @see {@link https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/cloudwatch-logs/command/GetLogEventsCommand/}
 *
 * Example:
 * ```
 * {
 *   logGroupName: '/aws/lambda/zkcloudworker-dev-test',
 *   logStreamName: '2024/05/09/[$LATEST]52d048f64e894d2e8ba2800df93629c5',
 *   awsRequestId: '581d0d45-9165-47e8-84d9-678599938811'
 * }
 * ```
 */
export interface LogStream {
    /** The log group name */
    logGroupName: string;
    /** The log stream name */
    logStreamName: string;
    /** The AWS request ID */
    awsRequestId: string;
}
/**
 * JobData is the data structure for a job, keeping track of the job status, result, logs, and metadata.
 */
export interface JobData {
    /** The ID of the user */
    id: string;
    /** The ID of the job */
    jobId: string;
    /** The ID of the task (optional) */
    taskId?: string;
    /** The developer of the repo executing the job */
    developer: string;
    /** The repo executing the job */
    repo: string;
    /** The task to execute (optional) */
    task?: string;
    /** The ID of the user (optional) */
    userId?: string;
    /** The arguments for the job (optional) */
    args?: string;
    /** The metadata for the job (optional) */
    metadata?: string;
    /** The blockchain to execute the job on */
    chain: blockchain;
    /** The filename where transactions data is stored (optional) */
    filename?: string;
    /** The number of transactions */
    txNumber: number;
    /** The time the job was created */
    timeCreated: number;
    /** The time the job was started (optional) */
    timeStarted?: number;
    /** The time the job was finished (optional) */
    timeFinished?: number;
    /** The time the job failed (optional) */
    timeFailed?: number;
    /** The time the job result was used (optional) */
    timeUsed?: number;
    /** The status of the job */
    jobStatus: JobStatus;
    /** The duration the job was billed for in ms (optional) */
    billedDuration?: number;
    /** The result of the job (optional) */
    result?: string;
    /** The log streams of the job (optional) */
    logStreams?: LogStream[];
    /** The logs of the job (optional) */
    logs?: string[];
    /** Whether the logs are full (optional) */
    isFullLog?: boolean;
}
/**
 * JobEvent is the data structure for a job events, keeping track of the job status changes.
 */
export interface JobEvent {
    /** The ID of the job */
    jobId: string;
    /** The time the event occurred */
    eventTime: number;
    /** The status of the job */
    jobStatus: JobStatus;
    /** The result of the job (optional) */
    result?: string;
}

```

Contents of dist/lib/ts/src/cloud/worker/index.d.ts:
```
export * from "./cloud";
export * from "./job";
export * from "./task";
export * from "./transaction";
export * from "./worker";

```

Contents of node/hash.ts:
```
import crypto from "crypto";

export function stringHash(jsonString: string): string {
  if (typeof jsonString !== "string")
    throw new Error("stringHash: input must be a string");
  return bigintToBase56(
    BigInt("0x" + crypto.createHash("sha256").update(jsonString).digest("hex"))
  );
}

// URL friendly base64 encoding
const TABLE =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

export function bigintToBase56(value: bigint): string {
  const digits = toBase(value, 56n);
  //console.log("digits:", digits);
  const str = digits.map((x) => TABLE[Number(x)]).join("");
  //console.log("str:", str);
  return str;
}

export function bigintFromBase56(str: string): bigint {
  const base56Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
  const x = fromBase(base56Digits, 56n);
  return x;
}

export function bigintToBase64(value: bigint): string {
  const digits = toBase(value, 64n);
  //console.log("digits:", digits);
  const str = digits.map((x) => TABLE[Number(x)]).join("");
  //console.log("str:", str);
  return str;
}

export function bigintFromBase64(str: string): bigint {
  const base64Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
  const x = fromBase(base64Digits, 64n);
  return x;
}

export function fromBase(digits: bigint[], base: bigint) {
  if (base <= 0n) throw Error("fromBase: base must be positive");
  // compute powers base, base^2, base^4, ..., base^(2^k)
  // with largest k s.t. n = 2^k < digits.length
  let basePowers = [];
  for (let power = base, n = 1; n < digits.length; power **= 2n, n *= 2) {
    basePowers.push(power);
  }
  let k = basePowers.length;
  // pad digits array with zeros s.t. digits.length === 2^k
  digits = digits.concat(Array(2 ** k - digits.length).fill(0n));
  // accumulate [x0, x1, x2, x3, ...] -> [x0 + base*x1, x2 + base*x3, ...] -> [x0 + base*x1 + base^2*(x2 + base*x3), ...] -> ...
  // until we end up with a single element
  for (let i = 0; i < k; i++) {
    let newDigits = Array(digits.length >> 1);
    let basePower = basePowers[i];
    for (let j = 0; j < newDigits.length; j++) {
      newDigits[j] = digits[2 * j] + basePower * digits[2 * j + 1];
    }
    digits = newDigits;
  }
  console.assert(digits.length === 1);
  let [digit] = digits;
  return digit;
}

export function toBase(x: bigint, base: bigint) {
  if (base <= 0n) throw Error("toBase: base must be positive");
  // compute powers base, base^2, base^4, ..., base^(2^k)
  // with largest k s.t. base^(2^k) < x
  let basePowers = [];
  for (let power = base; power <= x; power **= 2n) {
    basePowers.push(power);
  }
  let digits = [x]; // single digit w.r.t base^(2^(k+1))
  // successively split digits w.r.t. base^(2^j) into digits w.r.t. base^(2^(j-1))
  // until we arrive at digits w.r.t. base
  let k = basePowers.length;
  for (let i = 0; i < k; i++) {
    let newDigits = Array(2 * digits.length);
    let basePower = basePowers[k - 1 - i];
    for (let j = 0; j < digits.length; j++) {
      let x = digits[j];
      let high = x / basePower;
      newDigits[2 * j + 1] = high;
      newDigits[2 * j] = x - high * basePower;
    }
    digits = newDigits;
  }
  // pop "leading" zero digits
  while (digits[digits.length - 1] === 0n) {
    digits.pop();
  }
  return digits;
}

```

Contents of node/files.ts:
```
import fs from "fs/promises";

export async function saveFile(params: {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  data: any;
  filename: string;
}): Promise<string | undefined> {
  const { data, filename } = params;
  const folder = "./data/";
  const name = folder + filename + ".json";
  try {
    await fs.access("./data");
  } catch (e) {
    // if not, create it
    await fs.mkdir("./data");
  }
  try {
    await fs.writeFile(name, JSON.stringify(data, null, 2));
    return name;
  } catch (e) {
    console.error(`Error writing file ${name}`);
    return undefined;
  }
}

export async function loadFile(filename: string) {
  const name = "./data/" + filename + ".json";
  try {
    const filedata = await fs.readFile(name, "utf8");
    const data = JSON.parse(filedata);
    return data;
  } catch (e) {
    console.error(`File ${name} does not exist or has wrong format`);
    return undefined;
  }
}

export async function saveBinaryFile(params: {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  data: any;
  filename: string;
}): Promise<string | undefined> {
  const { data, filename } = params;
  const folder = "./data/";
  const name = folder + filename + ".bin";
  try {
    await fs.access("./data");
  } catch (e) {
    // if not, create it
    await fs.mkdir("./data");
  }
  try {
    await fs.writeFile(name, data);
    return name;
  } catch (e) {
    console.error(`Error writing file ${name}`);
    return undefined;
  }
}

export async function loadBinaryFile(filename: string) {
  const name = "./data/" + filename + ".bin";
  try {
    const data = await fs.readFile(name);
    return data;
  } catch (e) {
    console.error(`File ${name} does not exist or has wrong format`);
    return undefined;
  }
}

```

Contents of src/index.ts:
```
export * from "./cloud";
export * from "./mina";

```

Contents of src/mina/index.ts:
```
export * from "./api/api";
export * from "./encryption";
export * from "./utils";
export * from "./local/local";
export * from "./verification";

```

Contents of src/mina/encryption/messages.ts:
```
import { connect, JSONCodec } from "nats";
import { NATS_SERVER } from "./connections";

const codec = JSONCodec();

export async function postOptionsMessage(
  clientAddress: string,
  workerAddress: string
): Promise<any> {
  // connect to the NATS server and send a 'ready' request
  const nc = await connect({ servers: NATS_SERVER });
  const msg: any = await nc.request(
    `zkcw:${clientAddress}`, 
    codec.encode({
      "post": "options",
      "params": { "key": workerAddress }
    })
  )
  const response: any = codec.decode(msg.data);
  console.log("Response: ", response);

  // disconect and clean all pendings
  await nc.drain();

  return response
};

export async function postReadyMessage(
  clientAddress: string,
  workerAddress: string
): Promise<any> {
  // connect to the NATS server and send a 'ready' request
  const nc = await connect({ servers: NATS_SERVER });
  const msg: any = await nc.request(
    `zkcw:${clientAddress}`, 
    codec.encode({
      "post": "ready",
      "params": { "key": workerAddress }
    })
  )
  const response: any = codec.decode(msg.data);
  console.log("Response: ", response);

  // disconect and clean all pendings
  await nc.drain();

  return response
};

export async function postDoneMessage(
  clientAddress: string,
  encrypted: string
): Promise<any> {
  // connect to the NATS server and send a 'ready' request
  const nc = await connect({ servers: NATS_SERVER });
  const msg: any = await nc.request(
    `zkcw:${clientAddress}`, 
    codec.encode({
      "post": "done",
      "params": { "result": encrypted }
    })
  )
  const response: any = codec.decode(msg.data);
  console.log("Response: ", response);

  // disconect and clean all pendings
  await nc.drain();

  return response
};

```

Contents of src/mina/encryption/connections.ts:
```
export const NATS_SERVER = "nats.socialcap.dev:4222";

```

Contents of src/mina/encryption/client.ts:
```
import { PrivateKey } from "o1js";
import { connect, JSONCodec } from "nats";
import { initializeBindings } from "o1js";
import { CipherText } from "./encryption";
import { NATS_SERVER } from "./connections";

export interface INATSClient {
  address: string;
  secret: string;
  callme: {
    onOptions: (params: any) => void;
    onReady: (params: any) => void;
    onDone: (params: any) => void;
  };
}

export async function NATSClient(callme: {
  onOptions: (params: any) => void;
  onReady: (params: any) => void;
  onDone: (params: any) => void;
}): Promise<INATSClient> {
  // create some client address, this will be done by
  // the web API BEFORE calling a worker
  const secret = PrivateKey.random();
  let address = secret.toPublicKey().toBase58();
  console.log("Client address ", address);

  // now subscribe and listen in this Address
  // we use the 'zkcw' prefix for zkCloudWorkers subscriptions
  await listen(`zkcw:${address}`, callme);

  return {
    address: address,
    secret: secret.toBase58(),
    callme: callme,
  };
}

export async function listen(
  subject: string,
  callme: {
    onOptions: (params: any) => void;
    onReady: (params: any) => void;
    onDone: (params: any) => void;
  }
) {
  // Create a JSON codec for encoding and decoding messages
  const codec = JSONCodec();

  const connection = await connect({ servers: NATS_SERVER });

  // Subscribe to the subject
  const subscription = connection.subscribe(subject);
  console.log(`Subscribed to subject ${subject}`);

  // Process messages received on the subscribed subject
  (async () => {
    // Error decoding message:  Error: Could not encrypt message={}
    // Error: Poseidon.Sponge(): bindings are not initialized, try calling `await initializeBindings()` first.
    // This shouldn't have happened and indicates an internal bug.
    await initializeBindings();

    for await (const msg of subscription) {
      try {
        const data: any = codec.decode(msg.data);
        //console.log(`Received message on subject ${subject}:`, data);

        // Perform processing logic here
        const { post, params } = data;
        // console.log(`Post: `, post, params);

        switch (post) {
          case "options":
            {
              // the workers announces it is ready
              // and we receive the worker's publicKey
              let workerKey = params.key || "";
              console.log("\nReceived 'options' message from worker");
              console.log("Worker publicKey: ", workerKey);

              let options = callme.onOptions(params);
              console.log("options:", options);

              // we will use its key to encrypt the message
              const encryptedOptions = CipherText.encrypt(
                JSON.stringify(options),
                workerKey
              );
              console.log("Encrypted options: ", encryptedOptions);

              // we reply with the command we want the worker to execute
              // and with the encrypted payload
              msg.respond(
                codec.encode({
                  success: true,
                  data: {
                    command: "options",
                    encrypted: encryptedOptions,
                  },
                  error: undefined,
                })
              );
            }
            break;

          case "ready":
            {
              // the workers announces it is ready
              // and we receive the worker's publicKey
              let workerKey = params.key || "";
              console.log("\nReceived 'ready' message from worker");
              console.log("Worker publicKey: ", workerKey);

              let payload = callme.onReady(params);
              console.log("payload:", payload);

              // we will use its key to encrypt the message
              const encryptedPayload = CipherText.encrypt(
                JSON.stringify(payload),
                workerKey
              );
              console.log("Encrypted payload: ", encryptedPayload);

              // we reply with the command we want the worker to execute
              // and with the encrypted payload
              msg.respond(
                codec.encode({
                  success: true,
                  data: {
                    command: "execute",
                    encrypted: encryptedPayload,
                  },
                  error: undefined,
                })
              );
            }
            break;

          case "done":
            {
              let result = params.result || "";
              console.log("\nReceived 'done' message from worker");

              let done = callme.onDone(params);
              console.log("done: ", done);

              msg.respond(
                codec.encode({
                  success: true,
                  data: {
                    command: "close",
                    status: JSON.stringify(done),
                  },
                  error: undefined,
                })
              );

              // we want to insure that messages that are in flight
              // get processed, so we are going to drain the
              // connection. Drain is the same as close, but makes
              // sure that all messages in flight get seen
              // by the iterator. After calling drain on the connection
              // the connection closes.
              setTimeout(async () => {
                await connection.drain();
              }, 1000);
            }
            break;
        }
      } catch (err) {
        console.error("Error decoding message: ", err);
      }
    }
  })();
}

/*
async function main(args: string[]) {
  const nc = await connect({ servers: NATS_SERVER });

  // create some client address, this will be done by 
  // the web API when calling a worker
  const clientSecret = PrivateKey.random();
  let clientAddress = clientSecret.toPublicKey().toBase58();
  console.log("Client address ", clientAddress);
  
  clientAddress = "B62qrYPDY555koJFAdNaUyw21WCNUgie9bmsBs2gCh6DSdhQmuN4qu6";
  
  // now subscribe and listen in this Address
  listen(nc, `zkcw:${clientAddress}`);

  // we want to insure that messages that are in flight
  // get processed, so we are going to drain the
  // connection. Drain is the same as close, but makes
  // sure that all messages in flight get seen
  // by the iterator. After calling drain on the connection
  // the connection closes.
  //await nc.drain();  
}

main(process.argv.slice(2)).catch((error) => {
  console.error(error);
});
*/

```

Contents of src/mina/encryption/index.ts:
```
export { NATS_SERVER } from "./connections";
export { CipherText } from "./encryption";
export { NATSClient, listen } from "./client";
export {
  postReadyMessage,
  postDoneMessage,
  postOptionsMessage,
} from "./messages";

```

Contents of src/mina/encryption/encryption.ts:
```
import {
  Field,
  PublicKey,
  PrivateKey,
  Encoding,
  Group,
  Encryption,
  initializeBindings,
} from "o1js";

export { CipherText };

interface CipherTextObject {
  cipherText: Field[];
  publicKey: Group;
}

class CipherText {
  static stringify(cipherText: CipherTextObject): string {
    return JSON.stringify(cipherText);
  }

  static parse(jsonStr: string): CipherTextObject {
    let obj = JSON.parse(jsonStr);
    return {
      publicKey: new Group(obj.publicKey),
      cipherText: (obj.cipherText || []).map((t: string) => Field(t)),
    };
  }

  static encrypt(message: string, publicId: string): string {
    try {
      let fields: Field[] = Encoding.stringToFields(message);
      let encripted = Encryption.encrypt(
        fields,
        PublicKey.fromBase58(publicId)
      );
      return CipherText.stringify(encripted);
    } catch (err) {
      throw Error(
        `Could not encrypt message='${message}' using key='${publicId}'.` +
          ` Error ${err}`
      );
    }
  }

  static decrypt(cipherText: string, privateKey: string): string {
    try {
      let fields = Encryption.decrypt(
        CipherText.parse(cipherText),
        PrivateKey.fromBase58(privateKey)
      );
      let decrypted = Encoding.stringFromFields(fields);
      return decrypted;
    } catch (err) {
      throw Error(
        `Could not decrypt cipher='${cipherText}'.` + ` Error ${err}`
      );
    }
  }

  static async initialize() {
    await initializeBindings();
  }
}

```

Contents of src/mina/utils/fee.ts:
```
import { UInt64 } from "o1js";
import config from "../../cloud/config";

/**
 * Calculate the fee for a transaction
 * @returns the fee for a transaction
 */
export async function fee(): Promise<UInt64> {
  //TODO: update after mainnet launch and resolution of the issue https://github.com/o1-labs/o1js/issues/1626
  return UInt64.fromJSON(config.MINAFEE);
}

```

Contents of src/mina/utils/index.ts:
```
export * from "./base64";
export * from "./fetch";
export * from "./fields";
export * from "./fee";
export * from "./mina";

```

Contents of src/mina/utils/fields.ts:
```
import { Field, Poseidon } from "o1js";
import { fieldToBase64, fieldFromBase64 } from "./base64";

/**
 * Serialize fields to a string using base64 URL-friendly encoding
 * @param fields the fields array to serialize
 * @returns the serialized string
 */
export function serializeFields(fields: Field[]): string {
  const hash = Poseidon.hash(fields);
  const value = [Field(fields.length), hash, ...fields];
  //return value.map((f) => f.toBigInt().toString(36)).join(".");
  return value.map((f) => fieldToBase64(f)).join(".");
}

/**
 * Deserialize fields from a string using base64 URL-friendly encoding
 * @param s the string to deserialize
 * @returns the deserialized fields array
 */
export function deserializeFields(s: string): Field[] {
  try {
    //const value = s.split(".").map((n) => Field(BigInt(convert(n, 36))));
    const value = s.split(".").map((n) => fieldFromBase64(n));
    const length = value[0];
    if (
      Field(value.length - 2)
        .equals(length)
        .toBoolean() === false
    )
      throw new Error("deserializeFields: invalid length");
    const hash = Poseidon.hash(value.slice(2));
    if (hash.equals(value[1]).toBoolean()) {
      return value.slice(2);
    } else throw new Error("deserializeFields: invalid hash: data mismatch");
  } catch (e: any) {
    throw new Error(`deserializeFields: invalid string: ${s}: ${e}`);
  }
}

```

Contents of src/mina/utils/base64.ts:
```
import { Field } from "o1js";
import { toBase, fromBase } from "../../cloud/utils/base64";

// URL friendly base64 encoding
const TABLE =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

export function fieldToBase56(field: Field): string {
  const digits = toBase(field.toBigInt(), 56n);
  //console.log("digits:", digits);
  const str = digits.map((x) => TABLE[Number(x)]).join("");
  //console.log("str:", str);
  return str;
}

export function fieldFromBase56(str: string): Field {
  const base56Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
  const x = fromBase(base56Digits, 56n);
  return Field(x);
}

export function fieldToBase64(field: Field): string {
  const digits = toBase(field.toBigInt(), 64n);
  //console.log("digits:", digits);
  const str = digits.map((x) => TABLE[Number(x)]).join("");
  //console.log("str:", str);
  return str;
}

export function fieldFromBase64(str: string): Field {
  const base64Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
  const x = fromBase(base64Digits, 64n);
  return Field(x);
}

```

Contents of src/mina/utils/mina.ts:
```
export {
  initBlockchain,
  accountBalance,
  accountBalanceMina,
  MinaNetworkInstance,
  currentNetwork,
  getNetworkIdHash,
  getCurrentNetwork,
  getDeployer,
};

import {
  Mina,
  PublicKey,
  PrivateKey,
  UInt64,
  fetchAccount,
  Field,
  Lightnet,
  CircuitString,
} from "o1js";
import { networks, blockchain, MinaNetwork, Local } from "../../cloud";

/**
 * MinaNetworkInstance is the data structure for a Mina network instance, keeping track of the keys, network, and network ID hash.
 */
interface MinaNetworkInstance {
  /** The keys for the deployers */
  keys: Mina.TestPublicKey[];

  /** The network */
  network: MinaNetwork;

  /** The network ID hash */
  networkIdHash: Field;
}

let currentNetwork: MinaNetworkInstance | undefined = undefined;

function getNetworkIdHash(): Field {
  if (currentNetwork === undefined) {
    throw new Error("Network is not initialized");
  }
  return currentNetwork.networkIdHash;
}

function getCurrentNetwork(): MinaNetworkInstance {
  if (currentNetwork === undefined) {
    throw new Error("Network is not initialized");
  }
  return currentNetwork;
}

function getDeployer(): Mina.TestPublicKey | undefined {
  if (currentNetwork === undefined) {
    throw new Error("Network is not initialized");
  }
  if (currentNetwork.keys.length < 1) return undefined;
  return currentNetwork.keys[0];
}

/**
 * Initializes the Mina blockchain network
 * Due to the limitations of the Mina SDK, only one network can be initialized at a time
 * This function should be called before any other Mina functions
 * @param instance the blockchain instance to initialize
 * @param deployersNumber the number of deployers to use for the network (only for local and lightnet networks)
 * @returns the Mina network instance
 */
async function initBlockchain(
  instance: blockchain,
  deployersNumber: number = 0
): Promise<MinaNetworkInstance> {
  /*
  if (instance === "mainnet") {
    throw new Error("Mainnet is not supported yet by zkApps");
  }
  */
  if (currentNetwork !== undefined) {
    if (currentNetwork?.network.chainId === instance) {
      return currentNetwork;
    } else {
      throw new Error(
        `Network is already initialized to different chain ${currentNetwork.network.chainId}, cannot initialize to ${instance}`
      );
    }
  }
  const networkIdHash = CircuitString.fromString(instance).hash();

  // await used for compatibility with future versions of o1js
  if (instance === "local") {
    const local = await Mina.LocalBlockchain({
      proofsEnabled: true,
    });
    Mina.setActiveInstance(local);
    if (deployersNumber > local.testAccounts.length)
      throw new Error("Not enough test accounts");
    currentNetwork = {
      keys: local.testAccounts,
      network: Local,
      networkIdHash,
    };
    return currentNetwork;
  }

  const network = networks.find((n) => n.chainId === instance);
  if (network === undefined) {
    throw new Error("Unknown network");
  }

  const networkInstance = Mina.Network({
    mina: network.mina,
    archive: network.archive,
    lightnetAccountManager: network.accountManager,
    networkId: instance === "mainnet" ? "mainnet" : "testnet",
  });
  Mina.setActiveInstance(networkInstance);

  const keys: Mina.TestPublicKey[] = [];

  if (deployersNumber > 0) {
    if (instance === "lightnet") {
      for (let i = 0; i < deployersNumber; i++) {
        const keyPair = await Lightnet.acquireKeyPair();
        const key = Mina.TestPublicKey(keyPair.privateKey);
        keys.push(key);
      }
    } else {
      const deployers = process.env.DEPLOYERS;
      if (
        deployers === undefined ||
        Array.isArray(deployers) === false ||
        deployers.length < deployersNumber
      )
        throw new Error("Deployers are not set");
      for (let i = 0; i < deployersNumber; i++) {
        const privateKey = PrivateKey.fromBase58(deployers[i]);
        const key = Mina.TestPublicKey(privateKey);
        keys.push(key);
      }
    }
  }

  currentNetwork = {
    keys,
    network,
    networkIdHash,
  };
  return currentNetwork;
}

/**
 * Fetches the account balance for a given public key
 * @param address the public key
 * @returns the account balance
 */
async function accountBalance(address: PublicKey): Promise<UInt64> {
  await fetchAccount({ publicKey: address });
  if (Mina.hasAccount(address)) return Mina.getBalance(address);
  else return UInt64.from(0);
}

/**
 * Fetches the account balance for a given public key and returns it in Mina
 * @param address the public key
 * @returns the account balance in MINA
 */
async function accountBalanceMina(address: PublicKey): Promise<number> {
  return Number((await accountBalance(address)).toBigInt()) / 1e9;
}

```

Contents of src/mina/utils/fetch.ts:
```
import {
  PublicKey,
  Field,
  Mina,
  fetchAccount,
  checkZkappTransaction,
} from "o1js";
import { sleep } from "../../cloud";

/**
 * Fetches the Mina account for a given public key with error handling
 * @param params the parameters for fetching the account
 * @param params.publicKey the public key of the account
 * @param params.tokenId the token id of the account
 * @param params.force whether to force the fetch - use it only if you are sure the account exists
 * @returns the account object
 */
export async function fetchMinaAccount(params: {
  publicKey: string | PublicKey;
  tokenId?: string | Field | undefined;
  force?: boolean;
}) {
  const { publicKey, tokenId, force } = params;
  const timeout = 1000 * 60 * 2; // 2 minutes
  const startTime = Date.now();
  let result = { account: undefined };
  while (Date.now() - startTime < timeout) {
    try {
      const result = await fetchAccount({
        publicKey,
        tokenId,
      });
      return result;
    } catch (error: any) {
      if (force === true)
        console.log("Error in fetchMinaAccount:", {
          error,
          publicKey:
            typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
          tokenId: tokenId?.toString(),
          force,
        });
      else {
        console.log("fetchMinaAccount error", {
          error,
          publicKey:
            typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
          tokenId: tokenId?.toString(),
          force,
        });
        return result;
      }
    }
    await sleep(1000 * 5);
  }
  if (force === true)
    throw new Error(
      `fetchMinaAccount timeout
      ${{
        publicKey:
          typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
        tokenId: tokenId?.toString(),
        force,
      }}`
    );
  else
    console.log(
      "fetchMinaAccount timeout",
      typeof publicKey === "string" ? publicKey : publicKey.toBase58(),
      tokenId?.toString(),
      force
    );
  return result;
}

/**
 * Fetches the Mina actions for a given public key with error handling
 * @param publicKey the public key of the contract
 * @param fromActionState the starting action state
 * @param endActionState the ending action state
 * @returns the actions array
 */

export async function fetchMinaActions(
  publicKey: PublicKey,
  fromActionState: Field,
  endActionState?: Field
) {
  const timeout = 1000 * 60 * 600; // 10 hours
  const startTime = Date.now();
  while (Date.now() - startTime < timeout) {
    try {
      let actions = await Mina.fetchActions(publicKey, {
        fromActionState,
        endActionState,
      });
      if (Array.isArray(actions)) return actions;
      else console.log("Cannot fetch actions - wrong format");
    } catch (error: any) {
      console.log(
        "Error in fetchMinaActions",
        error.toString().substring(0, 300)
      );
    }
    await sleep(1000 * 60 * 2);
  }
  console.log("Timeout in fetchMinaActions");
  return undefined;
}

/**
 * Fetches the Mina transaction for a given hash with error handling
 * @param hash the hash of the transaction
 * @returns the transaction object
 */
export async function checkMinaZkappTransaction(hash: string) {
  try {
    const result = await checkZkappTransaction(hash);
    return result;
  } catch (error) {
    console.error("Error in checkZkappTransaction:", error);
    return { success: false };
  }
}

```

Contents of src/mina/local/local.ts:
```
import {
  makeString,
  blockchain,
  TransactionMetadata,
  CloudTransaction,
  DeployerKeyPair,
  TaskData,
  JobData,
  JobEvent,
  Cloud,
  Local,
  zkCloudWorker,
} from "../../cloud";
import { ApiCommand } from "../api/api";

/**
 * LocalCloud is a cloud that runs on the local machine for testing and development
 * It uses LocalStorage to store jobs, tasks, transactions, and data
 * It uses a localWorker to execute the tasks
 * It can be used to test the cloud functionality without deploying to the cloud
 * @param localWorker the worker to execute the tasks
 */
export class LocalCloud extends Cloud {
  readonly localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;

  /**
   * Constructor for LocalCloud
   * @param params the parameters to create the LocalCloud
   * @param params.job the job data
   * @param params.chain the blockchain to execute the job on, can be any blockchain, not only local
   * @param params.cache the cache folder
   * @param params.stepId the step id
   * @param params.localWorker the worker to execute the tasks
   */
  constructor(params: {
    job: JobData;
    chain: blockchain;
    cache?: string;
    stepId?: string;
    localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
  }) {
    const { job, chain, cache, stepId, localWorker } = params;

    const { id, jobId, developer, repo, task, userId, args, metadata, taskId } =
      job;
    super({
      id: id,
      jobId: jobId,
      stepId: stepId ?? "stepId",
      taskId: taskId ?? "taskId",
      cache: cache ?? "./cache",
      developer: developer,
      repo: repo,
      task: task,
      userId: userId,
      args: args,
      metadata: metadata,
      isLocalCloud: true,
      chain,
    });
    this.localWorker = localWorker;
  }

  /**
   * Provides the deployer key pair for testing and development
   * @returns the deployer key pair
   */
  public async getDeployer(): Promise<DeployerKeyPair | undefined> {
    const privateKey = process.env.DEPLOYER_PRIVATE_KEY;
    const publicKey = process.env.DEPLOYER_PUBLIC_KEY;
    try {
      return privateKey === undefined || publicKey === undefined
        ? undefined
        : ({
            privateKey,
            publicKey,
          } as DeployerKeyPair);
    } catch (error) {
      console.error(
        `getDeployer: error getting deployer key pair: ${error}`,
        error
      );
      return undefined;
    }
  }

  /**
   * Releases the deployer key pair
   */
  public async releaseDeployer(params: {
    publicKey: string;
    txsHashes: string[];
  }): Promise<void> {
    console.log("LocalCloud: releaseDeployer", params);
  }

  /**
   * Gets the data by key
   * @param key the key to get the data
   * @returns the data
   */
  public async getDataByKey(key: string): Promise<string | undefined> {
    const value = LocalStorage.data[key];
    return value;
  }

  /**
   * Saves the data by key
   * @param key the key to save the data
   * @param value the value to save
   */
  public async saveDataByKey(
    key: string,
    value: string | undefined
  ): Promise<void> {
    if (value !== undefined) LocalStorage.data[key] = value;
    else delete LocalStorage.data[key];
  }

  /**
   * Saves the file
   * @param filename the filename to save
   * @param value the value to save
   */
  public async saveFile(filename: string, value: Buffer): Promise<void> {
    LocalStorage.files[filename] = value;
    //throw new Error("Method not implemented.");
    //await saveBinaryFile({ data: value, filename });
  }

  /**
   * Loads the file
   * @param filename
   * @returns the file data
   */
  public async loadFile(filename: string): Promise<Buffer | undefined> {
    return LocalStorage.files[filename];
    //throw new Error("Method not implemented.");
    //const data = await loadBinaryFile(filename);
    //return data;
  }

  /**
   * Encrypts the data
   * @param params
   * @param params.data the data
   * @param params.context the context
   * @param params.keyId the key id, optional
   * @returns encrypted data
   */
  public async encrypt(params: {
    data: string;
    context: string;
    keyId?: string;
  }): Promise<string | undefined> {
    return JSON.stringify(params);
  }

  /**
   * Decrypts the data
   * @param params
   * @param params.data the data
   * @param params.context the context
   * @param params.keyId the key id, optional
   * @returns
   */
  public async decrypt(params: {
    data: string;
    context: string;
    keyId?: string;
  }): Promise<string | undefined> {
    const { data, context, keyId } = JSON.parse(params.data);
    if (context !== params.context) {
      console.error("decrypt: context mismatch");
      return undefined;
    }
    if (keyId !== params.keyId) {
      console.error("decrypt: keyId mismatch");
      return undefined;
    }
    return data;
  }

  /**
   * Generates an id for local cloud
   * @returns generated unique id
   */
  private static generateId(tx: string | undefined = undefined): string {
    //const data =
    //  tx ?? JSON.stringify({ time: Date.now(), data: makeString(32) });
    //return stringHash(data);
    return Date.now() + "." + makeString(32);
  }

  /**
   * Send transactions to the local cloud
   * @param transactions the transactions to add
   * @returns the transaction ids
   */
  public async sendTransactions(
    transactions: string[]
  ): Promise<CloudTransaction[]> {
    return await LocalCloud.addTransactions(transactions);
  }

  /**
   * Adds transactions to the local cloud
   * @param transactions the transactions to add
   * @returns the transaction ids
   */
  public static async addTransactions(
    transactions: string[] | CloudTransaction[]
  ): Promise<CloudTransaction[]> {
    const timeReceived = Date.now();
    const txs: CloudTransaction[] = [];
    transactions.forEach((tx) => {
      if (typeof tx === "string") {
        const txId = LocalCloud.generateId(
          JSON.stringify({ tx, time: timeReceived })
        );
        const transaction: CloudTransaction = {
          txId,
          transaction: tx,
          timeReceived,
          status: "accepted",
        };
        LocalStorage.transactions[txId] = transaction;
        txs.push(transaction);
      } else {
        LocalStorage.transactions[tx.txId] = tx;
        txs.push(tx);
      }
    });
    return txs;
  }

  /**
   * Deletes a transaction from the local cloud
   * @param txId the transaction id to delete
   */
  public async deleteTransaction(txId: string): Promise<void> {
    if (LocalStorage.transactions[txId] === undefined)
      throw new Error(`deleteTransaction: Transaction ${txId} not found`);
    delete LocalStorage.transactions[txId];
  }

  public async getTransactions(): Promise<CloudTransaction[]> {
    const txs = Object.keys(LocalStorage.transactions).map((txId) => {
      return LocalStorage.transactions[txId];
    });
    return txs;
  }

  /**
   * Publish the transaction metadata in human-readable format
   * @param params
   * @param params.txId the transaction id
   * @param params.metadata the metadata
   */
  public async publishTransactionMetadata(params: {
    txId: string;
    metadata: TransactionMetadata;
  }): Promise<void> {
    console.log("publishTransactionMetadata:", params);
  }

  /**
   * Runs the worker in the local cloud
   * @param params the parameters to run the worker
   * @param params.command the command to run
   * @param params.data the data to use
   * @param params.chain the blockchain to execute the job on
   * @param params.localWorker the worker to execute the tasks
   * @returns the job id
   */
  public static async run(params: {
    command: ApiCommand;
    data: {
      developer: string;
      repo: string;
      transactions: string[];
      task: string;
      userId?: string;
      args?: string;
      metadata?: string;
    };
    chain: blockchain;
    localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
  }): Promise<string> {
    const { command, data, chain, localWorker } = params;
    const { developer, repo, transactions, task, userId, args, metadata } =
      data;

    const timeCreated = Date.now();
    const jobId = LocalCloud.generateId();
    const job: JobData = {
      id: "local",
      jobId,
      developer,
      repo,
      task,
      userId,
      args,
      metadata,
      txNumber: command === "recursiveProof" ? transactions.length : 1,
      timeCreated,
      timeStarted: timeCreated,
      chain,
    } as JobData;
    const cloud = new LocalCloud({
      job,
      chain,
      localWorker,
    });
    const worker = await localWorker(cloud);
    if (worker === undefined) throw new Error("worker is undefined");
    const result =
      command === "recursiveProof"
        ? await LocalCloud.sequencer({
            worker,
            data,
          })
        : command === "execute"
        ? await worker.execute(transactions)
        : undefined;

    const timeFinished = Date.now();
    if (result !== undefined) {
      LocalStorage.jobEvents[jobId] = {
        jobId,
        jobStatus: "finished",
        eventTime: timeFinished,
        result,
      };
      job.timeFinished = timeFinished;
      job.jobStatus = "finished";
      job.result = result;
    } else {
      LocalStorage.jobEvents[jobId] = {
        jobId,
        jobStatus: "failed",
        eventTime: timeFinished,
      };
      job.timeFailed = timeFinished;
      job.jobStatus = "failed";
    }
    job.billedDuration = timeFinished - timeCreated;
    LocalStorage.jobs[jobId] = job;
    return jobId;
  }

  /**
   * Runs the recursive proof in the local cloud
   * @param data the data to use
   * @param data.transactions the transactions to process
   * @param data.task the task to execute
   * @param data.userId the user id
   * @param data.args the arguments for the job
   * @param data.metadata the metadata for the job
   * @returns the job id
   */
  public async recursiveProof(data: {
    transactions: string[];
    task?: string;
    userId?: string;
    args?: string;
    metadata?: string;
  }): Promise<string> {
    return await LocalCloud.run({
      command: "recursiveProof",
      data: {
        developer: this.developer,
        repo: this.repo,
        transactions: data.transactions,
        task: data.task ?? "recursiveProof",
        userId: data.userId,
        args: data.args,
        metadata: data.metadata,
      },
      chain: this.chain,
      localWorker: this.localWorker,
    });
  }

  /**
   * Executes the task in the local cloud
   * @param data the data to use
   * @param data.transactions the transactions to process
   * @param data.task the task to execute
   * @param data.userId the user id
   * @param data.args the arguments for the job
   * @param data.metadata the metadata for the job
   * @returns the job id
   */
  public async execute(data: {
    transactions: string[];
    task: string;
    userId?: string;
    args?: string;
    metadata?: string;
  }): Promise<string> {
    return await LocalCloud.run({
      command: "execute",
      data: {
        developer: this.developer,
        repo: this.repo,
        transactions: data.transactions,
        task: data.task,
        userId: data.userId,
        args: data.args,
        metadata: data.metadata,
      },
      chain: this.chain,
      localWorker: this.localWorker,
    });
  }

  /**
   * Gets the job result
   * @param jobId the job id
   * @returns the job data
   */
  public async jobResult(jobId: string): Promise<JobData | undefined> {
    return LocalStorage.jobs[jobId];
  }

  /**
   * Adds a task to the local cloud
   * @param data the data to use
   * @param data.task the task to execute
   * @param data.startTime the start time for the task
   * @param data.userId the user id
   * @param data.args the arguments for the job
   * @param data.metadata the metadata for the job
   * @returns the task id
   */
  public async addTask(data: {
    task: string;
    startTime?: number;
    userId?: string;
    args?: string;
    metadata?: string;
  }): Promise<string> {
    const taskId = LocalCloud.generateId();
    LocalStorage.tasks[taskId] = {
      ...data,
      id: "local",
      taskId,
      timeCreated: Date.now(),
      developer: this.developer,
      repo: this.repo,
      chain: this.chain,
    } as TaskData;
    return taskId;
  }

  /**
   * Deletes a task from the local cloud
   * @param taskId the task id to delete
   */
  public async deleteTask(taskId: string): Promise<void> {
    if (LocalStorage.tasks[taskId] === undefined)
      throw new Error(`deleteTask: Task ${taskId} not found`);
    delete LocalStorage.tasks[taskId];
  }

  /**
   * Processes the tasks in the local cloud
   */
  public async processTasks(): Promise<void> {
    await LocalCloud.processLocalTasks({
      developer: this.developer,
      repo: this.repo,
      localWorker: this.localWorker,
      chain: this.chain,
    });
  }

  /**
   * Processes the local tasks
   * @param params the parameters to process the local tasks
   * @param params.developer the developer of the repo
   * @param params.repo the repo
   * @param params.localWorker the worker to execute the tasks
   * @param params.chain the blockchain to execute the job on
   */
  static async processLocalTasks(params: {
    developer: string;
    repo: string;
    localWorker: (cloud: Cloud) => Promise<zkCloudWorker>;
    chain: blockchain;
  }): Promise<number> {
    const { developer, repo, localWorker, chain } = params;
    for (const taskId in LocalStorage.tasks) {
      const data = LocalStorage.tasks[taskId];
      const jobId = LocalCloud.generateId();
      const timeCreated = Date.now();
      if (data.startTime !== undefined && data.startTime < timeCreated)
        continue;
      const job = {
        id: "local",
        jobId: jobId,
        taskId: taskId,
        developer,
        repo,
        task: data.task,
        userId: data.userId,
        args: data.args,
        metadata: data.metadata,
        txNumber: 1,
        timeCreated: timeCreated,
      } as JobData;
      const cloud = new LocalCloud({
        job,
        chain,
        localWorker,
      });
      const worker = await localWorker(cloud);
      const result = await worker.task();
      const timeFinished = Date.now();
      if (result !== undefined) {
        LocalStorage.jobEvents[jobId] = {
          jobId,
          jobStatus: "finished",
          eventTime: timeFinished,
          result,
        };
        job.timeFinished = timeFinished;
      } else {
        LocalStorage.jobEvents[jobId] = {
          jobId,
          jobStatus: "failed",
          eventTime: timeFinished,
        };
        job.timeFailed = timeFinished;
      }
      job.billedDuration = timeFinished - timeCreated;
      LocalStorage.jobs[jobId] = job;
    }
    let count = 0;
    for (const task in LocalStorage.tasks) count++;
    return count;
  }

  /**
   * Runs the sequencer in the local cloud
   * @param params the parameters to run the sequencer
   * @param params.worker the worker to execute the tasks
   * @param params.data the data to use
   * @returns the proof
   */
  static async sequencer(params: {
    worker: zkCloudWorker;
    data: {
      developer: string;
      repo: string;
      transactions: string[];
      task?: string;
      userId?: string;
      args?: string;
      metadata?: string;
    };
  }): Promise<string> {
    const { worker, data } = params;
    const { transactions } = data;
    if (transactions.length === 0)
      throw new Error("No transactions to process");
    const proofs: string[] = [];
    for (const transaction of transactions) {
      const result = await worker.create(transaction);
      if (result === undefined) throw new Error("Failed to create proof");
      proofs.push(result);
    }
    let proof = proofs[0];
    for (let i = 1; i < proofs.length; i++) {
      const result = await worker.merge(proof, proofs[i]);
      if (result === undefined) throw new Error("Failed to merge proofs");
      proof = result;
    }
    return proof;
  }

  /**
   * forces the worker to restart
   */
  async forceWorkerRestart(): Promise<void> {
    throw new Error("forceWorkerRestart called in LocalCloud");
  }
}

/**
 * LocalStorage is a local storage for the local cloud.
 * It stores jobs, tasks, transactions, and data.
 * It can be used to test the cloud functionality without deploying to the cloud.
 */
export class LocalStorage {
  /** The jobs */
  static jobs: { [key: string]: JobData } = {};

  /** The job events */
  static jobEvents: { [key: string]: JobEvent } = {};

  /** The data */
  static data: { [key: string]: string } = {};

  /** The files */
  static files: { [key: string]: Buffer } = {};

  /** The transactions */
  static transactions: {
    [key: string]: CloudTransaction;
  } = {};

  /** The tasks */
  static tasks: { [key: string]: TaskData } = {};

  /**
   * Saves the data.
   * @param name The name to save the data under.
   * @throws Error Method not implemented to keep web compatibility.
   */
  static async saveData(name: string): Promise<void> {
    throw new Error("Method not implemented to keep web compatibility.");
    const data = {
      jobs: LocalStorage.jobs,
      data: LocalStorage.data,
      transactions: LocalStorage.transactions,
      tasks: LocalStorage.tasks,
    };
    const filename = name + ".cloud";
    // await saveFile({ data, filename });
  }

  /**
   * Loads the data.
   * @param name The name to load the data from.
   * @throws Error Method not implemented to keep web compatibility.
   */
  static async loadData(name: string): Promise<void> {
    throw new Error("Method not implemented to keep web compatibility.");
    const filename = name + ".cloud";
    /*
    const data = await loadFile(filename);
    if (data === undefined) return;
    LocalStorage.jobs = data.jobs;
    LocalStorage.data = data.data;
    LocalStorage.transactions = data.transactions;
    LocalStorage.tasks = data.tasks;
    */
  }
}

```

Contents of src/mina/verification/index.ts:
```
export * from "./verification";

```

Contents of src/mina/verification/verification.ts:
```
import { blockchain } from "../../cloud/networks";
import { SmartContract } from "o1js";

/**
 * VerificationData is a data structure that contains all the information needed to verify a smart contract on a blockchain.
 * contract: The smart contract that needs to be verified.
 * contractDependencies: The smart contracts that need to be compiled before verification.
 * programDependencies: The zk programs that need to be compiled before verification.
 * address: The address of the smart contract on the blockchain.
 * chain: The blockchain on which the smart contract is deployed.
 * image: The logo of the smart contract (public url)
 *
 * Contract, contractDependencies, and programDependencies should be exported from the repo
 */

export interface VerificationData {
  contract: typeof SmartContract;
  contractDependencies?: (typeof SmartContract)[];
  programDependencies?: any[]; // ZkProgram[];
  address: string;
  chain: blockchain;
  image?: string;
}

```

Contents of src/mina/api/api.ts:
```
import axios, { all } from "axios";
import chalk from "chalk";
import { sleep } from "../../cloud/utils";
import { LocalCloud, LocalStorage } from "../local/local";
import config from "../../cloud/config";
import { zkCloudWorker, Cloud, JobData } from "../../cloud/worker";
import { blockchain } from "../../cloud/networks";
const { ZKCLOUDWORKER_AUTH, ZKCLOUDWORKER_API } = config;

/**
 * The APICommand type for interacting with the zkCloudWorker
 * @typedef { "recursiveProof" | "execute" | "sendTransactions" | "jobResult" | "deploy" | "getBalance" | "queryBilling" } ApiCommand
 * @property recursiveProof The command for the recursiveProof calculation
 * @property execute The command for the execute function call (sync or async)
 * @property sendTransactions The command for sending transactions to the cloud
 * @property jobResult The command for getting the result of the job
 * @property deploy The command for deploying the code to the cloud, it is recommended use CLI tools for deployment
 * @property getBalance The command for getting the balance of the user's account with zkCloudWorker
 * @property queryBilling The command for getting the billing report of the user's account with zkCloudWorker
 */
export type ApiCommand =
  | "recursiveProof"
  | "execute"
  | "sendTransactions"
  | "jobResult"
  | "deploy"
  | "getBalance"
  | "queryBilling";

/**
 * API class for interacting with the zkCloudWorker
 * @property jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
 * @property endpoint The endpoint of the serverless api
 * @property chain The blockchain network to use
 * @property webhook The webhook for the serverless api to get the results
 * @property localWorker The local worker for the serverless api to test the code locally
 */
export class zkCloudWorkerClient {
  readonly jwt: string;
  readonly endpoint?: string;
  readonly chain: blockchain;
  readonly webhook?: string;
  readonly localWorker?: (cloud: Cloud) => Promise<zkCloudWorker>;

  /**
   * Constructor for the API class
   * @param params the parameters for the API class
   * @param params.jwt The jwt token for authentication, get it at https://t.me/minanft_bot?start=auth
   * @param params.zkcloudworker The local worker for the serverless api to test the code locally
   * @param params.chain The blockchain network to use
   * @param params.webhook The webhook for the serverless api to get the results
   */
  constructor(params: {
    jwt: string;
    zkcloudworker?: (cloud: Cloud) => Promise<zkCloudWorker>;
    chain?: blockchain;
    webhook?: string;
  }) {
    const { jwt, zkcloudworker, webhook } = params;
    this.jwt = jwt;

    const chain = params.chain ?? "devnet";
    this.chain = chain;
    this.endpoint =
      chain === "devnet" || chain === "zeko"
        ? ZKCLOUDWORKER_API + chain
        : undefined;
    this.webhook = webhook;
    if (jwt === "local") {
      if (zkcloudworker === undefined)
        throw new Error("worker is required for local mode");
      this.localWorker = zkcloudworker;
    }
  }

  /**
   * Starts a new job for the proof calculation using serverless api call
   * @param data the data for the proof call
   * @param data.developer the developer
   * @param data.repo the repo to use
   * @param data.transactions the transactions
   * @param data.task the task of the job
   * @param data.userId the userId of the job
   * @param data.args the arguments of the job, should be serialized JSON or string
   * @param data.metadata the metadata of the job, should be serialized JSON or string
   * @param data.webhook the webhook for the job
   * @returns { success: boolean, error?: string, jobId?: string }
   * where jonId is the jobId of the job
   *
   * The developers repo should provide a zkcloudworker function
   * that can be called with the given parameters, see the examples
   */
  public async recursiveProof(data: {
    developer: string;
    repo: string;
    transactions: string[];
    task?: string;
    userId?: string;
    args?: string;
    metadata?: string;
    webhook?: string;
  }): Promise<{
    success: boolean;
    error?: string;
    jobId?: string;
  }> {
    const result = await this.apiHub("recursiveProof", data);
    if (
      result.data === "error" ||
      (typeof result.data === "string" && result.data.startsWith("error"))
    )
      return {
        success: false,
        error: result.error,
      };
    else if (result.success === false || result.data?.success === false)
      return {
        success: false,
        error:
          result.error ?? result.data?.error ?? "recursiveProof call failed",
      };
    else if (
      result.success === true &&
      result.data?.success === true &&
      result.data?.jobId !== undefined
    )
      return {
        success: result.success,
        jobId: result.data.jobId,
        error: result.error,
      };
    else
      return {
        success: false,
        error: "recursiveProof call error",
      };
  }

  /**
   * Starts a new job for the function call using serverless api call
   * @param data the data for the proof call
   * @param data.developer the developer
   * @param data.repo the repo to use
   * @param data.transactions the transactions
   * @param data.task the task of the job
   * @param data.userId the userId of the job
   * @param data.args the arguments of the job
   * @param data.metadata the metadata of the job
   * @param data.mode the mode of the job execution: "sync" will not create a job, it will execute the function synchronously within 30 seconds and with the memory limit of 256 MB
   * @returns { success: boolean, error?: string, jobId?: string, result?: any }
   * where jonId is the jobId of the job (for async calls), result is the result of the job (for sync calls)
   */
  public async execute(data: {
    developer: string;
    repo: string;
    transactions: string[];
    task: string;
    userId?: string;
    args?: string;
    metadata?: string;
    mode?: string;
  }): Promise<{
    success: boolean;
    error?: string;
    jobId?: string;
    result?: any;
  }> {
    const result = await this.apiHub("execute", data);
    if (
      result.data === "error" ||
      (typeof result.data === "string" && result.data.startsWith("error"))
    )
      return {
        success: false,
        error: result.error,
      };
    else if (result.success === false || result.data?.success === false)
      return {
        success: false,
        error: result.error ?? result.data?.error ?? "execute call failed",
      };
    else if (
      result.success === true &&
      data.mode === "sync" &&
      result.data !== undefined
    )
      return {
        success: result.success,
        jobId: undefined,
        result: result.data,
        error: result.error,
      };
    else if (
      result.success === true &&
      data.mode !== "sync" &&
      result.data?.success === true &&
      result.data?.jobId !== undefined
    )
      return {
        success: result.success,
        jobId: result.data.jobId,
        result: undefined,
        error: result.error,
      };
    else
      return {
        success: false,
        error: "execute call error",
      };
  }

  /**
   * Sends transactions to the blockchain using serverless api call
   * @param data the data for the proof call
   * @param data.developer the developer
   * @param data.repo the repo to use
   * @param data.transactions the transactions
   * @returns { success: boolean, error?: string, txId?: string[] }
   * where txId is the transaction id of the transaction, in the sequence of the input transactions
   */
  public async sendTransactions(data: {
    developer: string;
    repo: string;
    transactions: string[];
  }): Promise<{
    success: boolean;
    error?: string;
    txId?: string[];
  }> {
    const result = await this.apiHub("sendTransactions", data);
    if (result.data === "error")
      // TODO: check if this is correct in AWS code
      return {
        success: false,
        error: result.error,
      };
    else
      return {
        success: result.success,
        txId: result.data,
        error: result.error,
      };
  }

  /**
   * Gets the result of the job using serverless api call
   * @param data the data for the jobResult call
   * @param data.jobId the jobId of the job
   * @param data.includeLogs include logs in the result, default is false
   * @returns { success: boolean, error?: string, result?: any }
   * where result is the result of the job
   * if the job is not finished yet, the result will be undefined
   * if the job failed, the result will be undefined and error will be set
   * if the job is finished, the result will be set and error will be undefined
   * if the job is not found, the result will be undefined and error will be set
   */
  public async jobResult(data: {
    jobId: string;
    includeLogs?: boolean;
  }): Promise<{
    success: boolean;
    error?: string;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    result?: any;
  }> {
    const result = await this.apiHub("jobResult", data);
    if (this.isError(result.data))
      return {
        success: false,
        error: result.error,
        result: result.data,
      };
    else
      return {
        success: result.success,
        error: result.error,
        result: result.data,
      };
  }

  /**
   * Deploys the code to the cloud using serverless api call
   * @param data the data for the deploy call
   * @param data.repo the repo to use
   * @param data.developer the developer
   * @param data.packageManager the package manager to use
   * @returns { success: boolean, error?: string, jobId?: string}
   * where jobId is the jobId of the job
   */
  public async deploy(data: {
    repo: string;
    developer: string;
    packageManager: string;
  }): Promise<{
    success: boolean;
    error?: string;
    jobId?: string;
  }> {
    // TODO: encrypt env.json
    const { repo, developer, packageManager } = data;
    const result = await this.apiHub("deploy", {
      developer,
      repo,
      args: packageManager,
    });
    if (
      result.data === "error" ||
      (typeof result.data === "string" && result.data.startsWith("error"))
    )
      return {
        success: false,
        error: result.error,
      };
    else
      return {
        success: result.success && result.data?.success,
        jobId: result.data?.jobId,
        error: result.error,
      };
  }

  /**
   * Gets the billing report for the jobs sent using JWT
   * @returns { success: boolean, error?: string, result?: any }
   * where result is the billing report
   */
  public async queryBilling(): Promise<{
    success: boolean;
    error?: string;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    result?: any;
  }> {
    const result = await this.apiHub("queryBilling", {});
    if (this.isError(result.data))
      return {
        success: false,
        error: result.error,
        result: result.data,
      };
    else
      return {
        success: result.success,
        error: result.error,
        result: result.data,
      };
  }

  /**
   * Gets the remaining balance
   * @returns { success: boolean, error?: string, result?: any }
   * where result is the balance
   */
  public async getBalance(): Promise<{
    success: boolean;
    error?: string;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    result?: any;
  }> {
    const result = await this.apiHub("getBalance", {});
    if (this.isError(result.data))
      return {
        success: false,
        error: result.error,
        result: result.data,
      };
    else
      return {
        success: result.success,
        error: result.error,
        result: result.data,
      };
  }

  /**
   * Waits for the job to finish
   * @param data the data for the waitForJobResult call
   * @param data.jobId the jobId of the job
   * @param data.maxAttempts the maximum number of attempts, default is 360 (2 hours)
   * @param data.interval the interval between attempts, default is 20000 (20 seconds)
   * @param data.maxErrors the maximum number of network errors, default is 10
   * @param data.printLogs print logs, default is true
   * @returns { success: boolean, error?: string, result?: any }
   * where result is the result of the job
   */
  public async waitForJobResult(data: {
    jobId: string;
    maxAttempts?: number;
    interval?: number;
    maxErrors?: number;
    printLogs?: boolean; // print logs, default is true
  }): Promise<{
    success: boolean;
    error?: string;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    result?: any;
  }> {
    if (this.jwt === "local") return this.jobResult({ jobId: data.jobId });
    const maxAttempts = data?.maxAttempts ?? 360; // 1 hour
    const interval = data?.interval ?? 10000;
    const maxErrors = data?.maxErrors ?? 10;
    const errorDelay = 30000; // 30 seconds
    const printedLogs: string[] = [];
    const printLogs: boolean = data.printLogs ?? true;

    function print(logs: string[]) {
      logs.forEach((log) => {
        if (printedLogs.includes(log) === false) {
          printedLogs.push(log);
          if (printLogs) {
            // replace all occurrences of "error" with red color
            const text = log.replace(/error/gi, (matched) =>
              chalk.red(matched)
            );
            console.log(text);
          }
        }
      });
    }
    let attempts = 0;
    let errors = 0;
    while (attempts < maxAttempts) {
      const result = await this.apiHub("jobResult", {
        jobId: data.jobId,
        includeLogs: printLogs,
      });
      const isAllLogsFetched =
        result?.data?.isFullLog === true || printLogs === false;
      if (
        printLogs === true &&
        result?.data?.logs !== undefined &&
        result?.data?.logs !== null &&
        Array.isArray(result.data.logs) === true
      )
        print(result.data.logs);
      if (result.success === false) {
        errors++;
        if (errors > maxErrors) {
          return {
            success: false,
            error: "Too many network errors",
            result: undefined,
          };
        }
        await sleep(errorDelay * errors);
      } else {
        if (this.isError(result.data) && isAllLogsFetched)
          return {
            success: false,
            error: result.error,
            result: result.data,
          };
        else if (result.data?.result !== undefined && isAllLogsFetched) {
          return {
            success: result.success,
            error: result.error,
            result: result.data,
          };
        } else if (result.data?.jobStatus === "failed" && isAllLogsFetched) {
          return {
            success: false,
            error: "Job failed",
            result: result.data,
          };
        }
        await sleep(interval);
      }
      attempts++;
    }
    return {
      success: false,
      error: "Timeout",
      result: undefined,
    };
  }

  /**
   * Calls the serverless API
   * @param command the command of the API
   * @param data the data of the API
   * */
  private async apiHub(
    command: ApiCommand,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    data: any
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  ): Promise<{ success: boolean; data?: any; error?: any }> {
    if (this.jwt === "local") {
      if (this.localWorker === undefined)
        throw new Error("localWorker is undefined");

      switch (command) {
        case "recursiveProof": {
          const jobId = await LocalCloud.run({
            command: "recursiveProof",
            data,
            chain: this.chain,
            localWorker: this.localWorker,
          });
          return {
            success: true,
            data: { success: true, jobId },
          };
        }
        case "execute": {
          const jobId = await LocalCloud.run({
            command: "execute",
            data,
            chain: this.chain,
            localWorker: this.localWorker,
          });
          if (data.mode === "sync")
            return {
              success: true,
              data: LocalStorage.jobEvents[jobId].result,
            };
          else
            return {
              success: true,
              data: { success: true, jobId },
            };
        }
        case "jobResult": {
          const job = LocalStorage.jobs[data.jobId];
          if (job === undefined) {
            return {
              success: false,
              error: "local job not found",
            };
          } else {
            return {
              success: true,
              data: job,
            };
          }
        }
        case "sendTransactions": {
          return {
            success: true,
            data: await LocalCloud.addTransactions(data.transactions),
          };
        }
        case "deploy":
          return {
            success: true,
            data: "local_deploy",
          };
        case "queryBilling":
          return {
            success: true,
            data: "local_queryBilling",
          };
        default:
          return {
            success: false,
            error: "local_error",
          };
      }
    } else {
      if (this.endpoint === undefined)
        throw new Error(
          "zkCloudWorker supports only devnet and zeko chains in the cloud."
        );
      const apiData = {
        auth: ZKCLOUDWORKER_AUTH,
        command: command,
        jwtToken: this.jwt,
        data: data,
        chain: this.chain,
        webhook: this.webhook, // TODO: implement webhook code on AWS
      };

      try {
        const response = await axios.post(this.endpoint, apiData);
        return { success: true, data: response.data };
      } catch (error: any) {
        console.error("apiHub error:", error.message ?? error);
        return { success: false, error: error };
      }
    }
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private isError(data: any): boolean {
    if (data === "error") return true;
    if (data?.jobStatus === "failed") return true;
    if (typeof data === "string" && data.toLowerCase().startsWith("error"))
      return true;
    if (data !== undefined && data.error !== undefined) return true;
    return false;
  }
}

```

Contents of src/cloud/networks.ts:
```
export {
  blockchain,
  MinaNetwork,
  networks,
  Mainnet,
  Devnet,
  Zeko,
  Lightnet,
  Local,
};

/**
 * blockchain is the type for the chain ID.
 */
type blockchain = "local" | "devnet" | "lightnet" | "mainnet" | "zeko";

/**
 * MinaNetwork is the data structure for a Mina network, keeping track of the Mina and archive endpoints, chain ID, name, account manager, explorer account URL, explorer transaction URL, and faucet.
 */
interface MinaNetwork {
  /** The Mina endpoints */
  mina: string[];

  /** The archive endpoints */
  archive: string[];

  /** The chain ID */
  chainId: blockchain;

  /** The name of the network (optional) */
  name?: string;

  /** The account manager for Lightnet (optional) */
  accountManager?: string;

  /** The explorer account URL (optional) */
  explorerAccountUrl?: string;

  /** The explorer transaction URL (optional) */
  explorerTransactionUrl?: string;

  /** The faucet URL (optional) */
  faucet?: string;
}

const Mainnet: MinaNetwork = {
  mina: [
    //"https://proxy.devnet.minaexplorer.com/graphql",
    "https://api.minascan.io/node/mainnet/v1/graphql",
  ],
  archive: [
    "https://api.minascan.io/archive/mainnet/v1/graphql",
    //"https://archive.devnet.minaexplorer.com",
  ],
  explorerAccountUrl: "https://minascan.io/mainnet/account/",
  explorerTransactionUrl: "https://minascan.io/mainnet/tx/",
  chainId: "mainnet",
  name: "Mainnet",
};

const Local: MinaNetwork = {
  mina: [],
  archive: [],
  chainId: "local",
};

const Devnet: MinaNetwork = {
  mina: [
    "https://api.minascan.io/node/devnet/v1/graphql",
    //"https://proxy.devnet.minaexplorer.com/graphql",
  ],
  archive: [
    "https://api.minascan.io/archive/devnet/v1/graphql",
    //"https://archive.devnet.minaexplorer.com",
  ],
  explorerAccountUrl: "https://minascan.io/devnet/account/",
  explorerTransactionUrl: "https://minascan.io/devnet/tx/",
  chainId: "devnet",
  name: "Devnet",
  faucet: "https://faucet.minaprotocol.com",
};

const Zeko: MinaNetwork = {
  mina: ["https://devnet.zeko.io/graphql"],
  archive: [],
  explorerAccountUrl: "https://zekoscan.io/devnet/account/",
  explorerTransactionUrl: "https://zekoscan.io/devnet/tx/",
  chainId: "zeko",
  name: "Zeko",
  faucet: "https://zeko.io/faucet",
};

const Lightnet: MinaNetwork = {
  mina: ["http://localhost:8080/graphql"],
  archive: ["http://localhost:8282"],
  accountManager: "http://localhost:8181",
  chainId: "lightnet",
  name: "Lightnet",
};

const networks: MinaNetwork[] = [Mainnet, Local, Devnet, Zeko, Lightnet];

/*
// not supported by o1js v1

const Berkeley: MinaNetwork = {
  mina: [
    "https://api.minascan.io/node/berkeley/v1/graphql",
    "https://proxy.berkeley.minaexplorer.com/graphql",
  ],
  archive: [
    "https://api.minascan.io/archive/berkeley/v1/graphql",
    "https://archive.berkeley.minaexplorer.com",
  ],
  explorerAccountUrl: "https://minascan.io/berkeley/account/",
  explorerTransactionUrl: "https://minascan.io/berkeley/tx/",
  chainId: "berkeley",
  name: "Berkeley",
};

const TestWorld2: MinaNetwork = {
  mina: ["https://api.minascan.io/node/testworld/v1/graphql"],
  archive: ["https://archive.testworld.minaexplorer.com"],
  explorerAccountUrl: "https://minascan.io/testworld/account/",
  explorerTransactionUrl: "https://minascan.io/testworld/tx/",
  chainId: "testworld2",
  name: "TestWorld2",
};

*/

```

Contents of src/cloud/index.ts:
```
export * from "./utils";
export * from "./worker";
export * from "./config";
export * from "./networks";

```

Contents of src/cloud/config.ts:
```
const config = {
  MINAFEE: "200000000",
  ZKCLOUDWORKER_AUTH:
    "M6t4jtbBAFFXhLERHQWyEB9JA9xi4cWqmYduaCXtbrFjb7yaY7TyaXDunKDJNiUTBEcyUomNXJgC",
  ZKCLOUDWORKER_API: "https://api.zkcloudworker.com/v1/",
  ZKCLOUDWORKER_NATS: "https://cloud.zkcloudworker.com:4222",
  ZKCLOUDWORKER_NATS_WS: "wss://cloud.zkcloudworker.com:4223",
};

export default config;

```

Contents of src/cloud/utils/utils.ts:
```
export function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

export function makeString(length: number): string {
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  let outString: string = ``;
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  const inOptions: string = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`;

  for (let i = 0; i < length; i++) {
    outString += inOptions.charAt(Math.floor(Math.random() * inOptions.length));
  }

  return outString;
}

export function formatTime(ms: number): string {
  if (ms === undefined) return "";
  if (ms < 1000) return ms.toString() + " ms";
  if (ms < 60 * 1000)
    return parseInt((ms / 1000).toString()).toString() + " sec";
  if (ms < 60 * 60 * 1000) {
    const minutes = parseInt((ms / 1000 / 60).toString());
    const seconds = parseInt(((ms - minutes * 60 * 1000) / 1000).toString());
    return minutes.toString() + " min " + seconds.toString() + " sec";
  } else {
    const hours = parseInt((ms / 1000 / 60 / 60).toString());
    const minutes = parseInt(
      ((ms - hours * 60 * 60 * 1000) / 1000 / 60).toString()
    );
    return hours.toString() + " h " + minutes.toString() + " min";
  }
}

export class Memory {
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  static rss: number = 0;
  constructor() {
    Memory.rss = 0;
  }

  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  public static info(description: string = ``, fullInfo: boolean = false) {
    const memoryData = process.memoryUsage();
    const formatMemoryUsage = (data: number) =>
      `${Math.round(data / 1024 / 1024)} MB`;
    const oldRSS = Memory.rss;
    Memory.rss = Math.round(memoryData.rss / 1024 / 1024);

    const memoryUsage = fullInfo
      ? {
          step: `${description}:`,
          rssDelta: `${(oldRSS === 0
            ? 0
            : Memory.rss - oldRSS
          ).toString()} MB -> Resident Set Size memory change`,
          rss: `${formatMemoryUsage(
            memoryData.rss
          )} -> Resident Set Size - total memory allocated`,
          heapTotal: `${formatMemoryUsage(
            memoryData.heapTotal
          )} -> total size of the allocated heap`,
          heapUsed: `${formatMemoryUsage(
            memoryData.heapUsed
          )} -> actual memory used during the execution`,
          external: `${formatMemoryUsage(
            memoryData.external
          )} -> V8 external memory`,
        }
      : `RSS memory ${description}: ${formatMemoryUsage(memoryData.rss)}${
          oldRSS === 0
            ? ``
            : `, changed by ` + (Memory.rss - oldRSS).toString() + ` MB`
        }`;

    console.log(memoryUsage);
  }
}

```

Contents of src/cloud/utils/index.ts:
```
export * from "./graphql";
export * from "./utils";
export * from "./base64";

```

Contents of src/cloud/utils/base64.ts:
```
// URL friendly base64 encoding
const TABLE =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

export function bigintToBase56(value: bigint): string {
  const digits = toBase(value, 56n);
  //console.log("digits:", digits);
  const str = digits.map((x) => TABLE[Number(x)]).join("");
  //console.log("str:", str);
  return str;
}

export function bigintFromBase56(str: string): bigint {
  const base56Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
  const x = fromBase(base56Digits, 56n);
  return x;
}

export function bigintToBase64(value: bigint): string {
  const digits = toBase(value, 64n);
  //console.log("digits:", digits);
  const str = digits.map((x) => TABLE[Number(x)]).join("");
  //console.log("str:", str);
  return str;
}

export function bigintFromBase64(str: string): bigint {
  const base64Digits = str.split("").map((x) => BigInt(TABLE.indexOf(x)));
  const x = fromBase(base64Digits, 64n);
  return x;
}

export function fromBase(digits: bigint[], base: bigint) {
  if (base <= 0n) throw Error("fromBase: base must be positive");
  // compute powers base, base^2, base^4, ..., base^(2^k)
  // with largest k s.t. n = 2^k < digits.length
  let basePowers = [];
  for (let power = base, n = 1; n < digits.length; power **= 2n, n *= 2) {
    basePowers.push(power);
  }
  let k = basePowers.length;
  // pad digits array with zeros s.t. digits.length === 2^k
  digits = digits.concat(Array(2 ** k - digits.length).fill(0n));
  // accumulate [x0, x1, x2, x3, ...] -> [x0 + base*x1, x2 + base*x3, ...] -> [x0 + base*x1 + base^2*(x2 + base*x3), ...] -> ...
  // until we end up with a single element
  for (let i = 0; i < k; i++) {
    let newDigits = Array(digits.length >> 1);
    let basePower = basePowers[i];
    for (let j = 0; j < newDigits.length; j++) {
      newDigits[j] = digits[2 * j] + basePower * digits[2 * j + 1];
    }
    digits = newDigits;
  }
  console.assert(digits.length === 1);
  let [digit] = digits;
  return digit;
}

export function toBase(x: bigint, base: bigint) {
  if (base <= 0n) throw Error("toBase: base must be positive");
  // compute powers base, base^2, base^4, ..., base^(2^k)
  // with largest k s.t. base^(2^k) < x
  let basePowers = [];
  for (let power = base; power <= x; power **= 2n) {
    basePowers.push(power);
  }
  let digits = [x]; // single digit w.r.t base^(2^(k+1))
  // successively split digits w.r.t. base^(2^j) into digits w.r.t. base^(2^(j-1))
  // until we arrive at digits w.r.t. base
  let k = basePowers.length;
  for (let i = 0; i < k; i++) {
    let newDigits = Array(2 * digits.length);
    let basePower = basePowers[k - 1 - i];
    for (let j = 0; j < digits.length; j++) {
      let x = digits[j];
      let high = x / basePower;
      newDigits[2 * j + 1] = high;
      newDigits[2 * j] = x - high * basePower;
    }
    digits = newDigits;
  }
  // pop "leading" zero digits
  while (digits[digits.length - 1] === 0n) {
    digits.pop();
  }
  return digits;
}

```

Contents of src/cloud/utils/graphql.ts:
```
type QueryType = "balance" | "account";

export const defaultToken =
  "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf";

export async function getBalanceFromGraphQL(params: {
  publicKey: string;
  tokenId?: string;
  mina: string[];
}): Promise<bigint> {
  const { publicKey, mina } = params;
  const tokenId = params.tokenId ?? defaultToken;
  if (mina.length === 0) throw new Error("no mina endpoints provided");
  const account = await fetchAccountInternal({
    publicKey,
    tokenId,
    mina,
    queryType: "balance",
  });
  //console.log("getBalanceFromGraphQL account:", account);
  const balance = (account as any)?.account?.balance?.total;
  return balance ? BigInt(balance) : 0n;
}

export async function getAccountFromGraphQL(params: {
  publicKey: string;
  tokenId?: string;
  mina: string[];
}) {
  const { publicKey, mina } = params;
  const tokenId = params.tokenId ?? defaultToken;
  if (mina.length === 0) throw new Error("no mina endpoints provided");
  const account = await fetchAccountInternal({
    publicKey,
    tokenId,
    mina,
    queryType: "account",
  });
  return (account as any)?.account;
}

async function fetchAccountInternal(params: {
  publicKey: string;
  tokenId: string;
  mina: string[];
  timeout?: number;
  queryType: QueryType;
}) {
  const { publicKey, tokenId, mina, timeout, queryType } = params;
  const query =
    queryType === "balance"
      ? balanceQuery(publicKey, tokenId)
      : accountQuery(publicKey, tokenId);
  let [response, error] = await makeGraphqlRequest({
    query,
    mina,
    timeout,
  });
  if (error !== undefined) return { account: undefined, error };
  const account = (response as any)?.data?.account;
  if (!account) {
    return {
      account: undefined,
      error: {
        statusCode: 404,
        statusText: `fetchAccount: Account with public key ${publicKey} does not exist.`,
      },
    };
  }
  return {
    account,
    error: undefined,
  };
}

async function makeGraphqlRequest(params: {
  query: string;
  mina: string[];
  timeout?: number;
}) {
  const defaultTimeout = 5 * 60 * 1000; // 5 minutes
  const timeout = params.timeout ?? defaultTimeout;
  const { query, mina } = params;
  const graphqlEndpoint = mina[0];
  const fallbackEndpoints: string[] = mina.slice(1);
  if (graphqlEndpoint === "none")
    throw Error(
      "Should have made a graphql request, but don't know to which endpoint."
    );
  let timeouts: NodeJS.Timeout[] = [];
  const clearTimeouts = () => {
    timeouts.forEach((t) => clearTimeout(t));
    timeouts = [];
  };

  const makeRequest = async (url: string) => {
    const controller = new AbortController();
    const timer = setTimeout(() => controller.abort(), timeout);
    timeouts.push(timer);
    let body = JSON.stringify({
      operationName: null,
      query,
      variables: {},
    });
    try {
      let response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body,
        signal: controller.signal,
      });
      return checkResponseStatus(response);
    } finally {
      clearTimeouts();
    }
  };
  // try to fetch from endpoints in pairs
  let timeoutErrors: { url1: string; url2: string; error: any }[] = [];
  let urls = [graphqlEndpoint, ...fallbackEndpoints];
  for (let i = 0; i < urls.length; i += 2) {
    let url1 = urls[i];
    let url2 = urls[i + 1];
    if (url2 === undefined) {
      try {
        return await makeRequest(url1);
      } catch (error) {
        return [undefined, inferError(error)] as [undefined, object];
      }
    }
    try {
      return await Promise.race([makeRequest(url1), makeRequest(url2)]);
    } catch (unknownError) {
      let error = inferError(unknownError);
      if (error.statusCode === 408) {
        // If the request timed out, try the next 2 endpoints
        timeoutErrors.push({ url1, url2, error });
      } else {
        // If the request failed for some other reason (e.g. o1js error), return the error
        return [undefined, error];
      }
    }
  }
  const statusText = timeoutErrors
    .map(
      ({ url1, url2, error }) =>
        `Request to ${url1} and ${url2} timed out. Error: ${error}`
    )
    .join("\n");
  return [undefined, { statusCode: 408, statusText }];
}

function inferError(error: unknown) {
  let errorMessage = JSON.stringify(error);
  if (error instanceof AbortSignal) {
    return { statusCode: 408, statusText: `Request Timeout: ${errorMessage}` };
  } else {
    return {
      statusCode: 500,
      statusText: `Unknown Error: ${errorMessage}`,
    };
  }
}

async function checkResponseStatus(
  response: Response
): Promise<[object, undefined] | [undefined, object]> {
  if (response.ok) {
    const jsonResponse = (await response.json()) as any;
    if (jsonResponse.errors && jsonResponse.errors.length > 0) {
      return [
        undefined,
        {
          statusCode: response.status,
          statusText: jsonResponse.errors
            .map((error: any) => error.message)
            .join("\n"),
        },
      ];
    } else if (jsonResponse.data === undefined) {
      return [
        undefined,
        {
          statusCode: response.status,
          statusText: `GraphQL response data is undefined`,
        },
      ];
    }
    return [jsonResponse, undefined];
  } else {
    return [
      undefined,
      {
        statusCode: response.status,
        statusText: response.statusText,
      },
    ];
  }
}

const balanceQuery = (publicKey: string, tokenId: string) => `{
  account(publicKey: "${publicKey}", token: "${tokenId}") {
    balance { total }
  }
}
`;

const accountQuery = (publicKey: string, tokenId: string) => `{
  account(publicKey: "${publicKey}", token: "${tokenId}") {
    publicKey
    token
    nonce
    balance { total }
    tokenSymbol
    receiptChainHash
    timing {
      initialMinimumBalance
      cliffTime
      cliffAmount
      vestingPeriod
      vestingIncrement
    }
    permissions {
      editState
      access
      send
      receive
      setDelegate
      setPermissions
      setVerificationKey {
        auth
        txnVersion
      }
      setZkappUri
      editActionState
      setTokenSymbol
      incrementNonce
      setVotingFor
      setTiming
    }
    delegateAccount { publicKey }
    votingFor
    zkappState
    verificationKey {
      verificationKey
      hash
    }
    actionState
    provedState
    zkappUri
  }
}
`;

```

Contents of src/cloud/worker/transaction.ts:
```
/**
 * Human-readable transaction metadata
 * events: the events
 * actions: the actions
 * custom: the custom metadata defined by the developer
 */

export interface TransactionMetadata {
  events?: object[];
  actions?: object[];
  custom?: object;
}

```

Contents of src/cloud/worker/job.ts:
```
import { blockchain } from "../networks";
export type JobStatus =
  | "created"
  | "started"
  | "finished"
  | "failed"
  | "used"
  | "restarted";

/**
 * LogStream is a subset of the log stream data returned by AWS CloudWatch Logs when running the worker.
 * @see {@link https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/cloudwatch-logs/command/GetLogEventsCommand/}
 *
 * Example:
 * ```
 * {
 *   logGroupName: '/aws/lambda/zkcloudworker-dev-test',
 *   logStreamName: '2024/05/09/[$LATEST]52d048f64e894d2e8ba2800df93629c5',
 *   awsRequestId: '581d0d45-9165-47e8-84d9-678599938811'
 * }
 * ```
 */
export interface LogStream {
  /** The log group name */
  logGroupName: string;

  /** The log stream name */
  logStreamName: string;

  /** The AWS request ID */
  awsRequestId: string;
}

/**
 * JobData is the data structure for a job, keeping track of the job status, result, logs, and metadata.
 */
export interface JobData {
  /** The ID of the user */
  id: string;

  /** The ID of the job */
  jobId: string;

  /** The ID of the task (optional) */
  taskId?: string;

  /** The developer of the repo executing the job */
  developer: string;

  /** The repo executing the job */
  repo: string;

  /** The task to execute (optional) */
  task?: string;

  /** The ID of the user (optional) */
  userId?: string;

  /** The arguments for the job (optional) */
  args?: string;

  /** The metadata for the job (optional) */
  metadata?: string;

  /** The blockchain to execute the job on */
  chain: blockchain;

  /** The filename where transactions data is stored (optional) */
  filename?: string;

  /** The number of transactions */
  txNumber: number;

  /** The time the job was created */
  timeCreated: number;

  /** The time the job was started (optional) */
  timeStarted?: number;

  /** The time the job was finished (optional) */
  timeFinished?: number;

  /** The time the job failed (optional) */
  timeFailed?: number;

  /** The time the job result was used (optional) */
  timeUsed?: number;

  /** The status of the job */
  jobStatus: JobStatus;

  /** The duration the job was billed for in ms (optional) */
  billedDuration?: number;

  /** The result of the job (optional) */
  result?: string;

  /** The log streams of the job (optional) */
  logStreams?: LogStream[];

  /** The logs of the job (optional) */
  logs?: string[];

  /** Whether the logs are full (optional) */
  isFullLog?: boolean;
}

/**
 * JobEvent is the data structure for a job events, keeping track of the job status changes.
 */
export interface JobEvent {
  /** The ID of the job */
  jobId: string;

  /** The time the event occurred */
  eventTime: number;

  /** The status of the job */
  jobStatus: JobStatus;

  /** The result of the job (optional) */
  result?: string;
}

```

Contents of src/cloud/worker/cloud.ts:
```
import { blockchain } from "../networks";
import { JobData } from "./job";
import { TransactionMetadata } from "./transaction";

/**
 * Interface for the deployer key pair
 * Used to get the public and private keys of the deployer for test networks only.
 * Devnet and Zeko are supported.
 */
export interface DeployerKeyPair {
  /** The public key of the deployer */
  publicKey: string;

  /** The private key of the deployer */
  privateKey: string;
}

/**
 * Interface for the cloud transaction
 * Used to get the transaction id, the transaction, and the time received
 */
export interface CloudTransaction {
  /** The transaction id */
  txId: string;

  /** The transaction */
  transaction: string;

  /** The time received */
  timeReceived: number;

  /** The status of the transaction */
  status: string;
}

/*
 * Abstract class for the cloud service
 * Used to define the cloud methods and properties
 * Should be implemented by for local testing and for the zkCloudWorker in the cloud
 * @param id the id of the user
 * @param jobId the job id
 * @param stepId the step id
 * @param taskId the task id
 * @param cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
 * @param developer the developer id
 * @param repo the repo id
 * @param task the task id
 * @param userId the user id
 * @param args the arguments, should be a string or serialized JSON
 * @param metadata the metadata, should be a string or serialized JSON
 * @param chain the blockchain network
 * @param isLocalCloud a boolean to check if the cloud is local or not
 */
export abstract class Cloud {
  readonly id: string;
  readonly jobId: string;
  readonly stepId: string;
  readonly taskId: string;
  readonly cache: string;
  readonly developer: string;
  readonly repo: string;
  readonly task?: string;
  readonly userId?: string;
  readonly args?: string;
  readonly metadata?: string;
  readonly chain: blockchain;
  readonly isLocalCloud: boolean;

  /**
   * Constructor for the Cloud class
   * @param params the parameters for the Cloud class
   * @param params.id the id of the user
   * @param params.jobId the job id
   * @param params.stepId the step id
   * @param params.taskId the task id
   * @param params.cache the cache folder. Use it to get the Cache object: cache = Cache.FileSystem(this.cloud.cache);
   * @param params.developer the developer id
   * @param params.repo the repo id
   * @param params.task the task id
   * @param params.userId the user id
   * @param params.args the arguments, should be a string or serialized JSON
   * @param params.metadata the metadata, should be a string or serialized JSON
   * @param params.chain the blockchain network
   * @param params.isLocalCloud a boolean to check if the cloud is local or not
   */
  constructor(params: {
    id: string;
    jobId: string;
    stepId: string;
    taskId: string;
    cache: string;
    developer: string;
    repo: string;
    task?: string;
    userId?: string;
    args?: string;
    metadata?: string;
    isLocalCloud?: boolean;
    chain: blockchain;
  }) {
    const {
      id,
      jobId,
      stepId,
      taskId,
      cache,
      developer,
      repo,
      task,
      userId,
      args,
      metadata,
      isLocalCloud,
      chain,
    } = params;
    this.id = id;
    this.jobId = jobId;
    this.stepId = stepId;
    this.taskId = taskId;
    this.cache = cache;
    this.developer = developer;
    this.repo = repo;
    this.task = task;
    this.userId = userId;
    this.args = args;
    this.metadata = metadata;
    this.isLocalCloud = isLocalCloud ?? false;
    this.chain = chain;
  }

  /**
   * Abstract method to get the deployer key pair
   * Used to get the public and private keys of the deployer for test networks only
   * Devnet and Zeko are supported
   * @returns the deployer key pair
   */
  abstract getDeployer(): Promise<DeployerKeyPair | undefined>;

  /**
   * Abstract method to release the deployer
   * @param params the public key of the deployer and the transactions hashes
   * Used to release the deployer after the transactions are sent to the blockchain
   * @param params.publicKey the public key of the deployer
   * @param params.txsHashes the transactions hashes
   */
  abstract releaseDeployer(params: {
    publicKey: string;
    txsHashes: string[];
  }): Promise<void>;

  /**
   * Abstract method to get the data by key
   * Used to get the data by key from the cloud storage
   * @param key the key
   * @returns the value of the key
   */
  abstract getDataByKey(key: string): Promise<string | undefined>;

  /**
   * Abstract method to save the data by key
   * Used to save the data by key to the cloud storage
   * @param key the key
   * @param value the value
   */
  abstract saveDataByKey(key: string, value: string | undefined): Promise<void>;

  /**
   * Abstract method to save the file
   * Used to save the file to the cloud storage
   * @param filename the filename
   * @param value the value
   */
  abstract saveFile(filename: string, value: Buffer): Promise<void>;

  /**
   * Abstract method to load the file
   * Used to load the file from the cloud storage
   * @param filename the filename
   * @returns the value of the file
   */
  abstract loadFile(filename: string): Promise<Buffer | undefined>;

  /**
   * Abstract method to encrypt the data
   * @param params
   * @param params.data the data
   * @param params.context the context
   * @param params.keyId the key id, optional
   */
  abstract encrypt(params: {
    data: string;
    context: string;
    keyId?: string;
  }): Promise<string | undefined>;

  /**
   * Abstract method to decrypt the data
   * @param params
   * @param params.data the data
   * @param params.context the context
   * @param params.keyId the key id, optional
   */
  abstract decrypt(params: {
    data: string;
    context: string;
    keyId?: string;
  }): Promise<string | undefined>;

  /**
   * Abstract method to calculate the recursive proof
   * Used to calculate the recursive proof
   * @param data the data
   * @param data.transactions the transactions
   * @param data.task the task
   * @param data.userId the user id
   * @param data.args the arguments
   * @param data.metadata the metadata
   * @returns the proof
   */
  abstract recursiveProof(data: {
    transactions: string[];
    task?: string;
    userId?: string;
    args?: string;
    metadata?: string;
  }): Promise<string>;

  /**
   * Abstract method to execute the transactions
   * Used to execute the transactions
   * @param data the data
   * @param data.transactions the transactions
   * @param data.task the task
   * @param data.userId the user id
   * @param data.args the arguments
   * @param data.metadata the metadata
   * @returns the result
   */
  abstract execute(data: {
    transactions: string[];
    task: string;
    userId?: string;
    args?: string;
    metadata?: string;
  }): Promise<string>;

  /**
   * Abstract method to add the task
   * Used to add the task
   * @param data the data
   * @param data.task the task
   * @param data.startTime the start time
   * @param data.userId the user id
   * @param data.args the arguments
   * @param data.metadata the metadata
   * @param data.maxAttempts the maximum attempts
   * @returns the task id
   */
  abstract addTask(data: {
    task: string;
    startTime?: number;
    userId?: string;
    args?: string;
    metadata?: string;
    maxAttempts?: number;
  }): Promise<string>;

  /**
   * Abstract method to send the transactions
   * @param transactions
   */
  abstract sendTransactions(
    transactions: string[] | CloudTransaction[]
  ): Promise<CloudTransaction[]>;

  /**
   * Abstract method to delete the transaction
   * Used to delete the transaction
   * @param txId the transaction id
   */
  abstract deleteTransaction(txId: string): Promise<void>;

  /**
   * Abstract method to get the transactions
   * Used to get the transactions
   * @returns the transactions
   */
  abstract getTransactions(): Promise<CloudTransaction[]>;

  /**
   * Publish the transaction metadata in human-readable format
   * @param params
   * @param params.txId the transaction id
   * @param params.metadata the metadata
   */
  abstract publishTransactionMetadata(params: {
    txId: string;
    metadata: TransactionMetadata;
  }): Promise<void>;

  /**
   * Abstract method to delete the task
   * Used to delete the task
   * @param taskId the task id
   */
  abstract deleteTask(taskId: string): Promise<void>;

  /**
   * Abstract method to process the tasks
   */
  abstract processTasks(): Promise<void>;

  /**
   * Abstract method to get the job result
   * Used to get the job result
   * @param jobId the job id
   * @returns the job result
   */
  abstract jobResult(jobId: string): Promise<JobData | undefined>;

  /**
   * forces the worker to restart the AWS lambda container
   * See https://github.com/o1-labs/o1js/issues/1651
   */
  abstract forceWorkerRestart(): Promise<void>;
}

```

Contents of src/cloud/worker/index.ts:
```
export * from "./cloud";
export * from "./job";
export * from "./task";
export * from "./transaction";
export * from "./worker";

```

Contents of src/cloud/worker/task.ts:
```
import { blockchain } from "../networks";

/**
 * TaskData is the data structure for a task, keeping track of the task status, result, logs, and metadata.
 */
export interface TaskData {
  /** The ID of the user */
  id: string;

  /** The ID of the task */
  taskId: string;

  /** The time the task was started (optional) */
  startTime?: number;

  /** The time the task was created */
  timeCreated: number;

  /** The maximum number of attempts (default is 5) (optional) */
  maxAttempts?: number;

  /** The number of attempts */
  attempts: number;

  /** The developer of the repo executing the task */
  developer: string;

  /** The repo executing the task */
  repo: string;

  /** The task to execute */
  task: string;

  /** The ID of the user (optional) */
  userId?: string;

  /** The arguments for the task (optional) */
  args?: string;

  /** The metadata for the task (optional) */
  metadata?: string;

  /** The blockchain to execute the task on */
  chain: blockchain;
}

```

Contents of src/cloud/worker/worker.ts:
```
import { Cloud, CloudTransaction } from "./cloud";

/**
 * Abstract class for the zkCloudWorker
 * Used to define the zkCloudWorker methods and properties
 * Should be implemented for by the developer for the zkCloudWorker in the cloud
 */
export abstract class zkCloudWorker {
  /**  cloud: the cloud instance */
  readonly cloud: Cloud;

  /**
   * Constructor for the zkCloudWorker class
   * @param cloud the cloud instance provided by the zkCloudWorker in the local environment or in the cloud
   */
  constructor(cloud: Cloud) {
    this.cloud = cloud;
  }

  // Those methods should be implemented for recursive proofs calculations
  /**
   * Creates a new proof from a transaction
   * @param transaction the transaction
   * @returns the serialized proof
   */
  async create(transaction: string): Promise<string | undefined> {
    return undefined;
  }

  /**
   * Merges two proofs
   * @param proof1 the first proof
   * @param proof2 the second proof
   * @returns the merged proof
   */
  async merge(proof1: string, proof2: string): Promise<string | undefined> {
    return undefined;
  }

  // Those methods should be implemented for anything except for recursive proofs
  /**
   * Executes the transactions
   * @param transactions the transactions, can be empty list
   * @returns the result
   */
  async execute(transactions: string[]): Promise<string | undefined> {
    return undefined;
  }

  /* Process the transactions received by the cloud
   * @param transactions: the transactions
   */
  async processTransactions(transactions: CloudTransaction[]): Promise<void> {}

  /**
   * process the task defined by the developer
   * @returns the result
   */
  async task(): Promise<string | undefined> {
    return undefined;
  }
}

```

