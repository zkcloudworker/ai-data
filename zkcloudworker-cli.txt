Directory: zkcloudworker-cli

Directory Structure:
```
.
├── .gitignore
├── .yarnrc.yml
├── LICENSE
├── README.md
├── dist
│   ├── dist/package.json
│   ├── dist/src
│   │   ├── dist/src/api.d.ts
│   │   ├── dist/src/api.js
│   │   ├── dist/src/cli.d.ts
│   │   ├── dist/src/cli.js
│   │   ├── dist/src/config.d.ts
│   │   ├── dist/src/config.js
│   │   ├── dist/src/debug.d.ts
│   │   ├── dist/src/debug.js
│   │   ├── dist/src/deploy.d.ts
│   │   ├── dist/src/deploy.js
│   │   ├── dist/src/files.d.ts
│   │   ├── dist/src/files.js
│   │   ├── dist/src/install.d.ts
│   │   ├── dist/src/install.js
│   │   ├── dist/src/options.d.ts
│   │   ├── dist/src/options.js
│   │   ├── dist/src/sleep.d.ts
│   │   ├── dist/src/sleep.js
│   │   ├── dist/src/upload.d.ts
│   │   ├── dist/src/upload.js
│   │   ├── dist/src/verify.d.ts
│   │   ├── dist/src/verify.js
│   │   ├── dist/src/watch.d.ts
│   │   ├── dist/src/watch.js
│   │   ├── dist/src/zip.d.ts
│   │   └── dist/src/zip.js
│   └── dist/tsconfig.tsbuildinfo
├── package.json
├── src
│   ├── src/api.ts
│   ├── src/cli.ts
│   ├── src/config.ts
│   ├── src/debug.ts
│   ├── src/deploy.ts
│   ├── src/files.ts
│   ├── src/install.ts
│   ├── src/options.ts
│   ├── src/sleep.ts
│   ├── src/upload.ts
│   ├── src/verify.ts
│   ├── src/watch.ts
│   └── src/zip.ts
├── tsconfig.json
└── yarn.lock
```

Contents of LICENSE:
```
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

```

Contents of .yarnrc.yml:
```
nodeLinker: node-modules

```

Contents of README.md:
```
# zkcloudworker-cli

zkCloudWorker CLI tool

## Installation

```sh
npm install -g zkcloudworker-cli
```

To confirm successful installation:

```sh
zkcw --version
```

or

```sh
zkcloudworker --version
```

### Updating the zkCloudWorker CLI

```sh
npm update -g zkcloudworker-cli
```

## Deploying the repo

```sh
zkcw deploy
```

or, to see the logs:

```sh
zkcw deploy -v
```

The package should have at the root directory index.ts file that exports the zkcloudworker function:

```typescript
// index.ts at the package root directory
import { Cloud, zkCloudWorker, initBlockchain } from "zkcloudworker";
import { initializeBindings } from "o1js";
import { MyWorker } from "./src/worker";

export async function zkcloudworker(cloud: Cloud): Promise<zkCloudWorker> {
  await initializeBindings();
  await initBlockchain(cloud.chain);
  return new MyWorker(cloud);
}
```

and the directory in tsconfig.json for `tsc` compilation result should be `dist`:

```
"compilerOptions": {
    "outDir": "./dist"
}
```

## Getting help

```sh
zkcw --help
```

```
Usage: zkCloudWorker [options] [command]

zkCloudWorker CLI tool

Options:
  -V, --version                output the version number
  -v, --verbose                verbose mode, print all logs
  -f, --folder <folder>        folder with repo
  -r, --repo <repo>            repo name
  -d, --developer <developer>  developer name
  -m, --manager <pm>           package manager: yarn | npm
  -j, --jwt <jwt>              JWT token
  -h, --help                   display help for command

Commands:
  deploy [options]             deploy the repo to the cloud
  config                       save default configuration
  help [command]               display help for command
```

```
Usage: zkCloudWorker deploy [options]

deploy the repo to the cloud

Options:
  -p, --protect               protect the deployment from changes
  -e, --exclude [folders...]  exclude files and folders from deployment
  -h, --help                  display help for command
```

## Development

You need to install node and git
and clone this repo

```
git clone https://github.com/zkcloudworker/zkcloudworker-cli
cd zkcloudworker-cli
touch yarn.lock
yarn
```

Running locally:

```
yarn cli
```

```

Contents of yarn.lock:
```
# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 8
  cacheKey: 10c0

"@isaacs/cliui@npm:^8.0.2":
  version: 8.0.2
  resolution: "@isaacs/cliui@npm:8.0.2"
  dependencies:
    string-width: "npm:^5.1.2"
    string-width-cjs: "npm:string-width@^4.2.0"
    strip-ansi: "npm:^7.0.1"
    strip-ansi-cjs: "npm:strip-ansi@^6.0.1"
    wrap-ansi: "npm:^8.1.0"
    wrap-ansi-cjs: "npm:wrap-ansi@^7.0.0"
  checksum: 10c0/b1bf42535d49f11dc137f18d5e4e63a28c5569de438a221c369483731e9dac9fb797af554e8bf02b6192d1e5eba6e6402cf93900c3d0ac86391d00d04876789e
  languageName: node
  linkType: hard

"@pkgjs/parseargs@npm:^0.11.0":
  version: 0.11.0
  resolution: "@pkgjs/parseargs@npm:0.11.0"
  checksum: 10c0/5bd7576bb1b38a47a7fc7b51ac9f38748e772beebc56200450c4a817d712232b8f1d3ef70532c80840243c657d491cf6a6be1e3a214cff907645819fdc34aadd
  languageName: node
  linkType: hard

"@types/archiver@npm:^6.0.2":
  version: 6.0.2
  resolution: "@types/archiver@npm:6.0.2"
  dependencies:
    "@types/readdir-glob": "npm:*"
  checksum: 10c0/01ca91d76c57b38ae030a24a07b46664bf3ae9d303c0cdd2b342e06a4b53dccd0d0c375ff3f9af966a93512554f82ef97c515fcc47536e7dbb29a7d9bc09a540
  languageName: node
  linkType: hard

"@types/node@npm:*":
  version: 20.12.10
  resolution: "@types/node@npm:20.12.10"
  dependencies:
    undici-types: "npm:~5.26.4"
  checksum: 10c0/2cc3b6ea09894ed1a3cf39f6491ec539281580f4ff83216e7d26ce85c83237fe0543c0ca49e25b2515ccdb6c8814b488d17a64a05f536dcaea94f9d32a60c7d7
  languageName: node
  linkType: hard

"@types/node@npm:^20.14.4":
  version: 20.14.4
  resolution: "@types/node@npm:20.14.4"
  dependencies:
    undici-types: "npm:~5.26.4"
  checksum: 10c0/2244be2e66e19377a491bfc279b52bc3f598c2e31d683d2388f4a16dbf6e81ad0032fde01770c4babcc73a31609e23fa0e5864dffc5830e9f457db250bd08b33
  languageName: node
  linkType: hard

"@types/readdir-glob@npm:*":
  version: 1.1.5
  resolution: "@types/readdir-glob@npm:1.1.5"
  dependencies:
    "@types/node": "npm:*"
  checksum: 10c0/46849136a3b5246105bca0303aab80552a9ff67e024e77ef1845a806a24c1a621dfcba0e4ee5a00ebad17f51edb80928f2dd6dc510a1d9897f3bc22ed64e5cbd
  languageName: node
  linkType: hard

"abort-controller@npm:^3.0.0":
  version: 3.0.0
  resolution: "abort-controller@npm:3.0.0"
  dependencies:
    event-target-shim: "npm:^5.0.0"
  checksum: 10c0/90ccc50f010250152509a344eb2e71977fbf8db0ab8f1061197e3275ddf6c61a41a6edfd7b9409c664513131dd96e962065415325ef23efa5db931b382d24ca5
  languageName: node
  linkType: hard

"ansi-regex@npm:^5.0.1":
  version: 5.0.1
  resolution: "ansi-regex@npm:5.0.1"
  checksum: 10c0/9a64bb8627b434ba9327b60c027742e5d17ac69277960d041898596271d992d4d52ba7267a63ca10232e29f6107fc8a835f6ce8d719b88c5f8493f8254813737
  languageName: node
  linkType: hard

"ansi-regex@npm:^6.0.1":
  version: 6.0.1
  resolution: "ansi-regex@npm:6.0.1"
  checksum: 10c0/cbe16dbd2c6b2735d1df7976a7070dd277326434f0212f43abf6d87674095d247968209babdaad31bb00882fa68807256ba9be340eec2f1004de14ca75f52a08
  languageName: node
  linkType: hard

"ansi-styles@npm:^4.0.0, ansi-styles@npm:^4.1.0":
  version: 4.3.0
  resolution: "ansi-styles@npm:4.3.0"
  dependencies:
    color-convert: "npm:^2.0.1"
  checksum: 10c0/895a23929da416f2bd3de7e9cb4eabd340949328ab85ddd6e484a637d8f6820d485f53933446f5291c3b760cbc488beb8e88573dd0f9c7daf83dccc8fe81b041
  languageName: node
  linkType: hard

"ansi-styles@npm:^6.1.0":
  version: 6.2.1
  resolution: "ansi-styles@npm:6.2.1"
  checksum: 10c0/5d1ec38c123984bcedd996eac680d548f31828bd679a66db2bdf11844634dde55fec3efa9c6bb1d89056a5e79c1ac540c4c784d592ea1d25028a92227d2f2d5c
  languageName: node
  linkType: hard

"archiver-utils@npm:^5.0.0, archiver-utils@npm:^5.0.2":
  version: 5.0.2
  resolution: "archiver-utils@npm:5.0.2"
  dependencies:
    glob: "npm:^10.0.0"
    graceful-fs: "npm:^4.2.0"
    is-stream: "npm:^2.0.1"
    lazystream: "npm:^1.0.0"
    lodash: "npm:^4.17.15"
    normalize-path: "npm:^3.0.0"
    readable-stream: "npm:^4.0.0"
  checksum: 10c0/3782c5fa9922186aa1a8e41ed0c2867569faa5f15c8e5e6418ea4c1b730b476e21bd68270b3ea457daf459ae23aaea070b2b9f90cf90a59def8dc79b9e4ef538
  languageName: node
  linkType: hard

"archiver@npm:^7.0.1":
  version: 7.0.1
  resolution: "archiver@npm:7.0.1"
  dependencies:
    archiver-utils: "npm:^5.0.2"
    async: "npm:^3.2.4"
    buffer-crc32: "npm:^1.0.0"
    readable-stream: "npm:^4.0.0"
    readdir-glob: "npm:^1.1.2"
    tar-stream: "npm:^3.0.0"
    zip-stream: "npm:^6.0.1"
  checksum: 10c0/02afd87ca16f6184f752db8e26884e6eff911c476812a0e7f7b26c4beb09f06119807f388a8e26ed2558aa8ba9db28646ebd147a4f99e46813b8b43158e1438e
  languageName: node
  linkType: hard

"async@npm:^3.2.4":
  version: 3.2.5
  resolution: "async@npm:3.2.5"
  checksum: 10c0/1408287b26c6db67d45cb346e34892cee555b8b59e6c68e6f8c3e495cad5ca13b4f218180e871f3c2ca30df4ab52693b66f2f6ff43644760cab0b2198bda79c1
  languageName: node
  linkType: hard

"asynckit@npm:^0.4.0":
  version: 0.4.0
  resolution: "asynckit@npm:0.4.0"
  checksum: 10c0/d73e2ddf20c4eb9337e1b3df1a0f6159481050a5de457c55b14ea2e5cb6d90bb69e004c9af54737a5ee0917fcf2c9e25de67777bbe58261847846066ba75bc9d
  languageName: node
  linkType: hard

"axios@npm:^1.7.2":
  version: 1.7.2
  resolution: "axios@npm:1.7.2"
  dependencies:
    follow-redirects: "npm:^1.15.6"
    form-data: "npm:^4.0.0"
    proxy-from-env: "npm:^1.1.0"
  checksum: 10c0/cbd47ce380fe045313364e740bb03b936420b8b5558c7ea36a4563db1258c658f05e40feb5ddd41f6633fdd96d37ac2a76f884dad599c5b0224b4c451b3fa7ae
  languageName: node
  linkType: hard

"b4a@npm:^1.6.4":
  version: 1.6.6
  resolution: "b4a@npm:1.6.6"
  checksum: 10c0/56f30277666cb511a15829e38d369b114df7dc8cec4cedc09cc5d685bc0f27cb63c7bcfb58e09a19a1b3c4f2541069ab078b5328542e85d74a39620327709a38
  languageName: node
  linkType: hard

"balanced-match@npm:^1.0.0":
  version: 1.0.2
  resolution: "balanced-match@npm:1.0.2"
  checksum: 10c0/9308baf0a7e4838a82bbfd11e01b1cb0f0cf2893bc1676c27c2a8c0e70cbae1c59120c3268517a8ae7fb6376b4639ef81ca22582611dbee4ed28df945134aaee
  languageName: node
  linkType: hard

"bare-events@npm:^2.2.0":
  version: 2.2.2
  resolution: "bare-events@npm:2.2.2"
  checksum: 10c0/bacdaaf072f87ab5d2ed0c2fc519ef0fa8f6acd834fee50710a05f416a1b73ed99c9c6dfbefdd462ec4eb726d8f74e4a8476c2f8c3ae8812919c67eacb1f807f
  languageName: node
  linkType: hard

"base64-js@npm:^1.3.1":
  version: 1.5.1
  resolution: "base64-js@npm:1.5.1"
  checksum: 10c0/f23823513b63173a001030fae4f2dabe283b99a9d324ade3ad3d148e218134676f1ee8568c877cd79ec1c53158dcf2d2ba527a97c606618928ba99dd930102bf
  languageName: node
  linkType: hard

"brace-expansion@npm:^2.0.1":
  version: 2.0.1
  resolution: "brace-expansion@npm:2.0.1"
  dependencies:
    balanced-match: "npm:^1.0.0"
  checksum: 10c0/b358f2fe060e2d7a87aa015979ecea07f3c37d4018f8d6deb5bd4c229ad3a0384fe6029bb76cd8be63c81e516ee52d1a0673edbe2023d53a5191732ae3c3e49f
  languageName: node
  linkType: hard

"buffer-crc32@npm:^1.0.0":
  version: 1.0.0
  resolution: "buffer-crc32@npm:1.0.0"
  checksum: 10c0/8b86e161cee4bb48d5fa622cbae4c18f25e4857e5203b89e23de59e627ab26beb82d9d7999f2b8de02580165f61f83f997beaf02980cdf06affd175b651921ab
  languageName: node
  linkType: hard

"buffer@npm:^6.0.3":
  version: 6.0.3
  resolution: "buffer@npm:6.0.3"
  dependencies:
    base64-js: "npm:^1.3.1"
    ieee754: "npm:^1.2.1"
  checksum: 10c0/2a905fbbcde73cc5d8bd18d1caa23715d5f83a5935867c2329f0ac06104204ba7947be098fe1317fbd8830e26090ff8e764f08cd14fefc977bb248c3487bcbd0
  languageName: node
  linkType: hard

"chalk@npm:^4.1.2":
  version: 4.1.2
  resolution: "chalk@npm:4.1.2"
  dependencies:
    ansi-styles: "npm:^4.1.0"
    supports-color: "npm:^7.1.0"
  checksum: 10c0/4a3fef5cc34975c898ffe77141450f679721df9dde00f6c304353fa9c8b571929123b26a0e4617bde5018977eb655b31970c297b91b63ee83bb82aeb04666880
  languageName: node
  linkType: hard

"color-convert@npm:^2.0.1":
  version: 2.0.1
  resolution: "color-convert@npm:2.0.1"
  dependencies:
    color-name: "npm:~1.1.4"
  checksum: 10c0/37e1150172f2e311fe1b2df62c6293a342ee7380da7b9cfdba67ea539909afbd74da27033208d01d6d5cfc65ee7868a22e18d7e7648e004425441c0f8a15a7d7
  languageName: node
  linkType: hard

"color-name@npm:~1.1.4":
  version: 1.1.4
  resolution: "color-name@npm:1.1.4"
  checksum: 10c0/a1a3f914156960902f46f7f56bc62effc6c94e84b2cae157a526b1c1f74b677a47ec602bf68a61abfa2b42d15b7c5651c6dbe72a43af720bc588dff885b10f95
  languageName: node
  linkType: hard

"combined-stream@npm:^1.0.8":
  version: 1.0.8
  resolution: "combined-stream@npm:1.0.8"
  dependencies:
    delayed-stream: "npm:~1.0.0"
  checksum: 10c0/0dbb829577e1b1e839fa82b40c07ffaf7de8a09b935cadd355a73652ae70a88b4320db322f6634a4ad93424292fa80973ac6480986247f1734a1137debf271d5
  languageName: node
  linkType: hard

"commander@npm:^12.1.0":
  version: 12.1.0
  resolution: "commander@npm:12.1.0"
  checksum: 10c0/6e1996680c083b3b897bfc1cfe1c58dfbcd9842fd43e1aaf8a795fbc237f65efcc860a3ef457b318e73f29a4f4a28f6403c3d653d021d960e4632dd45bde54a9
  languageName: node
  linkType: hard

"compress-commons@npm:^6.0.2":
  version: 6.0.2
  resolution: "compress-commons@npm:6.0.2"
  dependencies:
    crc-32: "npm:^1.2.0"
    crc32-stream: "npm:^6.0.0"
    is-stream: "npm:^2.0.1"
    normalize-path: "npm:^3.0.0"
    readable-stream: "npm:^4.0.0"
  checksum: 10c0/2347031b7c92c8ed5011b07b93ec53b298fa2cd1800897532ac4d4d1aeae06567883f481b6e35f13b65fc31b190c751df6635434d525562f0203fde76f1f0814
  languageName: node
  linkType: hard

"core-util-is@npm:~1.0.0":
  version: 1.0.3
  resolution: "core-util-is@npm:1.0.3"
  checksum: 10c0/90a0e40abbddfd7618f8ccd63a74d88deea94e77d0e8dbbea059fa7ebebb8fbb4e2909667fe26f3a467073de1a542ebe6ae4c73a73745ac5833786759cd906c9
  languageName: node
  linkType: hard

"crc-32@npm:^1.2.0":
  version: 1.2.2
  resolution: "crc-32@npm:1.2.2"
  bin:
    crc32: bin/crc32.njs
  checksum: 10c0/11dcf4a2e77ee793835d49f2c028838eae58b44f50d1ff08394a610bfd817523f105d6ae4d9b5bef0aad45510f633eb23c903e9902e4409bed1ce70cb82b9bf0
  languageName: node
  linkType: hard

"crc32-stream@npm:^6.0.0":
  version: 6.0.0
  resolution: "crc32-stream@npm:6.0.0"
  dependencies:
    crc-32: "npm:^1.2.0"
    readable-stream: "npm:^4.0.0"
  checksum: 10c0/bf9c84571ede2d119c2b4f3a9ef5eeb9ff94b588493c0d3862259af86d3679dcce1c8569dd2b0a6eff2f35f5e2081cc1263b846d2538d4054da78cf34f262a3d
  languageName: node
  linkType: hard

"cross-spawn@npm:^7.0.0":
  version: 7.0.3
  resolution: "cross-spawn@npm:7.0.3"
  dependencies:
    path-key: "npm:^3.1.0"
    shebang-command: "npm:^2.0.0"
    which: "npm:^2.0.1"
  checksum: 10c0/5738c312387081c98d69c98e105b6327b069197f864a60593245d64c8089c8a0a744e16349281210d56835bb9274130d825a78b2ad6853ca13cfbeffc0c31750
  languageName: node
  linkType: hard

"delayed-stream@npm:~1.0.0":
  version: 1.0.0
  resolution: "delayed-stream@npm:1.0.0"
  checksum: 10c0/d758899da03392e6712f042bec80aa293bbe9e9ff1b2634baae6a360113e708b91326594c8a486d475c69d6259afb7efacdc3537bfcda1c6c648e390ce601b19
  languageName: node
  linkType: hard

"eastasianwidth@npm:^0.2.0":
  version: 0.2.0
  resolution: "eastasianwidth@npm:0.2.0"
  checksum: 10c0/26f364ebcdb6395f95124fda411f63137a4bfb5d3a06453f7f23dfe52502905bd84e0488172e0f9ec295fdc45f05c23d5d91baf16bd26f0fe9acd777a188dc39
  languageName: node
  linkType: hard

"emoji-regex@npm:^8.0.0":
  version: 8.0.0
  resolution: "emoji-regex@npm:8.0.0"
  checksum: 10c0/b6053ad39951c4cf338f9092d7bfba448cdfd46fe6a2a034700b149ac9ffbc137e361cbd3c442297f86bed2e5f7576c1b54cc0a6bf8ef5106cc62f496af35010
  languageName: node
  linkType: hard

"emoji-regex@npm:^9.2.2":
  version: 9.2.2
  resolution: "emoji-regex@npm:9.2.2"
  checksum: 10c0/af014e759a72064cf66e6e694a7fc6b0ed3d8db680427b021a89727689671cefe9d04151b2cad51dbaf85d5ba790d061cd167f1cf32eb7b281f6368b3c181639
  languageName: node
  linkType: hard

"event-target-shim@npm:^5.0.0":
  version: 5.0.1
  resolution: "event-target-shim@npm:5.0.1"
  checksum: 10c0/0255d9f936215fd206156fd4caa9e8d35e62075d720dc7d847e89b417e5e62cf1ce6c9b4e0a1633a9256de0efefaf9f8d26924b1f3c8620cffb9db78e7d3076b
  languageName: node
  linkType: hard

"events@npm:^3.3.0":
  version: 3.3.0
  resolution: "events@npm:3.3.0"
  checksum: 10c0/d6b6f2adbccbcda74ddbab52ed07db727ef52e31a61ed26db9feb7dc62af7fc8e060defa65e5f8af9449b86b52cc1a1f6a79f2eafcf4e62add2b7a1fa4a432f6
  languageName: node
  linkType: hard

"fast-fifo@npm:^1.1.0, fast-fifo@npm:^1.2.0":
  version: 1.3.2
  resolution: "fast-fifo@npm:1.3.2"
  checksum: 10c0/d53f6f786875e8b0529f784b59b4b05d4b5c31c651710496440006a398389a579c8dbcd2081311478b5bf77f4b0b21de69109c5a4eabea9d8e8783d1eb864e4c
  languageName: node
  linkType: hard

"follow-redirects@npm:^1.15.6":
  version: 1.15.6
  resolution: "follow-redirects@npm:1.15.6"
  peerDependenciesMeta:
    debug:
      optional: true
  checksum: 10c0/9ff767f0d7be6aa6870c82ac79cf0368cd73e01bbc00e9eb1c2a16fbb198ec105e3c9b6628bb98e9f3ac66fe29a957b9645bcb9a490bb7aa0d35f908b6b85071
  languageName: node
  linkType: hard

"foreground-child@npm:^3.1.0":
  version: 3.1.1
  resolution: "foreground-child@npm:3.1.1"
  dependencies:
    cross-spawn: "npm:^7.0.0"
    signal-exit: "npm:^4.0.1"
  checksum: 10c0/9700a0285628abaeb37007c9a4d92bd49f67210f09067638774338e146c8e9c825c5c877f072b2f75f41dc6a2d0be8664f79ffc03f6576649f54a84fb9b47de0
  languageName: node
  linkType: hard

"form-data@npm:^4.0.0":
  version: 4.0.0
  resolution: "form-data@npm:4.0.0"
  dependencies:
    asynckit: "npm:^0.4.0"
    combined-stream: "npm:^1.0.8"
    mime-types: "npm:^2.1.12"
  checksum: 10c0/cb6f3ac49180be03ff07ba3ff125f9eba2ff0b277fb33c7fc47569fc5e616882c5b1c69b9904c4c4187e97dd0419dd03b134174756f296dec62041e6527e2c6e
  languageName: node
  linkType: hard

"glob@npm:^10.0.0":
  version: 10.3.12
  resolution: "glob@npm:10.3.12"
  dependencies:
    foreground-child: "npm:^3.1.0"
    jackspeak: "npm:^2.3.6"
    minimatch: "npm:^9.0.1"
    minipass: "npm:^7.0.4"
    path-scurry: "npm:^1.10.2"
  bin:
    glob: dist/esm/bin.mjs
  checksum: 10c0/f60cefdc1cf3f958b2bb5823e1b233727f04916d489dc4641d76914f016e6704421e06a83cbb68b0cb1cb9382298b7a88075b844ad2127fc9727ea22b18b0711
  languageName: node
  linkType: hard

"graceful-fs@npm:^4.2.0":
  version: 4.2.11
  resolution: "graceful-fs@npm:4.2.11"
  checksum: 10c0/386d011a553e02bc594ac2ca0bd6d9e4c22d7fa8cfbfc448a6d148c59ea881b092db9dbe3547ae4b88e55f1b01f7c4a2ecc53b310c042793e63aa44cf6c257f2
  languageName: node
  linkType: hard

"has-flag@npm:^4.0.0":
  version: 4.0.0
  resolution: "has-flag@npm:4.0.0"
  checksum: 10c0/2e789c61b7888d66993e14e8331449e525ef42aac53c627cc53d1c3334e768bcb6abdc4f5f0de1478a25beec6f0bd62c7549058b7ac53e924040d4f301f02fd1
  languageName: node
  linkType: hard

"ieee754@npm:^1.2.1":
  version: 1.2.1
  resolution: "ieee754@npm:1.2.1"
  checksum: 10c0/b0782ef5e0935b9f12883a2e2aa37baa75da6e66ce6515c168697b42160807d9330de9a32ec1ed73149aea02e0d822e572bca6f1e22bdcbd2149e13b050b17bb
  languageName: node
  linkType: hard

"inherits@npm:~2.0.3":
  version: 2.0.4
  resolution: "inherits@npm:2.0.4"
  checksum: 10c0/4e531f648b29039fb7426fb94075e6545faa1eb9fe83c29f0b6d9e7263aceb4289d2d4557db0d428188eeb449cc7c5e77b0a0b2c4e248ff2a65933a0dee49ef2
  languageName: node
  linkType: hard

"is-fullwidth-code-point@npm:^3.0.0":
  version: 3.0.0
  resolution: "is-fullwidth-code-point@npm:3.0.0"
  checksum: 10c0/bb11d825e049f38e04c06373a8d72782eee0205bda9d908cc550ccb3c59b99d750ff9537982e01733c1c94a58e35400661f57042158ff5e8f3e90cf936daf0fc
  languageName: node
  linkType: hard

"is-stream@npm:^2.0.1":
  version: 2.0.1
  resolution: "is-stream@npm:2.0.1"
  checksum: 10c0/7c284241313fc6efc329b8d7f08e16c0efeb6baab1b4cd0ba579eb78e5af1aa5da11e68559896a2067cd6c526bd29241dda4eb1225e627d5aa1a89a76d4635a5
  languageName: node
  linkType: hard

"isarray@npm:~1.0.0":
  version: 1.0.0
  resolution: "isarray@npm:1.0.0"
  checksum: 10c0/18b5be6669be53425f0b84098732670ed4e727e3af33bc7f948aac01782110eb9a18b3b329c5323bcdd3acdaae547ee077d3951317e7f133bff7105264b3003d
  languageName: node
  linkType: hard

"isexe@npm:^2.0.0":
  version: 2.0.0
  resolution: "isexe@npm:2.0.0"
  checksum: 10c0/228cfa503fadc2c31596ab06ed6aa82c9976eec2bfd83397e7eaf06d0ccf42cd1dfd6743bf9aeb01aebd4156d009994c5f76ea898d2832c1fe342da923ca457d
  languageName: node
  linkType: hard

"jackspeak@npm:^2.3.6":
  version: 2.3.6
  resolution: "jackspeak@npm:2.3.6"
  dependencies:
    "@isaacs/cliui": "npm:^8.0.2"
    "@pkgjs/parseargs": "npm:^0.11.0"
  dependenciesMeta:
    "@pkgjs/parseargs":
      optional: true
  checksum: 10c0/f01d8f972d894cd7638bc338e9ef5ddb86f7b208ce177a36d718eac96ec86638a6efa17d0221b10073e64b45edc2ce15340db9380b1f5d5c5d000cbc517dc111
  languageName: node
  linkType: hard

"lazystream@npm:^1.0.0":
  version: 1.0.1
  resolution: "lazystream@npm:1.0.1"
  dependencies:
    readable-stream: "npm:^2.0.5"
  checksum: 10c0/ea4e509a5226ecfcc303ba6782cc269be8867d372b9bcbd625c88955df1987ea1a20da4643bf9270336415a398d33531ebf0d5f0d393b9283dc7c98bfcbd7b69
  languageName: node
  linkType: hard

"lodash@npm:^4.17.15":
  version: 4.17.21
  resolution: "lodash@npm:4.17.21"
  checksum: 10c0/d8cbea072bb08655bb4c989da418994b073a608dffa608b09ac04b43a791b12aeae7cd7ad919aa4c925f33b48490b5cfe6c1f71d827956071dae2e7bb3a6b74c
  languageName: node
  linkType: hard

"lru-cache@npm:^10.2.0":
  version: 10.2.2
  resolution: "lru-cache@npm:10.2.2"
  checksum: 10c0/402d31094335851220d0b00985084288136136992979d0e015f0f1697e15d1c86052d7d53ae86b614e5b058425606efffc6969a31a091085d7a2b80a8a1e26d6
  languageName: node
  linkType: hard

"mime-db@npm:1.52.0":
  version: 1.52.0
  resolution: "mime-db@npm:1.52.0"
  checksum: 10c0/0557a01deebf45ac5f5777fe7740b2a5c309c6d62d40ceab4e23da9f821899ce7a900b7ac8157d4548ddbb7beffe9abc621250e6d182b0397ec7f10c7b91a5aa
  languageName: node
  linkType: hard

"mime-types@npm:^2.1.12":
  version: 2.1.35
  resolution: "mime-types@npm:2.1.35"
  dependencies:
    mime-db: "npm:1.52.0"
  checksum: 10c0/82fb07ec56d8ff1fc999a84f2f217aa46cb6ed1033fefaabd5785b9a974ed225c90dc72fff460259e66b95b73648596dbcc50d51ed69cdf464af2d237d3149b2
  languageName: node
  linkType: hard

"minimatch@npm:^5.1.0":
  version: 5.1.6
  resolution: "minimatch@npm:5.1.6"
  dependencies:
    brace-expansion: "npm:^2.0.1"
  checksum: 10c0/3defdfd230914f22a8da203747c42ee3c405c39d4d37ffda284dac5e45b7e1f6c49aa8be606509002898e73091ff2a3bbfc59c2c6c71d4660609f63aa92f98e3
  languageName: node
  linkType: hard

"minimatch@npm:^9.0.1":
  version: 9.0.4
  resolution: "minimatch@npm:9.0.4"
  dependencies:
    brace-expansion: "npm:^2.0.1"
  checksum: 10c0/2c16f21f50e64922864e560ff97c587d15fd491f65d92a677a344e970fe62aafdbeafe648965fa96d33c061b4d0eabfe0213466203dd793367e7f28658cf6414
  languageName: node
  linkType: hard

"minipass@npm:^5.0.0 || ^6.0.2 || ^7.0.0, minipass@npm:^7.0.4":
  version: 7.1.0
  resolution: "minipass@npm:7.1.0"
  checksum: 10c0/6861c6ec9dc3cb99c745b287d92b2a8f409951852940205b4bb106faceb790544288622a0db7aa152f37793e2fc8f303628787883d9a679f2126605204feb97f
  languageName: node
  linkType: hard

"nats@npm:^2.26.0":
  version: 2.26.0
  resolution: "nats@npm:2.26.0"
  dependencies:
    nkeys.js: "npm:1.1.0"
  checksum: 10c0/acd333ce22f5cc3c040704404a508493030d85aa731ce7c8058efddadc9cb17b005f35cc98d64950391d2bde87c19395958d2d86df989620bad71f306e30dd87
  languageName: node
  linkType: hard

"nkeys.js@npm:1.1.0":
  version: 1.1.0
  resolution: "nkeys.js@npm:1.1.0"
  dependencies:
    tweetnacl: "npm:1.0.3"
  checksum: 10c0/44ff8d61e46d2b345351ed7844d66036a815aeca23927def6ca258e27a18a1678fe5ab161c5cf0b6e3a3993a945d422b71036986d09669b214540c8491478bef
  languageName: node
  linkType: hard

"normalize-path@npm:^3.0.0":
  version: 3.0.0
  resolution: "normalize-path@npm:3.0.0"
  checksum: 10c0/e008c8142bcc335b5e38cf0d63cfd39d6cf2d97480af9abdbe9a439221fd4d749763bab492a8ee708ce7a194bb00c9da6d0a115018672310850489137b3da046
  languageName: node
  linkType: hard

"path-key@npm:^3.1.0":
  version: 3.1.1
  resolution: "path-key@npm:3.1.1"
  checksum: 10c0/748c43efd5a569c039d7a00a03b58eecd1d75f3999f5a28303d75f521288df4823bc057d8784eb72358b2895a05f29a070bc9f1f17d28226cc4e62494cc58c4c
  languageName: node
  linkType: hard

"path-scurry@npm:^1.10.2":
  version: 1.10.2
  resolution: "path-scurry@npm:1.10.2"
  dependencies:
    lru-cache: "npm:^10.2.0"
    minipass: "npm:^5.0.0 || ^6.0.2 || ^7.0.0"
  checksum: 10c0/d723777fbf9627f201e64656680f66ebd940957eebacf780e6cce1c2919c29c116678b2d7dbf8821b3a2caa758d125f4444005ccec886a25c8f324504e48e601
  languageName: node
  linkType: hard

"process-nextick-args@npm:~2.0.0":
  version: 2.0.1
  resolution: "process-nextick-args@npm:2.0.1"
  checksum: 10c0/bec089239487833d46b59d80327a1605e1c5287eaad770a291add7f45fda1bb5e28b38e0e061add0a1d0ee0984788ce74fa394d345eed1c420cacf392c554367
  languageName: node
  linkType: hard

"process@npm:^0.11.10":
  version: 0.11.10
  resolution: "process@npm:0.11.10"
  checksum: 10c0/40c3ce4b7e6d4b8c3355479df77aeed46f81b279818ccdc500124e6a5ab882c0cc81ff7ea16384873a95a74c4570b01b120f287abbdd4c877931460eca6084b3
  languageName: node
  linkType: hard

"proxy-from-env@npm:^1.1.0":
  version: 1.1.0
  resolution: "proxy-from-env@npm:1.1.0"
  checksum: 10c0/fe7dd8b1bdbbbea18d1459107729c3e4a2243ca870d26d34c2c1bcd3e4425b7bcc5112362df2d93cc7fb9746f6142b5e272fd1cc5c86ddf8580175186f6ad42b
  languageName: node
  linkType: hard

"queue-tick@npm:^1.0.1":
  version: 1.0.1
  resolution: "queue-tick@npm:1.0.1"
  checksum: 10c0/0db998e2c9b15215317dbcf801e9b23e6bcde4044e115155dae34f8e7454b9a783f737c9a725528d677b7a66c775eb7a955cf144fe0b87f62b575ce5bfd515a9
  languageName: node
  linkType: hard

"readable-stream@npm:^2.0.5":
  version: 2.3.8
  resolution: "readable-stream@npm:2.3.8"
  dependencies:
    core-util-is: "npm:~1.0.0"
    inherits: "npm:~2.0.3"
    isarray: "npm:~1.0.0"
    process-nextick-args: "npm:~2.0.0"
    safe-buffer: "npm:~5.1.1"
    string_decoder: "npm:~1.1.1"
    util-deprecate: "npm:~1.0.1"
  checksum: 10c0/7efdb01f3853bc35ac62ea25493567bf588773213f5f4a79f9c365e1ad13bab845ac0dae7bc946270dc40c3929483228415e92a3fc600cc7e4548992f41ee3fa
  languageName: node
  linkType: hard

"readable-stream@npm:^4.0.0":
  version: 4.5.2
  resolution: "readable-stream@npm:4.5.2"
  dependencies:
    abort-controller: "npm:^3.0.0"
    buffer: "npm:^6.0.3"
    events: "npm:^3.3.0"
    process: "npm:^0.11.10"
    string_decoder: "npm:^1.3.0"
  checksum: 10c0/a2c80e0e53aabd91d7df0330929e32d0a73219f9477dbbb18472f6fdd6a11a699fc5d172a1beff98d50eae4f1496c950ffa85b7cc2c4c196963f289a5f39275d
  languageName: node
  linkType: hard

"readdir-glob@npm:^1.1.2":
  version: 1.1.3
  resolution: "readdir-glob@npm:1.1.3"
  dependencies:
    minimatch: "npm:^5.1.0"
  checksum: 10c0/a37e0716726650845d761f1041387acd93aa91b28dd5381950733f994b6c349ddc1e21e266ec7cc1f9b92e205a7a972232f9b89d5424d07361c2c3753d5dbace
  languageName: node
  linkType: hard

"safe-buffer@npm:~5.1.0, safe-buffer@npm:~5.1.1":
  version: 5.1.2
  resolution: "safe-buffer@npm:5.1.2"
  checksum: 10c0/780ba6b5d99cc9a40f7b951d47152297d0e260f0df01472a1b99d4889679a4b94a13d644f7dbc4f022572f09ae9005fa2fbb93bbbd83643316f365a3e9a45b21
  languageName: node
  linkType: hard

"safe-buffer@npm:~5.2.0":
  version: 5.2.1
  resolution: "safe-buffer@npm:5.2.1"
  checksum: 10c0/6501914237c0a86e9675d4e51d89ca3c21ffd6a31642efeba25ad65720bce6921c9e7e974e5be91a786b25aa058b5303285d3c15dbabf983a919f5f630d349f3
  languageName: node
  linkType: hard

"shebang-command@npm:^2.0.0":
  version: 2.0.0
  resolution: "shebang-command@npm:2.0.0"
  dependencies:
    shebang-regex: "npm:^3.0.0"
  checksum: 10c0/a41692e7d89a553ef21d324a5cceb5f686d1f3c040759c50aab69688634688c5c327f26f3ecf7001ebfd78c01f3c7c0a11a7c8bfd0a8bc9f6240d4f40b224e4e
  languageName: node
  linkType: hard

"shebang-regex@npm:^3.0.0":
  version: 3.0.0
  resolution: "shebang-regex@npm:3.0.0"
  checksum: 10c0/1dbed0726dd0e1152a92696c76c7f06084eb32a90f0528d11acd764043aacf76994b2fb30aa1291a21bd019d6699164d048286309a278855ee7bec06cf6fb690
  languageName: node
  linkType: hard

"signal-exit@npm:^4.0.1":
  version: 4.1.0
  resolution: "signal-exit@npm:4.1.0"
  checksum: 10c0/41602dce540e46d599edba9d9860193398d135f7ff72cab629db5171516cfae628d21e7bfccde1bbfdf11c48726bc2a6d1a8fb8701125852fbfda7cf19c6aa83
  languageName: node
  linkType: hard

"streamx@npm:^2.15.0":
  version: 2.16.1
  resolution: "streamx@npm:2.16.1"
  dependencies:
    bare-events: "npm:^2.2.0"
    fast-fifo: "npm:^1.1.0"
    queue-tick: "npm:^1.0.1"
  dependenciesMeta:
    bare-events:
      optional: true
  checksum: 10c0/202b1d7cb7ceb36cdc5d5d0e2c27deafcc8670a4934cda7a5e3d3d45b8d3a64dc43f1b982b1c1cb316f01964dd5137b7e26af3151582c7c29ad3cf4072c6dbb9
  languageName: node
  linkType: hard

"string-width-cjs@npm:string-width@^4.2.0, string-width@npm:^4.1.0":
  version: 4.2.3
  resolution: "string-width@npm:4.2.3"
  dependencies:
    emoji-regex: "npm:^8.0.0"
    is-fullwidth-code-point: "npm:^3.0.0"
    strip-ansi: "npm:^6.0.1"
  checksum: 10c0/1e525e92e5eae0afd7454086eed9c818ee84374bb80328fc41217ae72ff5f065ef1c9d7f72da41de40c75fa8bb3dee63d92373fd492c84260a552c636392a47b
  languageName: node
  linkType: hard

"string-width@npm:^5.0.1, string-width@npm:^5.1.2":
  version: 5.1.2
  resolution: "string-width@npm:5.1.2"
  dependencies:
    eastasianwidth: "npm:^0.2.0"
    emoji-regex: "npm:^9.2.2"
    strip-ansi: "npm:^7.0.1"
  checksum: 10c0/ab9c4264443d35b8b923cbdd513a089a60de339216d3b0ed3be3ba57d6880e1a192b70ae17225f764d7adbf5994e9bb8df253a944736c15a0240eff553c678ca
  languageName: node
  linkType: hard

"string_decoder@npm:^1.3.0":
  version: 1.3.0
  resolution: "string_decoder@npm:1.3.0"
  dependencies:
    safe-buffer: "npm:~5.2.0"
  checksum: 10c0/810614ddb030e271cd591935dcd5956b2410dd079d64ff92a1844d6b7588bf992b3e1b69b0f4d34a3e06e0bd73046ac646b5264c1987b20d0601f81ef35d731d
  languageName: node
  linkType: hard

"string_decoder@npm:~1.1.1":
  version: 1.1.1
  resolution: "string_decoder@npm:1.1.1"
  dependencies:
    safe-buffer: "npm:~5.1.0"
  checksum: 10c0/b4f89f3a92fd101b5653ca3c99550e07bdf9e13b35037e9e2a1c7b47cec4e55e06ff3fc468e314a0b5e80bfbaf65c1ca5a84978764884ae9413bec1fc6ca924e
  languageName: node
  linkType: hard

"strip-ansi-cjs@npm:strip-ansi@^6.0.1, strip-ansi@npm:^6.0.0, strip-ansi@npm:^6.0.1":
  version: 6.0.1
  resolution: "strip-ansi@npm:6.0.1"
  dependencies:
    ansi-regex: "npm:^5.0.1"
  checksum: 10c0/1ae5f212a126fe5b167707f716942490e3933085a5ff6c008ab97ab2f272c8025d3aa218b7bd6ab25729ca20cc81cddb252102f8751e13482a5199e873680952
  languageName: node
  linkType: hard

"strip-ansi@npm:^7.0.1":
  version: 7.1.0
  resolution: "strip-ansi@npm:7.1.0"
  dependencies:
    ansi-regex: "npm:^6.0.1"
  checksum: 10c0/a198c3762e8832505328cbf9e8c8381de14a4fa50a4f9b2160138158ea88c0f5549fb50cb13c651c3088f47e63a108b34622ec18c0499b6c8c3a5ddf6b305ac4
  languageName: node
  linkType: hard

"supports-color@npm:^7.1.0":
  version: 7.2.0
  resolution: "supports-color@npm:7.2.0"
  dependencies:
    has-flag: "npm:^4.0.0"
  checksum: 10c0/afb4c88521b8b136b5f5f95160c98dee7243dc79d5432db7efc27efb219385bbc7d9427398e43dd6cc730a0f87d5085ce1652af7efbe391327bc0a7d0f7fc124
  languageName: node
  linkType: hard

"tar-stream@npm:^3.0.0":
  version: 3.1.7
  resolution: "tar-stream@npm:3.1.7"
  dependencies:
    b4a: "npm:^1.6.4"
    fast-fifo: "npm:^1.2.0"
    streamx: "npm:^2.15.0"
  checksum: 10c0/a09199d21f8714bd729993ac49b6c8efcb808b544b89f23378ad6ffff6d1cb540878614ba9d4cfec11a64ef39e1a6f009a5398371491eb1fda606ffc7f70f718
  languageName: node
  linkType: hard

"tweetnacl@npm:1.0.3":
  version: 1.0.3
  resolution: "tweetnacl@npm:1.0.3"
  checksum: 10c0/069d9df51e8ad4a89fbe6f9806c68e06c65be3c7d42f0701cc43dba5f0d6064686b238bbff206c5addef8854e3ce00c643bff59432ea2f2c639feab0ee1a93f9
  languageName: node
  linkType: hard

"typescript@npm:^5.4.5":
  version: 5.4.5
  resolution: "typescript@npm:5.4.5"
  bin:
    tsc: bin/tsc
    tsserver: bin/tsserver
  checksum: 10c0/2954022ada340fd3d6a9e2b8e534f65d57c92d5f3989a263754a78aba549f7e6529acc1921913560a4b816c46dce7df4a4d29f9f11a3dc0d4213bb76d043251e
  languageName: node
  linkType: hard

"typescript@patch:typescript@npm%3A^5.4.5#optional!builtin<compat/typescript>":
  version: 5.4.5
  resolution: "typescript@patch:typescript@npm%3A5.4.5#optional!builtin<compat/typescript>::version=5.4.5&hash=5adc0c"
  bin:
    tsc: bin/tsc
    tsserver: bin/tsserver
  checksum: 10c0/db2ad2a16ca829f50427eeb1da155e7a45e598eec7b086d8b4e8ba44e5a235f758e606d681c66992230d3fc3b8995865e5fd0b22a2c95486d0b3200f83072ec9
  languageName: node
  linkType: hard

"undici-types@npm:~5.26.4":
  version: 5.26.5
  resolution: "undici-types@npm:5.26.5"
  checksum: 10c0/bb673d7876c2d411b6eb6c560e0c571eef4a01c1c19925175d16e3a30c4c428181fb8d7ae802a261f283e4166a0ac435e2f505743aa9e45d893f9a3df017b501
  languageName: node
  linkType: hard

"util-deprecate@npm:~1.0.1":
  version: 1.0.2
  resolution: "util-deprecate@npm:1.0.2"
  checksum: 10c0/41a5bdd214df2f6c3ecf8622745e4a366c4adced864bc3c833739791aeeeb1838119af7daed4ba36428114b5c67dcda034a79c882e97e43c03e66a4dd7389942
  languageName: node
  linkType: hard

"which@npm:^2.0.1":
  version: 2.0.2
  resolution: "which@npm:2.0.2"
  dependencies:
    isexe: "npm:^2.0.0"
  bin:
    node-which: ./bin/node-which
  checksum: 10c0/66522872a768b60c2a65a57e8ad184e5372f5b6a9ca6d5f033d4b0dc98aff63995655a7503b9c0a2598936f532120e81dd8cc155e2e92ed662a2b9377cc4374f
  languageName: node
  linkType: hard

"wrap-ansi-cjs@npm:wrap-ansi@^7.0.0":
  version: 7.0.0
  resolution: "wrap-ansi@npm:7.0.0"
  dependencies:
    ansi-styles: "npm:^4.0.0"
    string-width: "npm:^4.1.0"
    strip-ansi: "npm:^6.0.0"
  checksum: 10c0/d15fc12c11e4cbc4044a552129ebc75ee3f57aa9c1958373a4db0292d72282f54373b536103987a4a7594db1ef6a4f10acf92978f79b98c49306a4b58c77d4da
  languageName: node
  linkType: hard

"wrap-ansi@npm:^8.1.0":
  version: 8.1.0
  resolution: "wrap-ansi@npm:8.1.0"
  dependencies:
    ansi-styles: "npm:^6.1.0"
    string-width: "npm:^5.0.1"
    strip-ansi: "npm:^7.0.1"
  checksum: 10c0/138ff58a41d2f877eae87e3282c0630fc2789012fc1af4d6bd626eeb9a2f9a65ca92005e6e69a75c7b85a68479fe7443c7dbe1eb8fbaa681a4491364b7c55c60
  languageName: node
  linkType: hard

"zip-stream@npm:^6.0.1":
  version: 6.0.1
  resolution: "zip-stream@npm:6.0.1"
  dependencies:
    archiver-utils: "npm:^5.0.0"
    compress-commons: "npm:^6.0.2"
    readable-stream: "npm:^4.0.0"
  checksum: 10c0/50f2fb30327fb9d09879abf7ae2493705313adf403e794b030151aaae00009162419d60d0519e807673ec04d442e140c8879ca14314df0a0192de3b233e8f28b
  languageName: node
  linkType: hard

"zkcloudworker-cli@workspace:.":
  version: 0.0.0-use.local
  resolution: "zkcloudworker-cli@workspace:."
  dependencies:
    "@types/archiver": "npm:^6.0.2"
    "@types/node": "npm:^20.14.4"
    archiver: "npm:^7.0.1"
    axios: "npm:^1.7.2"
    chalk: "npm:^4.1.2"
    commander: "npm:^12.1.0"
    nats: "npm:^2.26.0"
    typescript: "npm:^5.4.5"
  bin:
    zkcloudworker: ./dist/src/cli.js
    zkcloudworker-cli: ./dist/src/cli.js
    zkcw: ./dist/src/cli.js
  languageName: unknown
  linkType: soft

```

Contents of package.json:
```
{
  "name": "zkcloudworker-cli",
  "description": "zkCloudWorker CLI tool",
  "keywords": [
    "zkCloudWorker",
    "backend",
    "cloud",
    "proof",
    "mina",
    "zkapp",
    "zk",
    "blockchain",
    "web3",
    "zero knowledge"
  ],
  "version": "0.5.3",
  "author": "dfst.io",
  "license": "Apache-2.0",
  "homepage": "https://docs.zkcloudworker.com",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zkcloudworker/zkcloudworker-cli.git"
  },
  "bugs": {
    "url": "https://github.com/zkcloudworker/zkcloudworker-cli/issues"
  },
  "bin": {
    "zkcloudworker": "./dist/src/cli.js",
    "zkcloudworker-cli": "./dist/src/cli.js",
    "zkcw": "./dist/src/cli.js"
  },
  "engines": {
    "node": ">=18.14.0"
  },
  "scripts": {
    "cli": "ts-node src/cli.ts",
    "compile": "rm -rf dist && tsc",
    "login": "yarn npm login",
    "publish": "yarn compile && yarn npm publish --access public"
  },
  "devDependencies": {
    "@types/archiver": "^6.0.2",
    "@types/node": "^20.14.4",
    "typescript": "^5.4.5"
  },
  "dependencies": {
    "archiver": "^7.0.1",
    "axios": "^1.7.2",
    "chalk": "^4.1.2",
    "commander": "^12.1.0",
    "nats": "^2.26.0"
  },
  "packageManager": "yarn@4.2.2"
}

```

Contents of tsconfig.json:
```
{
  "compilerOptions": {
    "target": "es2021" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */,
    "lib": ["es2021", "dom"],
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    "strict": true /* Enable all strict type-checking options. */,
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,
    "composite": true,
    "resolveJsonModule": true
  },
  "exclude": ["dist/**", "tests/**", "node_modules"],
  "include": ["src/**/*", "package.json"]
}

```

Contents of dist/tsconfig.tsbuildinfo:
```
{"program":{"fileNames":["../node_modules/typescript/lib/lib.es5.d.ts","../node_modules/typescript/lib/lib.es2015.d.ts","../node_modules/typescript/lib/lib.es2016.d.ts","../node_modules/typescript/lib/lib.es2017.d.ts","../node_modules/typescript/lib/lib.es2018.d.ts","../node_modules/typescript/lib/lib.es2019.d.ts","../node_modules/typescript/lib/lib.es2020.d.ts","../node_modules/typescript/lib/lib.es2021.d.ts","../node_modules/typescript/lib/lib.dom.d.ts","../node_modules/typescript/lib/lib.es2015.core.d.ts","../node_modules/typescript/lib/lib.es2015.collection.d.ts","../node_modules/typescript/lib/lib.es2015.generator.d.ts","../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../node_modules/typescript/lib/lib.es2015.promise.d.ts","../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../node_modules/typescript/lib/lib.es2016.intl.d.ts","../node_modules/typescript/lib/lib.es2017.date.d.ts","../node_modules/typescript/lib/lib.es2017.object.d.ts","../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../node_modules/typescript/lib/lib.es2017.string.d.ts","../node_modules/typescript/lib/lib.es2017.intl.d.ts","../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../node_modules/typescript/lib/lib.es2018.intl.d.ts","../node_modules/typescript/lib/lib.es2018.promise.d.ts","../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../node_modules/typescript/lib/lib.es2019.array.d.ts","../node_modules/typescript/lib/lib.es2019.object.d.ts","../node_modules/typescript/lib/lib.es2019.string.d.ts","../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../node_modules/typescript/lib/lib.es2019.intl.d.ts","../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../node_modules/typescript/lib/lib.es2020.date.d.ts","../node_modules/typescript/lib/lib.es2020.promise.d.ts","../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../node_modules/typescript/lib/lib.es2020.string.d.ts","../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../node_modules/typescript/lib/lib.es2020.intl.d.ts","../node_modules/typescript/lib/lib.es2020.number.d.ts","../node_modules/typescript/lib/lib.es2021.promise.d.ts","../node_modules/typescript/lib/lib.es2021.string.d.ts","../node_modules/typescript/lib/lib.es2021.weakref.d.ts","../node_modules/typescript/lib/lib.es2021.intl.d.ts","../node_modules/typescript/lib/lib.esnext.intl.d.ts","../node_modules/typescript/lib/lib.decorators.d.ts","../node_modules/typescript/lib/lib.decorators.legacy.d.ts","../node_modules/axios/index.d.ts","../node_modules/chalk/index.d.ts","../src/api.ts","../node_modules/commander/typings/index.d.ts","../src/debug.ts","../src/files.ts","../src/config.ts","../src/options.ts","../node_modules/@types/node/assert.d.ts","../node_modules/@types/node/assert/strict.d.ts","../node_modules/buffer/index.d.ts","../node_modules/undici-types/header.d.ts","../node_modules/undici-types/readable.d.ts","../node_modules/undici-types/file.d.ts","../node_modules/undici-types/fetch.d.ts","../node_modules/undici-types/formdata.d.ts","../node_modules/undici-types/connector.d.ts","../node_modules/undici-types/client.d.ts","../node_modules/undici-types/errors.d.ts","../node_modules/undici-types/dispatcher.d.ts","../node_modules/undici-types/global-dispatcher.d.ts","../node_modules/undici-types/global-origin.d.ts","../node_modules/undici-types/pool-stats.d.ts","../node_modules/undici-types/pool.d.ts","../node_modules/undici-types/handlers.d.ts","../node_modules/undici-types/balanced-pool.d.ts","../node_modules/undici-types/agent.d.ts","../node_modules/undici-types/mock-interceptor.d.ts","../node_modules/undici-types/mock-agent.d.ts","../node_modules/undici-types/mock-client.d.ts","../node_modules/undici-types/mock-pool.d.ts","../node_modules/undici-types/mock-errors.d.ts","../node_modules/undici-types/proxy-agent.d.ts","../node_modules/undici-types/api.d.ts","../node_modules/undici-types/cookies.d.ts","../node_modules/undici-types/patch.d.ts","../node_modules/undici-types/filereader.d.ts","../node_modules/undici-types/diagnostics-channel.d.ts","../node_modules/undici-types/websocket.d.ts","../node_modules/undici-types/content-type.d.ts","../node_modules/undici-types/cache.d.ts","../node_modules/undici-types/interceptors.d.ts","../node_modules/undici-types/index.d.ts","../node_modules/@types/node/globals.d.ts","../node_modules/@types/node/async_hooks.d.ts","../node_modules/@types/node/buffer.d.ts","../node_modules/@types/node/child_process.d.ts","../node_modules/@types/node/cluster.d.ts","../node_modules/@types/node/console.d.ts","../node_modules/@types/node/constants.d.ts","../node_modules/@types/node/crypto.d.ts","../node_modules/@types/node/dgram.d.ts","../node_modules/@types/node/diagnostics_channel.d.ts","../node_modules/@types/node/dns.d.ts","../node_modules/@types/node/dns/promises.d.ts","../node_modules/@types/node/domain.d.ts","../node_modules/@types/node/dom-events.d.ts","../node_modules/@types/node/events.d.ts","../node_modules/@types/node/fs.d.ts","../node_modules/@types/node/fs/promises.d.ts","../node_modules/@types/node/http.d.ts","../node_modules/@types/node/http2.d.ts","../node_modules/@types/node/https.d.ts","../node_modules/@types/node/inspector.d.ts","../node_modules/@types/node/module.d.ts","../node_modules/@types/node/net.d.ts","../node_modules/@types/node/os.d.ts","../node_modules/@types/node/path.d.ts","../node_modules/@types/node/perf_hooks.d.ts","../node_modules/@types/node/process.d.ts","../node_modules/@types/node/punycode.d.ts","../node_modules/@types/node/querystring.d.ts","../node_modules/@types/node/readline.d.ts","../node_modules/@types/node/readline/promises.d.ts","../node_modules/@types/node/repl.d.ts","../node_modules/@types/node/sea.d.ts","../node_modules/@types/node/stream.d.ts","../node_modules/@types/node/stream/promises.d.ts","../node_modules/@types/node/stream/consumers.d.ts","../node_modules/@types/node/stream/web.d.ts","../node_modules/@types/node/string_decoder.d.ts","../node_modules/@types/node/test.d.ts","../node_modules/@types/node/timers.d.ts","../node_modules/@types/node/timers/promises.d.ts","../node_modules/@types/node/tls.d.ts","../node_modules/@types/node/trace_events.d.ts","../node_modules/@types/node/tty.d.ts","../node_modules/@types/node/url.d.ts","../node_modules/@types/node/util.d.ts","../node_modules/@types/node/v8.d.ts","../node_modules/@types/node/vm.d.ts","../node_modules/@types/node/wasi.d.ts","../node_modules/@types/node/worker_threads.d.ts","../node_modules/@types/node/zlib.d.ts","../node_modules/@types/node/globals.global.d.ts","../node_modules/@types/node/index.d.ts","../node_modules/@types/readdir-glob/index.d.ts","../node_modules/@types/archiver/index.d.ts","../src/zip.ts","../src/upload.ts","../src/sleep.ts","../src/install.ts","../src/deploy.ts","../src/verify.ts","../package.json","../node_modules/nats/lib/nats-base-client/util.d.ts","../node_modules/nats/lib/nats-base-client/codec.d.ts","../node_modules/nats/lib/jetstream/jsbaseclient_api.d.ts","../node_modules/nats/lib/jetstream/jsapi_types.d.ts","../node_modules/nats/lib/jetstream/jslister.d.ts","../node_modules/nats/lib/jetstream/jsmconsumer_api.d.ts","../node_modules/nats/lib/nats-base-client/queued_iterator.d.ts","../node_modules/nats/lib/nats-base-client/idleheartbeat_monitor.d.ts","../node_modules/nats/lib/jetstream/jsmsg.d.ts","../node_modules/nats/lib/jetstream/consumer.d.ts","../node_modules/nats/lib/nats-base-client/typedsub.d.ts","../node_modules/nats/lib/jetstream/types.d.ts","../node_modules/nats/lib/nats-base-client/core.d.ts","../node_modules/nats/lib/nats-base-client/transport.d.ts","../node_modules/nats/lib/nats-base-client/databuffer.d.ts","../node_modules/nats/lib/nats-base-client/servers.d.ts","../node_modules/nats/lib/nats-base-client/muxsubscription.d.ts","../node_modules/nats/lib/nats-base-client/heartbeats.d.ts","../node_modules/nats/lib/nats-base-client/denobuffer.d.ts","../node_modules/nats/lib/nats-base-client/parser.d.ts","../node_modules/nats/lib/nats-base-client/semver.d.ts","../node_modules/nats/lib/nats-base-client/protocol.d.ts","../node_modules/nats/lib/nats-base-client/encoders.d.ts","../node_modules/nats/lib/nats-base-client/types.d.ts","../node_modules/nats/lib/nats-base-client/nats.d.ts","../node_modules/nats/lib/nats-base-client/nuid.d.ts","../node_modules/nats/lib/nats-base-client/msg.d.ts","../node_modules/nats/lib/nats-base-client/headers.d.ts","../node_modules/nats/lib/nats-base-client/options.d.ts","../node_modules/nats/lib/nats-base-client/request.d.ts","../node_modules/nats/lib/nats-base-client/authenticator.d.ts","../node_modules/nats/lib/nats-base-client/nkeys.d.ts","../node_modules/nats/lib/nats-base-client/bench.d.ts","../node_modules/nats/lib/nats-base-client/ipparser.d.ts","../node_modules/nats/lib/jetstream/kv.d.ts","../node_modules/nats/lib/nats-base-client/internal_mod.d.ts","../node_modules/nats/lib/jetstream/jsutil.d.ts","../node_modules/nats/lib/jetstream/internal_mod.d.ts","../node_modules/nats/lib/src/nats-base-client.d.ts","../node_modules/nats/lib/src/connect.d.ts","../node_modules/nats/lib/nats-base-client/mod.d.ts","../node_modules/nats/lib/jetstream/mod.d.ts","../node_modules/nats/lib/src/mod.d.ts","../src/watch.ts","../src/cli.ts"],"fileInfos":[{"version":"824cb491a40f7e8fdeb56f1df5edf91b23f3e3ee6b4cde84d4a99be32338faee","affectsGlobalScope":true},"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","9a68c0c07ae2fa71b44384a839b7b8d81662a236d4b9ac30916718f7510b1b2d","5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569",{"version":"87d693a4920d794a73384b3c779cadcb8548ac6945aa7a925832fe2418c9527a","affectsGlobalScope":true},{"version":"138fb588d26538783b78d1e3b2c2cc12d55840b97bf5e08bca7f7a174fbe2f17","affectsGlobalScope":true},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true},{"version":"4443e68b35f3332f753eacc66a04ac1d2053b8b035a0e0ac1d455392b5e243b3","affectsGlobalScope":true},{"version":"bc47685641087c015972a3f072480889f0d6c65515f12bd85222f49a98952ed7","affectsGlobalScope":true},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true},{"version":"93495ff27b8746f55d19fcbcdbaccc99fd95f19d057aed1bd2c0cafe1335fbf0","affectsGlobalScope":true},{"version":"6fc23bb8c3965964be8c597310a2878b53a0306edb71d4b5a4dfe760186bcc01","affectsGlobalScope":true},{"version":"ea011c76963fb15ef1cdd7ce6a6808b46322c527de2077b6cfdf23ae6f5f9ec7","affectsGlobalScope":true},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true},{"version":"bb42a7797d996412ecdc5b2787720de477103a0b2e53058569069a0e2bae6c7e","affectsGlobalScope":true},{"version":"4738f2420687fd85629c9efb470793bb753709c2379e5f85bc1815d875ceadcd","affectsGlobalScope":true},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true},{"version":"9fc46429fbe091ac5ad2608c657201eb68b6f1b8341bd6d670047d32ed0a88fa","affectsGlobalScope":true},{"version":"61c37c1de663cf4171e1192466e52c7a382afa58da01b1dc75058f032ddf0839","affectsGlobalScope":true},{"version":"b541a838a13f9234aba650a825393ffc2292dc0fc87681a5d81ef0c96d281e7a","affectsGlobalScope":true},{"version":"b20fe0eca9a4e405f1a5ae24a2b3290b37cf7f21eba6cbe4fc3fab979237d4f3","affectsGlobalScope":true},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true},{"version":"49ed889be54031e1044af0ad2c603d627b8bda8b50c1a68435fe85583901d072","affectsGlobalScope":true},{"version":"e93d098658ce4f0c8a0779e6cab91d0259efb88a318137f686ad76f8410ca270","affectsGlobalScope":true},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true},{"version":"bf14a426dbbf1022d11bd08d6b8e709a2e9d246f0c6c1032f3b2edb9a902adbe","affectsGlobalScope":true},{"version":"5e07ed3809d48205d5b985642a59f2eba47c402374a7cf8006b686f79efadcbd","affectsGlobalScope":true},{"version":"2b72d528b2e2fe3c57889ca7baef5e13a56c957b946906d03767c642f386bbc3","affectsGlobalScope":true},{"version":"8073890e29d2f46fdbc19b8d6d2eb9ea58db9a2052f8640af20baff9afbc8640","affectsGlobalScope":true},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true},{"version":"51e547984877a62227042850456de71a5c45e7fe86b7c975c6e68896c86fa23b","affectsGlobalScope":true},{"version":"956d27abdea9652e8368ce029bb1e0b9174e9678a273529f426df4b3d90abd60","affectsGlobalScope":true},{"version":"13f6e6380c78e15e140243dc4be2fa546c287c6d61f4729bc2dd7cf449605471","affectsGlobalScope":true},{"version":"33358442698bb565130f52ba79bfd3d4d484ac85fe33f3cb1759c54d18201393","affectsGlobalScope":true},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true},"01ba761ce6d75a4142858a053f45d64d255e057049ab1cc4d9a93e76b8b5c444","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2",{"version":"f515d79e846adfb90be3d005bcf4bd077a7fb46ac5126036f86f9b7961c84816","signature":"192ef8a5deddc21c6fde0093bc494020771801bc277564d9fbcfb4216dbf24cb"},"a722a71d8f3cb0028857b12579c7eca55acc76bf34e5db7eaf6fe817b985f9c3",{"version":"aee22f82a9d1e1ccaf920323dfc6ee7b49361961edf9a6d7397f8159936afe63","signature":"08d7148a534f86c023eb1ef36a5dd5cbcbe91a0b88958112081f3d080db101a9"},{"version":"9c98bc281f2f2aaf63cbd775838bef838899e8786065407b5f1c772dabd0b394","signature":"447866dc1a7b7edb53ea821b2f456487af0779e385db8f837deffd66d792d5af"},{"version":"793497058f745e3adf284cade9b5a60cc1a9b652c2b65166040feaa63b3fe2d8","signature":"7b8de3b60cd3ece9578da9719fc17cc2f4775f70c80a2e9e337e05b4b7170b59"},{"version":"6cdce08379b1e95ad137c9c2964eb684ba29ae8b83bdc4a602c6718307398707","signature":"218849a96c24e205e1632e8ac14d7130166e49151d10004c117189ea1f1bed0a"},"2db0dd3aaa2ed285950273ce96ae8a450b45423aa9da2d10e194570f1233fa6b","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","7180c03fd3cb6e22f911ce9ba0f8a7008b1a6ddbe88ccf16a9c8140ef9ac1686","25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","54cb85a47d760da1c13c00add10d26b5118280d44d58e6908d8e89abbd9d7725","3e4825171442666d31c845aeb47fcd34b62e14041bb353ae2b874285d78482aa","c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","a967bfe3ad4e62243eb604bf956101e4c740f5921277c60debaf325c1320bf88","e9775e97ac4877aebf963a0289c81abe76d1ec9a2a7778dbe637e5151f25c5f3","471e1da5a78350bc55ef8cef24eb3aca6174143c281b8b214ca2beda51f5e04a","cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","db3435f3525cd785bf21ec6769bf8da7e8a776be1a99e2e7efb5f244a2ef5fee","c3b170c45fc031db31f782e612adf7314b167e60439d304b49e704010e7bafe5","40383ebef22b943d503c6ce2cb2e060282936b952a01bea5f9f493d5fb487cc7","4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","3a84b7cb891141824bd00ef8a50b6a44596aded4075da937f180c90e362fe5f6","13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","33203609eba548914dc83ddf6cadbc0bcb6e8ef89f6d648ca0908ae887f9fcc5","0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","9f0a92164925aa37d4a5d9dd3e0134cff8177208dba55fd2310cd74beea40ee2","8bfdb79bf1a9d435ec48d9372dc93291161f152c0865b81fc0b2694aedb4578d","2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","d32275be3546f252e3ad33976caf8c5e842c09cb87d468cb40d5f4cf092d1acc","4a0c3504813a3289f7fb1115db13967c8e004aa8e4f8a9021b95285502221bd1",{"version":"e7be367719c613d580d4b27fdf8fe64c9736f48217f4b322c0d63b2971460918","affectsGlobalScope":true},"3d77c73be94570813f8cadd1f05ebc3dc5e2e4fdefe4d340ca20cd018724ee36",{"version":"392eadc2af403dd10b4debfbc655c089a7fa6a9750caeb770cfb30051e55e848","affectsGlobalScope":true},"b67f9c5d42e7770ddf8b6d1747b531275c44617e8071d2602a2cffd2932ad95e","53f0960fdcc53d097918adfd8861ffbe0db989c56ffc16c052197bf115da5ed6",{"version":"662163e5327f260b23ca0a1a1ad8a74078aabb587c904fcb5ef518986987eaff","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb",{"version":"c48c503c6b3f63baf18257e9a87559b5602a4e960107c762586d2a6a62b64a18","affectsGlobalScope":true},"b0c0d1d13be149f790a75b381b413490f98558649428bb916fd2d71a3f47a134","3c884d9d9ec454bdf0d5a0b8465bf8297d2caa4d853851d92cc417ac6f30b969","3bb6e21a9f30417c0a059e240b3f8f70c8af9c4cb6f2fd1bc2db594c647e285f","7483ef24249f6a3e24eb3d8136ec7fe0633cd6f8ffe752e2a8d99412aff35bb7","d0ca5d7df114035258a9d01165be309371fcccf0cccd9d57b1453204686d1ed0",{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true},{"version":"1bb9aab2311a9d596a45dba7c378b4e23846738d9bae54d60863dd3676b1edbc","affectsGlobalScope":true},"173b6275a81ebdb283b180654890f46516c21199734fed01a773b1c168b8c45c","304f66274aa8119e8d65a49b1cff84cbf803def6afe1b2cc987386e9a9890e22","1b9adafe8a7fefaeaf9099a0e06f602903f6268438147b843a33a5233ac71745","98273274f2dbb79b0b2009b20f74eca4a7146a3447c912d580cd5d2d94a7ae30","c933f7ba4b201c98b14275fd11a14abb950178afd2074703250fe3654fc10cd2","2eaa31492906bc8525aff3c3ec2236e22d90b0dfeee77089f196cd0adf0b3e3b",{"version":"ea455cc68871b049bcecd9f56d4cf27b852d6dafd5e3b54468ca87cc11604e4d","affectsGlobalScope":true},"8f5814f29dbaf8bacd1764aebdf1c8a6eb86381f6a188ddbac0fcbaab855ce52","a63d03de72adfb91777784015bd3b4125abd2f5ef867fc5a13920b5649e8f52b","d20e003f3d518a7c1f749dbe27c6ab5e3be7b3c905a48361b04a9557de4a6900",{"version":"1d4d78c8b23c9ddaaaa49485e6adc2ec01086dfe5d8d4d36ca4cdc98d2f7e74a","affectsGlobalScope":true},{"version":"44fc16356b81c0463cc7d7b2b35dcf324d8144136f5bc5ce73ced86f2b3475b5","affectsGlobalScope":true},"575fb200043b11b464db8e42cc64379c5fd322b6d787638e005b5ee98a64486d","6de2f225d942562733e231a695534b30039bdf1875b377bb7255881f0df8ede8","56249fd3ef1f6b90888e606f4ea648c43978ef43a7263aafad64f8d83cd3b8aa","139ad1dc93a503da85b7a0d5f615bddbae61ad796bc68fedd049150db67a1e26","7b166975fdbd3b37afb64707b98bca88e46577bbc6c59871f9383a7df2daacd1","9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","81505c54d7cad0009352eaa21bd923ab7cdee7ec3405357a54d9a5da033a2084","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633","3c1f19c7abcda6b3a4cf9438a15c7307a080bd3b51dfd56b198d9f86baf19447","2ee1645e0df9d84467cfe1d67b0ad3003c2f387de55874d565094464ee6f2927",{"version":"abe61b580e030f1ca3ee548c8fd7b40fc686a97a056d5d1481f34c39c637345f","affectsGlobalScope":true},{"version":"9cf780e96b687e4bdfd1907ed26a688c18b89797490a00598fa8b8ab683335dd","affectsGlobalScope":true},"98e00f3613402504bc2a2c9a621800ab48e0a463d1eed062208a4ae98ad8f84c","9ae88ce9f73446c24b2d2452e993b676da1b31fca5ceb7276e7f36279f693ed1","e49d7625faff2a7842e4e7b9b197f972633fca685afcf6b4403400c97d087c36","b82c38abc53922b1b3670c3af6f333c21b735722a8f156e7d357a2da7c53a0a0",{"version":"b423f53647708043299ded4daa68d95c967a2ac30aa1437adc4442129d7d0a6c","affectsGlobalScope":true},{"version":"7245af181218216bacb01fbdf51095617a51661f20d77178c69a377e16fb69ed","affectsGlobalScope":true},"4f0fc7b7f54422bd97cfaf558ddb4bca86893839367b746a8f86b60ac7619673","4cdd8b6b51599180a387cc7c1c50f49eca5ce06595d781638fd0216520d98246","d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c",{"version":"8704423bf338bff381ebc951ed819935d0252d90cd6de7dffe5b0a5debb65d07","affectsGlobalScope":true},"7c6929fd7cbf38499b6a600b91c3b603d1d78395046dc3499b2b92d01418b94b",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"a42be67ed1ddaec743582f41fc219db96a1b69719fccac6d1464321178d610fc","7bc71d52df9d8e5cc55218d347a91b1758b38341f9cbbac0b80057aa9d93daa6","7a1f7b274cf8a66b83fcf42153bde6f25f4eb4d7696d4a6b17e4a8878d128306",{"version":"fad8617b2f6d1124968ebd90cae54d05eca60cb6dec68156669c39d89aa76454","signature":"287c47686739d63eef61d03592d0eafcf57937fd2303736c08cf57c48b3ffeda"},{"version":"8634384177a525147fa3ffc1b61268e8496aad55d17d6df1fc820da6988752ce","signature":"df070dad54f800576bc72a1e92861cf35c8626951ec2d5b9ce88ced84007679a"},{"version":"37d63b574f3fe216892463166e4afd88b461dfd473d6d270e914a5633858adf3","signature":"adefa308b0adcf20fa0a84e2c0fb2ba94d549b1c7e6e689fa89af3bf705ddbfe"},{"version":"343b61cc773ab93cc325298ed5a73faf31e9a69f45b29df033076f8103f60b43","signature":"abe76c46d5e0dbb6776e50e976267323ecaba499a5b55ac81af3afb435abd912"},{"version":"60a494b0f5ca76f4a78750bde824e7572499f202aea1bdb237372347400e1b38","signature":"4bfadd9f193bd214200a363245a7a5af7ac5ff381b15fee767c5af27a8521d48"},{"version":"9c0ec9f93615a39424e1f4964b0113416ad82abdd89dc6fd479ccfd21e6642c6","signature":"2a47295ef78b958e40ddaf0c9a331fdb23318adc692ef3d24420c410de0a904b"},"5b8c3533f64e70fed08530cf093cfb7bca8adac00cc23c3e54c6f6f07c1b2fd1","a64604bce9efa09bf3ef246d8ab174b573f13068fb0d0e29ae4d6d825bbfad4a","33d47592253ddf2c8b7a294ae95ab40a94b5ddb5f6b9b83b722ed43849f17e41","de9850a04c2e1d54602a3e88bb5aa4760d9db22cf345ea3b02a08dcd1fc37c8b","4c11d7f23b1862075222da74ed1d911916afc2007b978f0dd2e2a3237b03ef59","f67a33e9e24f568c91a4e3e2d8cabb3daf3caae32d3d08fb397dae3780639eec","af1307c43f75b749851f8e2f67b2e6736487d1441621ca18732c218a47496a48","1614011a9cb4b5228fe0819521394890c28ac1b6fdfca626b71d84c110d02850","4d26aca4ae69dfa0bfcd19c7b291e5867698b1ffe1f6af6098b4456697386c6e","8503b140f964d992118fed36ffae9e4b4afb4ab86ed2d2d00a198e960336996c","b6ceba20c577dd7ffe1dc023d1f356c521c5afe94e589e7e3899cfede465f14f","79d5f1841caac458d7a47ace5cc547b4d7e0b6349e8949b2c4c6e6ac236fb1aa","09fbed42abef0776ff0ff82a3e9db415f81baef281c70607a40db924a904d1c9","c26d4252659dd9a4ebbebea5e8138a5b12baa98a617acf31cac264667bce2878","d575ac31e0a1d72f3b2af47381bbe038257d78712a953aa7d3273ca247e00e6a","ecde95506bc9bfaf169eba3337005fe1a4a3fc4a4ae3f4d317a85553e2f22c64","2337a6996d39eea4db4e86f41d78ebfe70ff168ebd2eba88953199752b325028","0cd87633b68c343a4b995c1f7ae28799737d46d950abbb3fc07fbd9db15ab560","3e28f9c9b27f5789204aad8692d12fe46a69c962d79dfaf70d3c37bc41db247d","30e03e99c34605a4a408d6b8535e769b1d02f21af421598d1f44bef153637566","5528fcd80925b30412eab8131182c1a77baa335dfe875334ed90e9ad0e129281","45459e5e862aa6152414fdc4a73ff3a5ca68a703cf9040e4a5af3788a62820f4","9f4eb5b4f6ee41dc7d1cabadee8e0ca38d5ab4a63b060e370147524baff2ca9d","d3f94171eceb81ac757bcc2012262648d160236ad92115265256ee3f8e4270d0","aaa9935369c79df9901d01238721a0c9552d2d5d8b2003e38f198d5042f75b51","b8d3d3d6e53a69c166096c572bd0c1d857ea9cf065320b1912eb3bac79d1f455","db6b1282d27fa7c0c1f63af90a134e2b3641b2517fe63e79600173f938825883","7a86ebd2511b08bd29ea232c128c26e6408697984945927bc2d3521e3a407512","89fbcb36e692ef4511d71acc2c3c1ef9579b1a9217da2ce207fe0f016fa77440","3bd2b18fb7a8e2858563f285e5195fc3cb58bddc030705bc845b8a1d85bb3894","caf0ba1b68ff9c4435615c16bb252e1ef51170aab1d355bb6663cbb58c09b06c","7179bfaac26759ccb4ed3ea13d7fcfb5cf3150d9632e97cd8f4650990e8d63ad","bc399896d66e5cc6cb7d069180a7181b93d14c43e938852b5c8cfefe1b76b443","abc8bcb0d28b91aa8de5f35cd60d107e4d4db4087217ebd1ab145673ba7ac0ad","1a4df56182c0c3db0c3cd24053b2a448a7cf0cf434c132b3baad7f7779502e90","d8783785670d52461a952e24f256bf71f3cf24f5218dbab03d832a245d702b68","f4f324ec2858648d4900b66ca0e167a29ba3b59c4f03e0425bd239dc0dc63dee","2ead347cdc2610b3ea0f000c4e55a02904a9fb58e45efc9baf1d0589a181c221","06e64968516bbf12b7d388d01d5f3f9c18e705fd1b15ce108eb4c568d0ab3f2d","5824546363337819f73a70cb94120a0cca407c63bf1f57098dd57a89ee825b2e","fe343271f55363e8602b4fb43ad712833cb68ebeb50b2ff1c05b91ee04b4e07e","7ffa23db9027d9029976f874d028fbc95c4e96cbedc2708895e15870457ae59f","465447d62f1750e04d98cc30df8756dc79a0e8ce0a33a02bc8da46f303bdd8e5","34c89375bf43cf3caec2b2e3eb4709d22b7d991d8db89a2744a95106c64532a6",{"version":"2bb00202c1b87d445bd9bf5b9653cf52e773630c95315a94beb28cba7f89fb1f","signature":"70a4e42fe5e9f285ecd961670b2a061f61e0490521ca0bd9919280de58c2187b"},{"version":"a54ab23861535b364557cdcb300b7ef550c67308a28178c048d92e44cbeac604","signature":"9076cf76abbe28e947f052338ef432a07a22b4158bd92c743a195023c33755ac"}],"root":[54,[56,59],[150,156],200,201],"options":{"composite":true,"esModuleInterop":true,"module":1,"outDir":"./","skipLibCheck":true,"strict":true,"target":8},"fileIdsList":[[110,128,145,148],[60],[96],[97,102,131],[98,103,109,110,117,128,139],[98,99,109,117],[100,140],[101,102,110,118],[102,128,136],[103,105,109,117],[96,104],[105,106],[109],[107,109],[96,109],[109,110,111,128,139],[109,110,111,124,128,131],[94,97,144],[105,109,112,117,128,139],[109,110,112,113,117,128,136,139],[112,114,128,136,139],[60,61,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146],[109,115],[116,139,144],[105,109,117,128],[118],[119],[96,120],[117,118,121,138,144],[122],[123],[109,124,125],[124,126,140,142],[97,109,128,129,130,131],[97,128,130],[128,129],[131],[132],[96,128],[109,134,135],[134,135],[102,117,128,136],[137],[117,138],[97,112,123,139],[102,140],[128,141],[116,142],[143],[97,102,109,111,120,128,139,142,144],[128,145],[109,110,147],[157,160,162,163,164,165,169],[159,160,161,162,165,166,168,193],[169],[158,169,181],[159,160],[159,160,161,169],[160,169],[160,165,168,169],[168,194],[159,160,161,162,165,166,167,169],[157,169],[168],[157,158,163,167,169,170,171,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191],[192],[158,169,176],[168,169,177,178,180],[169,175],[157,163,169,170,171,172,173,174,176,177],[157,169,173],[157,163,169,178],[167,169,179],[195],[196,197,198],[192,194],[71,75,139],[71,128,139],[66],[68,71,136,139],[117,136],[147],[66,147],[68,71,117,139],[63,64,67,70,97,109,128,139],[63,69],[67,71,97,131,139,147],[97,147],[87,97,147],[65,66,147],[71],[65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93],[71,78,79],[69,71,79,80],[70],[63,66,71],[71,75,79,80],[75],[69,71,74,139],[63,68,69,71,75,78],[97,128],[66,71,87,97,144,147],[52,53],[55,58,154,155,156,200],[53,56,57],[201],[53,56,57,59,111,150,151,153],[56,111,201],[53,54,56,152],[56,57,58,201],[52,53,54,56],[59,199],[53,56,57,110,149],[55]],"referencedMap":[[149,1],[60,2],[61,2],[96,3],[97,4],[98,5],[99,6],[100,7],[101,8],[102,9],[103,10],[104,11],[105,12],[106,12],[108,13],[107,14],[109,15],[110,16],[111,17],[95,18],[112,19],[113,20],[114,21],[147,22],[115,23],[116,24],[117,25],[118,26],[119,27],[120,28],[121,29],[122,30],[123,31],[124,32],[125,32],[126,33],[128,34],[130,35],[129,36],[131,37],[132,38],[133,39],[134,40],[135,41],[136,42],[137,43],[138,44],[139,45],[140,46],[141,47],[142,48],[143,49],[144,50],[145,51],[148,52],[166,53],[194,54],[160,55],[159,56],[161,57],[162,58],[165,59],[193,55],[191,60],[198,61],[168,62],[187,55],[189,63],[169,64],[184,55],[174,63],[192,65],[197,66],[183,67],[173,55],[181,68],[185,55],[176,69],[178,70],[163,63],[186,71],[172,55],[170,55],[167,72],[180,73],[157,55],[196,74],[199,75],[195,76],[78,77],[85,78],[77,77],[92,79],[69,80],[68,81],[91,82],[86,83],[89,84],[71,85],[70,86],[66,87],[65,88],[88,89],[67,90],[72,91],[76,91],[94,92],[93,91],[80,93],[81,94],[83,95],[79,96],[82,97],[87,82],[74,98],[75,99],[84,100],[64,101],[90,102],[54,103],[201,104],[58,105],[56,106],[154,107],[57,108],[153,109],[59,110],[151,111],[155,107],[200,112],[150,113]],"exportedModulesMap":[[149,1],[60,2],[61,2],[96,3],[97,4],[98,5],[99,6],[100,7],[101,8],[102,9],[103,10],[104,11],[105,12],[106,12],[108,13],[107,14],[109,15],[110,16],[111,17],[95,18],[112,19],[113,20],[114,21],[147,22],[115,23],[116,24],[117,25],[118,26],[119,27],[120,28],[121,29],[122,30],[123,31],[124,32],[125,32],[126,33],[128,34],[130,35],[129,36],[131,37],[132,38],[133,39],[134,40],[135,41],[136,42],[137,43],[138,44],[139,45],[140,46],[141,47],[142,48],[143,49],[144,50],[145,51],[148,52],[166,53],[194,54],[160,55],[159,56],[161,57],[162,58],[165,59],[193,55],[191,60],[198,61],[168,62],[187,55],[189,63],[169,64],[184,55],[174,63],[192,65],[197,66],[183,67],[173,55],[181,68],[185,55],[176,69],[178,70],[163,63],[186,71],[172,55],[170,55],[167,72],[180,73],[157,55],[196,74],[199,75],[195,76],[78,77],[85,78],[77,77],[92,79],[69,80],[68,81],[91,82],[86,83],[89,84],[71,85],[70,86],[66,87],[65,88],[88,89],[67,90],[72,91],[76,91],[94,92],[93,91],[80,93],[81,94],[83,95],[79,96],[82,97],[87,82],[74,98],[75,99],[84,100],[64,101],[90,102],[201,114]],"semanticDiagnosticsPerFile":[149,60,61,96,97,98,99,100,101,102,103,104,105,106,108,107,109,110,111,95,146,112,113,114,147,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,148,52,62,53,55,166,194,160,159,161,162,165,193,191,198,168,187,189,158,169,171,175,179,184,174,164,192,190,197,183,173,181,188,182,185,176,178,163,186,177,172,170,167,180,157,196,199,195,50,51,9,11,10,2,12,13,14,15,16,17,18,19,3,20,4,21,25,22,23,24,26,27,28,5,29,30,31,32,6,36,33,34,35,37,7,38,43,44,39,40,41,42,8,48,45,46,47,1,49,78,85,77,92,69,68,91,86,89,71,70,66,65,88,67,72,73,76,63,94,93,80,81,83,79,82,87,74,75,84,64,90,156,54,201,58,56,154,57,153,59,152,151,155,200,150],"latestChangedDtsFile":"./src/cli.d.ts"},"version":"5.4.5"}
```

Contents of dist/package.json:
```
{
    "name": "zkcloudworker-cli",
    "description": "zkCloudWorker CLI tool",
    "keywords": [
        "zkCloudWorker",
        "backend",
        "cloud",
        "proof",
        "mina",
        "zkapp",
        "zk",
        "blockchain",
        "web3",
        "zero knowledge"
    ],
    "version": "0.5.3",
    "author": "dfst.io",
    "license": "Apache-2.0",
    "homepage": "https://docs.zkcloudworker.com",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/zkcloudworker/zkcloudworker-cli.git"
    },
    "bugs": {
        "url": "https://github.com/zkcloudworker/zkcloudworker-cli/issues"
    },
    "bin": {
        "zkcloudworker": "./dist/src/cli.js",
        "zkcloudworker-cli": "./dist/src/cli.js",
        "zkcw": "./dist/src/cli.js"
    },
    "engines": {
        "node": ">=18.14.0"
    },
    "scripts": {
        "cli": "ts-node src/cli.ts",
        "compile": "rm -rf dist && tsc",
        "login": "yarn npm login",
        "publish": "yarn compile && yarn npm publish --access public"
    },
    "devDependencies": {
        "@types/archiver": "^6.0.2",
        "@types/node": "^20.14.4",
        "typescript": "^5.4.5"
    },
    "dependencies": {
        "archiver": "^7.0.1",
        "axios": "^1.7.2",
        "chalk": "^4.1.2",
        "commander": "^12.1.0",
        "nats": "^2.26.0"
    },
    "packageManager": "yarn@4.2.2"
}

```

Contents of dist/src/upload.d.ts:
```
/// <reference types="node" />
export declare function upload(params: {
    data: Buffer;
    mimeType: string | undefined;
    developer: string;
    repo: string;
    version: string;
    JWT: string;
}): Promise<void>;

```

Contents of dist/src/verify.d.ts:
```
export declare function verify(params: {
    protect?: boolean;
    exclude?: string[];
}): Promise<void>;

```

Contents of dist/src/api.d.ts:
```
export declare function zkCloudWorkerRequest(params: {
    command: string;
    task?: string;
    transactions?: string[];
    args?: string;
    metadata?: string;
    mode?: string;
    jobId?: string;
    repo?: string;
    developer?: string;
    JWT: string;
    includeLogs?: boolean;
}): Promise<any>;

```

Contents of dist/src/options.d.ts:
```
export declare function options(): Promise<{
    developer: string;
    repo: string;
    version: string;
    JWT: string;
    packageManager: string;
}>;

```

Contents of dist/src/sleep.d.ts:
```
export declare function sleep(ms: number): Promise<unknown>;

```

Contents of dist/src/debug.d.ts:
```
export declare function debug(): boolean;

```

Contents of dist/src/files.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDirectories = exports.isExist = exports.saveText = exports.saveBinary = exports.loadText = exports.loadBinary = exports.isFileExist = exports.loadPackageJson = exports.load = exports.write = exports.rootFolder = exports.folder = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const debug_1 = require("./debug");
const cli_1 = require("./cli");
function folder() {
    let rootFolder = cli_1.program.opts().folder ?? "./";
    if (rootFolder.endsWith("/") === false)
        rootFolder += "/";
    return rootFolder + ".zkcloudworker/";
}
exports.folder = folder;
function rootFolder() {
    let rootFolder = cli_1.program.opts().folder ?? "./";
    if (rootFolder.endsWith("/") === false)
        rootFolder += "/";
    return rootFolder;
}
exports.rootFolder = rootFolder;
async function write(params) {
    const { data, filename, allowRewrite } = params;
    const name = folder() + filename + ".json";
    try {
        await createDirectories();
        if ((0, debug_1.debug)())
            console.log("Writing file", {
                data,
                filename,
                allowRewrite,
            });
        if (!allowRewrite && (await isExist(name))) {
            console.error(`File ${name} already exists`);
            return;
        }
        await backup(filename);
        await promises_1.default.writeFile(name, JSON.stringify(data, null, 2));
        return name;
    }
    catch (e) {
        console.error(`Error writing file ${name}`);
        return undefined;
    }
}
exports.write = write;
async function load(filename) {
    const name = folder() + filename + ".json";
    try {
        const filedata = await promises_1.default.readFile(name, "utf8");
        const data = JSON.parse(filedata);
        return data;
    }
    catch (e) {
        console.error(`File ${name} does not exist or has wrong format`);
        return undefined;
    }
}
exports.load = load;
async function loadPackageJson() {
    const name = rootFolder() + "package.json";
    try {
        const filedata = await promises_1.default.readFile(name, "utf8");
        const data = JSON.parse(filedata);
        return data;
    }
    catch (e) {
        console.error(`File ${name} does not exist or has wrong format`);
        return undefined;
    }
}
exports.loadPackageJson = loadPackageJson;
async function isFileExist(filename) {
    const name = folder() + filename + ".json";
    try {
        if ((0, debug_1.debug)())
            console.log("isFileExist", {
                filename,
                name,
            });
        if (await isExist(name))
            return true;
        else
            return false;
    }
    catch (e) {
        console.error(`Error checking file ${name}`);
        return false;
    }
}
exports.isFileExist = isFileExist;
async function loadBinary(filename) {
    try {
        return await promises_1.default.readFile(filename);
    }
    catch (e) {
        console.error(`Cannot read file ${filename}`, e);
        return undefined;
    }
}
exports.loadBinary = loadBinary;
async function loadText(filename) {
    try {
        return await promises_1.default.readFile(filename, "utf8");
    }
    catch (e) {
        console.error(`Cannot read file ${filename}`, e);
        return undefined;
    }
}
exports.loadText = loadText;
async function saveBinary(params) {
    const { data, filename } = params;
    try {
        await promises_1.default.writeFile(filename, data, "binary");
    }
    catch (e) {
        console.error(`Error writing file ${filename}`, e);
    }
}
exports.saveBinary = saveBinary;
async function saveText(params) {
    const { data, filename } = params;
    try {
        await promises_1.default.writeFile(filename, data, "utf8");
    }
    catch (e) {
        console.error(`Error writing file ${filename}`, e);
    }
}
exports.saveText = saveText;
async function isExist(name) {
    // check if file exists
    try {
        await promises_1.default.access(name);
        return true;
    }
    catch (e) {
        // if not, return
        return false;
    }
}
exports.isExist = isExist;
async function backup(filename) {
    const name = folder() + filename + ".json";
    const backupName = folder() + "backup/" + filename + "." + getFormattedDateTime() + ".json";
    // check if file exists
    try {
        await promises_1.default.access(name);
    }
    catch (e) {
        // if not, return
        return;
    }
    // copy file to backup
    await promises_1.default.copyFile(name, backupName);
}
async function createDirectories() {
    // check if data directory exists
    try {
        await promises_1.default.access(folder());
    }
    catch (e) {
        // if not, create it
        await promises_1.default.mkdir(folder());
    }
    // check if data directory exists
    try {
        await promises_1.default.access(folder() + "backup");
    }
    catch (e) {
        // if not, create it
        await promises_1.default.mkdir(folder() + "backup");
    }
}
exports.createDirectories = createDirectories;
function getFormattedDateTime() {
    const now = new Date();
    const year = now.getFullYear();
    const month = (now.getMonth() + 1).toString().padStart(2, "0");
    const day = now.getDate().toString().padStart(2, "0");
    const hours = now.getHours().toString().padStart(2, "0");
    const minutes = now.getMinutes().toString().padStart(2, "0");
    const seconds = now.getSeconds().toString().padStart(2, "0");
    return `${year}.${month}.${day}-${hours}.${minutes}.${seconds}`;
}

```

Contents of dist/src/deploy.d.ts:
```
export declare function deploy(params: {
    protect?: boolean;
    exclude?: string[];
}): Promise<void>;

```

Contents of dist/src/config.d.ts:
```
export declare function writeConfig(config: object): Promise<void>;
export declare function getConfig(): Promise<object | undefined>;

```

Contents of dist/src/options.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.options = void 0;
const cli_1 = require("./cli");
const files_1 = require("./files");
const config_1 = require("./config");
const debug_1 = require("./debug");
async function options() {
    if ((0, debug_1.debug)())
        console.log("Options:", cli_1.program.opts());
    const defaultConfig = (await (0, config_1.getConfig)()) ?? {};
    const folder = (0, files_1.rootFolder)();
    const packageJsonFilename = `${folder}/package.json`;
    if (!(0, files_1.isExist)(packageJsonFilename)) {
        console.error(`File ${packageJsonFilename} does not exist`);
        process.exit(1);
    }
    const packageJSON = await (0, files_1.loadPackageJson)();
    if (!packageJSON) {
        console.error(`package.json file is not found`);
        process.exit(1);
    }
    if ((0, debug_1.debug)())
        console.log("package.json:", {
            name: packageJSON.name,
            author: packageJSON.author,
            packageManager: packageJSON.packageManager,
        });
    const repo = cli_1.program.opts().repo ?? packageJSON.name ?? defaultConfig.repo;
    if (!repo) {
        console.error(`Repo name is not provided`);
        process.exit(1);
    }
    const developer = cli_1.program.opts().developer ?? packageJSON.author ?? defaultConfig.developer;
    if (!developer) {
        console.error(`Developer name is not provided`);
        process.exit(1);
    }
    const version = packageJSON.version ?? "0.1.0";
    const JWT = cli_1.program.opts().jwt ?? defaultConfig.jwt;
    if (!JWT) {
        console.error(`JWT is not provided`);
        process.exit(1);
    }
    let packageManager = cli_1.program.opts().pm;
    if (!packageManager &&
        packageJSON.packageManager !== undefined &&
        typeof packageJSON.packageManager == `string`) {
        packageManager = packageJSON.packageManager.split("@")[0];
    }
    if (!packageManager)
        packageManager = defaultConfig.packageManager;
    if (!packageManager)
        packageManager = "npm";
    const result = { developer, repo, version, JWT, packageManager };
    if ((0, debug_1.debug)())
        console.log("options used:", result);
    return result;
}
exports.options = options;

```

Contents of dist/src/cli.d.ts:
```
#! /usr/bin/env ts-node
import { Command } from "commander";
export declare const program: Command;

```

Contents of dist/src/upload.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upload = void 0;
const api_1 = require("./api");
const axios_1 = __importDefault(require("axios"));
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = require("./debug");
async function upload(params) {
    const { data, mimeType, developer, repo, version, JWT } = params;
    try {
        if ((0, debug_1.debug)())
            console.log("upload", { developer, repo, mimeType });
        let answer = await (0, api_1.zkCloudWorkerRequest)({
            command: "presignedUrl",
            developer,
            repo,
            args: version,
            task: "presignedUrl",
            metadata: `presignedUrl for ${repo} by ${developer}`,
            mode: "sync",
            JWT,
        });
        if ((0, debug_1.debug)())
            console.log(`presignedUrl api call result:`, answer);
        if (answer === undefined ||
            answer.url === undefined ||
            typeof answer.url !== "string") {
            console.error("Error: cannot get presignedUrl");
            process.exit(1);
        }
        const url = answer.url;
        if (url === undefined) {
            console.error(chalk_1.default.red("Error: cannot get presignedUrl"));
            process.exit(1);
        }
        //if (debug()) console.log(`presignedUrl:`, url);
        const response = await axios_1.default.put(url, data);
        if ((0, debug_1.debug)())
            console.log(chalk_1.default.green("Success: upload:"), response.status, response.statusText);
    }
    catch (error) {
        console.error(chalk_1.default.red("Error: upload:"), error);
        process.exit(1);
    }
}
exports.upload = upload;

```

Contents of dist/src/config.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.writeConfig = void 0;
const files_1 = require("./files");
const debug_1 = require("./debug");
const chalk_1 = __importDefault(require("chalk"));
async function writeConfig(config) {
    if ((0, debug_1.debug)())
        console.log("Writing config:\n", config);
    try {
        await (0, files_1.write)({
            data: config,
            filename: "config",
            allowRewrite: true,
        });
        console.log(`New default configuration has been set`, config);
    }
    catch (e) {
        console.error(chalk_1.default.red("Error saving config"), e);
    }
}
exports.writeConfig = writeConfig;
async function getConfig() {
    try {
        if (!(await (0, files_1.isFileExist)("config")))
            return undefined;
        const data = await (0, files_1.load)("config");
        if ((0, debug_1.debug)())
            console.log("config:", data);
        return data;
    }
    catch (e) {
        //console.error("Error reading config.json file:", e);
        return undefined;
    }
}
exports.getConfig = getConfig;

```

Contents of dist/src/deploy.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const files_1 = require("./files");
const options_1 = require("./options");
const zip_1 = require("./zip");
const upload_1 = require("./upload");
const install_1 = require("./install");
const debug_1 = require("./debug");
const chalk_1 = __importDefault(require("chalk"));
const promises_1 = __importDefault(require("fs/promises"));
const MAX_FILE_SIZE_MB = 1;
const MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;
async function deploy(params) {
    const { protect, exclude } = params;
    const { repo, developer, version, JWT, packageManager } = await (0, options_1.options)();
    console.log(`Deploying the repo to the cloud...`, {
        developer,
        repo,
        version,
        packageManager,
        ...params,
    });
    if (JWT === undefined) {
        console.error(chalk_1.default.red(`Error:`) + ` JWT must be provided to protect the repo`);
        process.exit(1);
    }
    console.log("Creating zip file...");
    await (0, files_1.createDirectories)();
    const zipFileName = await (0, zip_1.zip)(repo, exclude ?? []);
    if (!zipFileName) {
        console.error(chalk_1.default.red("Error creating zip file"));
        return;
    }
    if ((0, debug_1.debug)())
        console.log("Zip file created:", zipFileName);
    const stat = await promises_1.default.stat(zipFileName);
    const size = stat.size;
    if ((0, debug_1.debug)())
        console.log("Zip file size:", size.toLocaleString(), "bytes");
    if (size > MAX_FILE_SIZE) {
        console.error(chalk_1.default.red(`Error:`) +
            ` zip file is too big: ${(stat.size / 1024 / 1024).toFixed(2)} MB, maximum allowed size is ${MAX_FILE_SIZE_MB} MB)`);
        return;
    }
    console.log("Uploading zip file to zkCloudWorker's cloud storage...");
    const data = await (0, files_1.loadBinary)(zipFileName);
    if (!data) {
        console.error(chalk_1.default.red("Error reading zip file"));
        return;
    }
    await (0, upload_1.upload)({
        data,
        mimeType: "application/zip",
        developer,
        repo,
        version,
        JWT,
    });
    await (0, install_1.install)({
        JWT,
        repo,
        developer,
        version,
        size,
        packageManager,
        protect: protect ?? false,
    });
}
exports.deploy = deploy;

```

Contents of dist/src/zip.d.ts:
```
export declare function zip(repo: string, exclude: string[]): Promise<string | undefined>;

```

Contents of dist/src/files.d.ts:
```
/// <reference types="node" />
export declare function folder(): string;
export declare function rootFolder(): string;
export type FileEncoding = "text" | "binary";
export declare function write(params: {
    data: object;
    filename: string;
    allowRewrite?: boolean;
}): Promise<string | undefined>;
export declare function load(filename: string): Promise<any>;
export declare function loadPackageJson(): Promise<any>;
export declare function isFileExist(filename: string): Promise<boolean>;
export declare function loadBinary(filename: string): Promise<Buffer | undefined>;
export declare function loadText(filename: string): Promise<string | undefined>;
export declare function saveBinary(params: {
    data: Buffer;
    filename: string;
}): Promise<void>;
export declare function saveText(params: {
    data: string;
    filename: string;
}): Promise<void>;
export declare function isExist(name: string): Promise<boolean>;
export declare function createDirectories(): Promise<void>;

```

Contents of dist/src/verify.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = void 0;
const files_1 = require("./files");
const options_1 = require("./options");
const zip_1 = require("./zip");
const upload_1 = require("./upload");
const install_1 = require("./install");
const debug_1 = require("./debug");
const chalk_1 = __importDefault(require("chalk"));
const promises_1 = __importDefault(require("fs/promises"));
const MAX_FILE_SIZE_MB = 1;
const MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;
async function verify(params) {
    const { protect, exclude } = params;
    const { repo, developer, version, JWT, packageManager } = await (0, options_1.options)();
    console.log(`Verifying the contract...`, {
        developer,
        repo,
        version,
        packageManager,
        ...params,
    });
    if (JWT === undefined) {
        console.error(chalk_1.default.red(`Error:`) + ` JWT must be provided`);
        process.exit(1);
    }
    console.log("Creating zip file...");
    await (0, files_1.createDirectories)();
    const zipFileName = await (0, zip_1.zip)(repo, exclude ?? []);
    if (!zipFileName) {
        console.error(chalk_1.default.red("Error creating zip file"));
        return;
    }
    if ((0, debug_1.debug)())
        console.log("Zip file created:", zipFileName);
    const stat = await promises_1.default.stat(zipFileName);
    const size = stat.size;
    if ((0, debug_1.debug)())
        console.log("Zip file size:", size.toLocaleString(), "bytes");
    if (size > MAX_FILE_SIZE) {
        console.error(chalk_1.default.red(`Error:`) +
            ` zip file is too big: ${(stat.size / 1024 / 1024).toFixed(2)} MB, maximum allowed size is ${MAX_FILE_SIZE_MB} MB)`);
        return;
    }
    console.log("Uploading zip file to zkCloudWorker's cloud storage...");
    const data = await (0, files_1.loadBinary)(zipFileName);
    if (!data) {
        console.error(chalk_1.default.red("Error reading zip file"));
        return;
    }
    await (0, upload_1.upload)({
        data,
        mimeType: "application/zip",
        developer,
        repo,
        version,
        JWT,
    });
    await (0, install_1.install)({
        JWT,
        repo,
        developer,
        version,
        size,
        packageManager,
        protect: protect ?? false,
        verify: true,
    });
}
exports.verify = verify;

```

Contents of dist/src/watch.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = void 0;
const nats_1 = require("nats");
const options_1 = require("./options");
async function watch() {
    const endpoint = "http://cloud.zkcloudworker.com:4222";
    const { repo, developer, version, JWT, packageManager } = await (0, options_1.options)();
    const jobKeys = [`zkcloudworker.job.${clean(developer)}.${clean(repo)}`];
    await watchJobStatuses(endpoint, jobKeys).catch(console.error);
}
exports.watch = watch;
async function watchJobStatuses(endpoint, jobKeys) {
    const nc = await (0, nats_1.connect)({ servers: endpoint });
    const js = nc.jetstream();
    const kv = await js.views.kv("profiles");
    // Function to watch the status of a single job
    async function watchJobStatus(jobId) {
        let historyJob = true;
        const iterJob = await kv.watch({
            key: `zkcloudworker.jobStatus.${jobId}`,
            initializedFn: () => {
                historyJob = false;
            },
        });
        for await (const e of iterJob) {
            const jobStatus = JSON.parse(e.string());
            console.log(`${historyJob ? "History" : "Updated"} ${e.key} @ ${e.revision} -> `, jobStatus);
            if (jobStatus.status === "finished" || jobStatus.status === "failed") {
                break;
            }
        }
    }
    // Function to watch multiple job statuses concurrently
    async function watchMultipleJobs(key) {
        let history = true;
        const iter = await kv.watch({
            key,
            initializedFn: () => {
                history = false;
            },
        });
        for await (const e of iter) {
            const job = JSON.parse(e.string());
            console.log(`${history ? "History" : "Updated"} ${e.key} @ ${e.revision} -> `, job);
            // Start watching the jobStatus of the current job
            watchJobStatus(job.jobId);
        }
    }
    // Watch all jobs concurrently
    await Promise.all(jobKeys.map((key) => watchMultipleJobs(key)));
    await nc.drain();
}
function clean(input) {
    // Define the allowed characters based on the regular expression
    const allowedChars = /^[-/=.\w]+$/;
    // Filter the input string to include only the allowed characters
    const filtered = input
        .split("")
        .filter((char) => allowedChars.test(char))
        .join("");
    return filtered;
}

```

Contents of dist/src/install.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = void 0;
const api_1 = require("./api");
const sleep_1 = require("./sleep");
const debug_1 = require("./debug");
const chalk_1 = __importDefault(require("chalk"));
async function install(params) {
    const { JWT, repo, developer, version, size, packageManager, protect, verify, } = params;
    const command = verify === true ? "verify" : "deploy";
    const task = verify === true ? "verification" : "deployment";
    let answer = await (0, api_1.zkCloudWorkerRequest)({
        command,
        developer,
        repo,
        task: command,
        args: JSON.stringify({ packageManager, version, size, protect }, null, 2),
        metadata: `${command} ${repo} v. ${version} by ${developer} using ${packageManager} package manager`,
        mode: "async",
        JWT,
    });
    if ((0, debug_1.debug)())
        console.log(`deploy api call result:`, answer);
    const jobId = answer.jobId;
    console.log(`Installing repo, this may take a few minutes...`);
    let result = undefined;
    const allLogs = [];
    const printedLogs = [];
    function print(logs) {
        allLogs.push(...logs);
        logs.forEach((log) => {
            if (printedLogs.includes(log) === false) {
                printedLogs.push(log);
                // replace all occurrences of "error" with red color
                const text = log.replace(/error/gi, (matched) => chalk_1.default.red(matched));
                console.log(text);
            }
        });
    }
    let printLogs = (0, debug_1.debug)();
    let isAllLogsFetchedFlag = false;
    while ((result === undefined && answer.jobStatus !== "failed") ||
        isAllLogsFetchedFlag === false) {
        await (0, sleep_1.sleep)(5000);
        answer = await (0, api_1.zkCloudWorkerRequest)({
            command: "jobResult",
            jobId,
            includeLogs: printLogs,
            JWT,
        });
        //console.log("answer", answer);
        result = answer.result;
        isAllLogsFetchedFlag = (answer.isFullLog ?? false) || isAllLogsFetchedFlag;
        if (printLogs &&
            answer?.logs !== undefined &&
            answer?.logs !== null &&
            Array.isArray(answer.logs) === true)
            print(answer.logs);
        if (answer.jobStatus === "failed" ||
            (answer.result !== undefined &&
                result !== "deployed" &&
                result !== "verified")) {
            printLogs = true;
        }
        else if (answer.jobStatus === "finished" &&
            (result === "deployed" || result === "verified")) {
            isAllLogsFetchedFlag = (0, debug_1.debug)() === false;
        }
    }
    if (result !== "deployed" && result !== "verified") {
        console.log(chalk_1.default.red(`ERROR: ${task} failed`) +
            (result !== undefined ? `: ${result}` : ""));
        process.exit(1);
    }
    else {
        console.log(chalk_1.default.green(`SUCCESS: ${task} completed`));
    }
}
exports.install = install;

```

Contents of dist/src/watch.d.ts:
```
export declare function watch(): Promise<void>;

```

Contents of dist/src/cli.js:
```
#! /usr/bin/env ts-node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.program = void 0;
const commander_1 = require("commander");
const config_1 = require("./config");
const deploy_1 = require("./deploy");
const verify_1 = require("./verify");
const package_json_1 = require("../package.json");
const watch_1 = require("./watch");
exports.program = new commander_1.Command();
exports.program
    .name("zkCloudWorker")
    .description("zkCloudWorker CLI tool")
    .version(package_json_1.version)
    .option("-v, --verbose", "verbose mode, print all logs")
    .option("-f, --folder <folder>", "folder with repo")
    .option("-r, --repo <repo>", "repo name")
    .option("-d, --developer <developer>", "developer name")
    .option("-m, --manager <pm>", "package manager: yarn | npm")
    .option("-j, --jwt <jwt>", "JWT token");
exports.program
    .command("deploy")
    .description("deploy the repo to the cloud")
    .option("-p, --protect", "protect the deployment from changes")
    .option("-e, --exclude [names...]", "exclude files and folders from deployment")
    .action(async (options) => {
    console.time("deployed");
    await (0, deploy_1.deploy)(options);
    console.timeEnd("deployed");
});
exports.program
    .command("verify")
    .description("verify the contract of the repo")
    .option("-e, --exclude [names...]", "exclude files and folders from deployment")
    .action(async (options) => {
    console.time("verified");
    await (0, verify_1.verify)(options);
    console.timeEnd("verified");
});
exports.program
    .command("watch")
    .description("watch the job events for the repo")
    .action(async () => {
    console.time("deployed");
    await (0, watch_1.watch)();
    console.timeEnd("deployed");
});
exports.program
    .command("config")
    .description("save default configuration")
    .action(async (options) => {
    console.log(`Saving default configuration...`);
    await (0, config_1.writeConfig)(exports.program.opts() ?? {});
});
//TODO: add the unprotect command after JWT format upgrade
async function main() {
    console.log(`zkCloudWorker CLI tool v${package_json_1.version} (c) DFST 2024 www.zkcloudworker.com\n`);
    await exports.program.parseAsync();
}
main()
    .then(() => process.exit(0))
    .catch((error) => {
    console.error(error);
    process.exit(1);
});

```

Contents of dist/src/zip.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zip = void 0;
const fs_1 = require("fs");
const archiver_1 = __importDefault(require("archiver"));
const files_1 = require("./files");
const debug_1 = require("./debug");
const chalk_1 = __importDefault(require("chalk"));
async function zip(repo, exclude) {
    try {
        const sourceDir = (0, files_1.rootFolder)();
        const zipFileName = (0, files_1.folder)() + `${repo}.zip`;
        if (await (0, files_1.isExist)(zipFileName)) {
            if ((0, debug_1.debug)())
                console.log(`Removing existing zip file: ${zipFileName}`);
            await fs_1.promises.unlink(zipFileName);
        }
        const output = (0, fs_1.createWriteStream)(zipFileName, { encoding: "binary" });
        const archive = (0, archiver_1.default)("zip", {
            zlib: { level: 9 },
        });
        const streamFinished = new Promise((resolve, reject) => {
            output.on("close", resolve);
            output.on("error", reject);
        });
        archive.pipe(output);
        archive.glob("**/*", {
            cwd: sourceDir,
            ignore: [
                ".git/**",
                "node_modules/**",
                "yarn.lock",
                ".yarn/**",
                ".zkcloudworker/**",
                "dist/**",
                "test/**",
                "tests/**",
                "cache/**",
                "pnp.cjs",
                ".pnp.loader.mjs",
                ".vscode/**",
                ".DS_Store",
                ...exclude,
                ...exclude.map((e) => e + "/**"),
            ],
            dot: true,
        });
        await new Promise((resolve, reject) => {
            output.on("close", resolve);
            output.on("error", reject);
            archive.finalize();
        });
        await streamFinished;
        return zipFileName;
    }
    catch (e) {
        console.error(chalk_1.default.red(`Error zipping ${repo}`), e);
        return undefined;
    }
}
exports.zip = zip;

```

Contents of dist/src/api.js:
```
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zkCloudWorkerRequest = void 0;
const axios_1 = __importDefault(require("axios"));
const chalk_1 = __importDefault(require("chalk"));
async function zkCloudWorkerRequest(params) {
    try {
        const { command, task, transactions, args, metadata, mode, jobId, repo, developer, JWT, includeLogs, } = params;
        const apiData = {
            auth: "M6t4jtbBAFFXhLERHQWyEB9JA9xi4cWqmYduaCXtbrFjb7yaY7TyaXDunKDJNiUTBEcyUomNXJgC",
            command: command,
            jwtToken: JWT,
            data: {
                task,
                transactions: transactions ?? [],
                args,
                repo,
                developer,
                metadata,
                mode: mode ?? "sync",
                jobId,
                includeLogs,
            },
            chain: `devnet`,
        };
        const endpoint = "https://api.zkcloudworker.com/v1/devnet";
        const response = await axios_1.default.post(endpoint, apiData);
        return response.data;
    }
    catch (error) {
        console.error(chalk_1.default.red("Error while sending request to zkCloudWorker:"), error?.message ?? error?.data ?? error);
        process.exit(1);
    }
}
exports.zkCloudWorkerRequest = zkCloudWorkerRequest;

```

Contents of dist/src/sleep.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = void 0;
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
exports.sleep = sleep;

```

Contents of dist/src/install.d.ts:
```
export declare function install(params: {
    JWT: string;
    repo: string;
    developer: string;
    version: string;
    size: number;
    protect: boolean;
    packageManager: string;
    verify?: boolean;
}): Promise<void>;

```

Contents of dist/src/debug.js:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debug = void 0;
const cli_1 = require("./cli");
function debug() {
    return cli_1.program.opts().verbose ?? false;
}
exports.debug = debug;

```

Contents of src/verify.ts:
```
import { createDirectories, loadBinary } from "./files";
import { options } from "./options";
import { zip } from "./zip";
import { upload } from "./upload";
import { install } from "./install";
import { debug } from "./debug";
import chalk from "chalk";
import fs from "fs/promises";

const MAX_FILE_SIZE_MB = 1;
const MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;

export async function verify(params: {
  protect?: boolean;
  exclude?: string[];
}) {
  const { protect, exclude } = params;
  const { repo, developer, version, JWT, packageManager } = await options();
  console.log(`Verifying the contract...`, {
    developer,
    repo,
    version,
    packageManager,
    ...params,
  });

  if (JWT === undefined) {
    console.error(chalk.red(`Error:`) + ` JWT must be provided`);
    process.exit(1);
  }

  console.log("Creating zip file...");
  await createDirectories();
  const zipFileName = await zip(repo, exclude ?? []);
  if (!zipFileName) {
    console.error(chalk.red("Error creating zip file"));
    return;
  }
  if (debug()) console.log("Zip file created:", zipFileName);

  const stat = await fs.stat(zipFileName);
  const size = stat.size;
  if (debug()) console.log("Zip file size:", size.toLocaleString(), "bytes");
  if (size > MAX_FILE_SIZE) {
    console.error(
      chalk.red(`Error:`) +
        ` zip file is too big: ${(stat.size / 1024 / 1024).toFixed(
          2
        )} MB, maximum allowed size is ${MAX_FILE_SIZE_MB} MB)`
    );
    return;
  }
  console.log("Uploading zip file to zkCloudWorker's cloud storage...");
  const data = await loadBinary(zipFileName);
  if (!data) {
    console.error(chalk.red("Error reading zip file"));
    return;
  }
  await upload({
    data,
    mimeType: "application/zip",
    developer,
    repo,
    version,
    JWT,
  });

  await install({
    JWT,
    repo,
    developer,
    version,
    size,
    packageManager,
    protect: protect ?? false,
    verify: true,
  });
}

```

Contents of src/watch.ts:
```
import { connect } from "nats";
import { options } from "./options";

export async function watch() {
  const endpoint = "http://cloud.zkcloudworker.com:4222";
  const { repo, developer, version, JWT, packageManager } = await options();
  const jobKeys = [`zkcloudworker.job.${clean(developer)}.${clean(repo)}`];

  await watchJobStatuses(endpoint, jobKeys).catch(console.error);
}

async function watchJobStatuses(endpoint: string, jobKeys: string[]) {
  const nc = await connect({ servers: endpoint });
  const js = nc.jetstream();
  const kv = await js.views.kv("profiles");

  // Function to watch the status of a single job
  async function watchJobStatus(jobId: string) {
    let historyJob = true;
    const iterJob = await kv.watch({
      key: `zkcloudworker.jobStatus.${jobId}`,
      initializedFn: () => {
        historyJob = false;
      },
    });

    for await (const e of iterJob) {
      const jobStatus = JSON.parse(e.string());
      console.log(
        `${historyJob ? "History" : "Updated"} ${e.key} @ ${e.revision} -> `,
        jobStatus
      );
      if (jobStatus.status === "finished" || jobStatus.status === "failed") {
        break;
      }
    }
  }

  // Function to watch multiple job statuses concurrently
  async function watchMultipleJobs(key: string) {
    let history = true;
    const iter = await kv.watch({
      key,
      initializedFn: () => {
        history = false;
      },
    });

    for await (const e of iter) {
      const job = JSON.parse(e.string());
      console.log(
        `${history ? "History" : "Updated"} ${e.key} @ ${e.revision} -> `,
        job
      );

      // Start watching the jobStatus of the current job
      watchJobStatus(job.jobId);
    }
  }

  // Watch all jobs concurrently
  await Promise.all(jobKeys.map((key) => watchMultipleJobs(key)));

  await nc.drain();
}

function clean(input: string): string {
  // Define the allowed characters based on the regular expression
  const allowedChars = /^[-/=.\w]+$/;

  // Filter the input string to include only the allowed characters
  const filtered = input
    .split("")
    .filter((char) => allowedChars.test(char))
    .join("");

  return filtered;
}

```

Contents of src/install.ts:
```
import { zkCloudWorkerRequest } from "./api";
import { sleep } from "./sleep";
import { debug } from "./debug";
import chalk from "chalk";

export async function install(params: {
  JWT: string;
  repo: string;
  developer: string;
  version: string;
  size: number;
  protect: boolean;
  packageManager: string;
  verify?: boolean;
}) {
  const {
    JWT,
    repo,
    developer,
    version,
    size,
    packageManager,
    protect,
    verify,
  } = params;

  const command = verify === true ? "verify" : "deploy";
  const task = verify === true ? "verification" : "deployment";
  let answer = await zkCloudWorkerRequest({
    command,
    developer,
    repo,
    task: command,
    args: JSON.stringify({ packageManager, version, size, protect }, null, 2),
    metadata: `${command} ${repo} v. ${version} by ${developer} using ${packageManager} package manager`,
    mode: "async",
    JWT,
  });
  if (debug()) console.log(`deploy api call result:`, answer);
  const jobId = answer.jobId;
  console.log(`Installing repo, this may take a few minutes...`);
  let result: string | undefined = undefined;
  const allLogs: string[] = [];
  const printedLogs: string[] = [];

  function print(logs: string[]) {
    allLogs.push(...logs);
    logs.forEach((log) => {
      if (printedLogs.includes(log) === false) {
        printedLogs.push(log);
        // replace all occurrences of "error" with red color
        const text = log.replace(/error/gi, (matched) => chalk.red(matched));
        console.log(text);
      }
    });
  }
  let printLogs = debug();
  let isAllLogsFetchedFlag = false;

  while (
    (result === undefined && answer.jobStatus !== "failed") ||
    isAllLogsFetchedFlag === false
  ) {
    await sleep(5000);
    answer = await zkCloudWorkerRequest({
      command: "jobResult",
      jobId,
      includeLogs: printLogs,
      JWT,
    });
    //console.log("answer", answer);
    result = answer.result;
    isAllLogsFetchedFlag = (answer.isFullLog ?? false) || isAllLogsFetchedFlag;

    if (
      printLogs &&
      answer?.logs !== undefined &&
      answer?.logs !== null &&
      Array.isArray(answer.logs) === true
    )
      print(answer.logs);

    if (
      answer.jobStatus === "failed" ||
      (answer.result !== undefined &&
        result !== "deployed" &&
        result !== "verified")
    ) {
      printLogs = true;
    } else if (
      answer.jobStatus === "finished" &&
      (result === "deployed" || result === "verified")
    ) {
      isAllLogsFetchedFlag = debug() === false;
    }
  }
  if (result !== "deployed" && result !== "verified") {
    console.log(
      chalk.red(`ERROR: ${task} failed`) +
        (result !== undefined ? `: ${result}` : "")
    );
    process.exit(1);
  } else {
    console.log(chalk.green(`SUCCESS: ${task} completed`));
  }
}

```

Contents of src/sleep.ts:
```
export function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

```

Contents of src/debug.ts:
```
import { program } from "./cli";

export function debug(): boolean {
  return program.opts().verbose ?? false;
}

```

Contents of src/cli.ts:
```
#! /usr/bin/env ts-node
import { Command } from "commander";
import { writeConfig } from "./config";
import { deploy } from "./deploy";
import { verify } from "./verify";
import { version } from "../package.json";
import { watch } from "./watch";

export const program = new Command();

program
  .name("zkCloudWorker")
  .description("zkCloudWorker CLI tool")
  .version(version)
  .option("-v, --verbose", "verbose mode, print all logs")
  .option("-f, --folder <folder>", "folder with repo")
  .option("-r, --repo <repo>", "repo name")
  .option("-d, --developer <developer>", "developer name")
  .option("-m, --manager <pm>", "package manager: yarn | npm")
  .option("-j, --jwt <jwt>", "JWT token");

program
  .command("deploy")
  .description("deploy the repo to the cloud")
  .option("-p, --protect", "protect the deployment from changes")
  .option(
    "-e, --exclude [names...]",
    "exclude files and folders from deployment"
  )
  .action(async (options) => {
    console.time("deployed");
    await deploy(options);
    console.timeEnd("deployed");
  });

program
  .command("verify")
  .description("verify the contract of the repo")
  .option(
    "-e, --exclude [names...]",
    "exclude files and folders from deployment"
  )
  .action(async (options) => {
    console.time("verified");
    await verify(options);
    console.timeEnd("verified");
  });

program
  .command("watch")
  .description("watch the job events for the repo")
  .action(async () => {
    console.time("deployed");
    await watch();
    console.timeEnd("deployed");
  });

program
  .command("config")
  .description("save default configuration")
  .action(async (options) => {
    console.log(`Saving default configuration...`);
    await writeConfig(program.opts() ?? {});
  });

//TODO: add the unprotect command after JWT format upgrade

async function main() {
  console.log(
    `zkCloudWorker CLI tool v${version} (c) DFST 2024 www.zkcloudworker.com\n`
  );
  await program.parseAsync();
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

```

Contents of src/api.ts:
```
import axios from "axios";
import chalk from "chalk";

export async function zkCloudWorkerRequest(params: {
  command: string;
  task?: string;
  transactions?: string[];
  args?: string;
  metadata?: string;
  mode?: string;
  jobId?: string;
  repo?: string;
  developer?: string;
  JWT: string;
  includeLogs?: boolean;
}) {
  try {
    const {
      command,
      task,
      transactions,
      args,
      metadata,
      mode,
      jobId,
      repo,
      developer,
      JWT,
      includeLogs,
    } = params;
    const apiData = {
      auth: "M6t4jtbBAFFXhLERHQWyEB9JA9xi4cWqmYduaCXtbrFjb7yaY7TyaXDunKDJNiUTBEcyUomNXJgC",
      command: command,
      jwtToken: JWT,
      data: {
        task,
        transactions: transactions ?? [],
        args,
        repo,
        developer,
        metadata,
        mode: mode ?? "sync",
        jobId,
        includeLogs,
      },
      chain: `devnet`,
    };
    const endpoint = "https://api.zkcloudworker.com/v1/devnet";

    const response = await axios.post(endpoint, apiData);
    return response.data;
  } catch (error: any) {
    console.error(
      chalk.red("Error while sending request to zkCloudWorker:"),
      error?.message ?? error?.data ?? error
    );
    process.exit(1);
  }
}

```

Contents of src/zip.ts:
```
import { createWriteStream, promises as fs } from "fs";
import archiver from "archiver";
import { folder, rootFolder, isExist } from "./files";
import { debug } from "./debug";
import chalk from "chalk";

export async function zip(
  repo: string,
  exclude: string[]
): Promise<string | undefined> {
  try {
    const sourceDir = rootFolder();
    const zipFileName = folder() + `${repo}.zip`;

    if (await isExist(zipFileName)) {
      if (debug()) console.log(`Removing existing zip file: ${zipFileName}`);
      await fs.unlink(zipFileName);
    }

    const output = createWriteStream(zipFileName, { encoding: "binary" });
    const archive = archiver("zip", {
      zlib: { level: 9 },
    });

    const streamFinished = new Promise((resolve, reject) => {
      output.on("close", resolve);
      output.on("error", reject);
    });

    archive.pipe(output);

    archive.glob("**/*", {
      cwd: sourceDir,
      ignore: [
        ".git/**",
        "node_modules/**",
        "yarn.lock",
        ".yarn/**",
        ".zkcloudworker/**",
        "dist/**",
        "test/**",
        "tests/**",
        "cache/**",
        "pnp.cjs",
        ".pnp.loader.mjs",
        ".vscode/**",
        ".DS_Store",
        ...exclude,
        ...exclude.map((e) => e + "/**"),
      ],
      dot: true,
    });

    await new Promise((resolve, reject) => {
      output.on("close", resolve);
      output.on("error", reject);
      archive.finalize();
    });

    await streamFinished;
    return zipFileName;
  } catch (e) {
    console.error(chalk.red(`Error zipping ${repo}`), e);
    return undefined;
  }
}

```

Contents of src/upload.ts:
```
import { zkCloudWorkerRequest } from "./api";
import axios from "axios";
import chalk from "chalk";
import { debug } from "./debug";

export async function upload(params: {
  data: Buffer;
  mimeType: string | undefined;
  developer: string;
  repo: string;
  version: string;
  JWT: string;
}): Promise<void> {
  const { data, mimeType, developer, repo, version, JWT } = params;
  try {
    if (debug()) console.log("upload", { developer, repo, mimeType });

    let answer = await zkCloudWorkerRequest({
      command: "presignedUrl",
      developer,
      repo,
      args: version,
      task: "presignedUrl",
      metadata: `presignedUrl for ${repo} by ${developer}`,
      mode: "sync",
      JWT,
    });
    if (debug()) console.log(`presignedUrl api call result:`, answer);
    if (
      answer === undefined ||
      answer.url === undefined ||
      typeof answer.url !== "string"
    ) {
      console.error("Error: cannot get presignedUrl");
      process.exit(1);
    }
    const url = answer.url;
    if (url === undefined) {
      console.error(chalk.red("Error: cannot get presignedUrl"));
      process.exit(1);
    }
    //if (debug()) console.log(`presignedUrl:`, url);

    const response = await axios.put(url, data);

    if (debug())
      console.log(
        chalk.green("Success: upload:"),
        response.status,
        response.statusText
      );
  } catch (error: any) {
    console.error(chalk.red("Error: upload:"), error);
    process.exit(1);
  }
}

```

Contents of src/deploy.ts:
```
import { createDirectories, loadBinary } from "./files";
import { options } from "./options";
import { zip } from "./zip";
import { upload } from "./upload";
import { install } from "./install";
import { debug } from "./debug";
import chalk from "chalk";
import fs from "fs/promises";

const MAX_FILE_SIZE_MB = 1;
const MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;

export async function deploy(params: {
  protect?: boolean;
  exclude?: string[];
}) {
  const { protect, exclude } = params;
  const { repo, developer, version, JWT, packageManager } = await options();
  console.log(`Deploying the repo to the cloud...`, {
    developer,
    repo,
    version,
    packageManager,
    ...params,
  });

  if (JWT === undefined) {
    console.error(
      chalk.red(`Error:`) + ` JWT must be provided to protect the repo`
    );
    process.exit(1);
  }

  console.log("Creating zip file...");
  await createDirectories();
  const zipFileName = await zip(repo, exclude ?? []);
  if (!zipFileName) {
    console.error(chalk.red("Error creating zip file"));
    return;
  }
  if (debug()) console.log("Zip file created:", zipFileName);

  const stat = await fs.stat(zipFileName);
  const size = stat.size;
  if (debug()) console.log("Zip file size:", size.toLocaleString(), "bytes");
  if (size > MAX_FILE_SIZE) {
    console.error(
      chalk.red(`Error:`) +
        ` zip file is too big: ${(stat.size / 1024 / 1024).toFixed(
          2
        )} MB, maximum allowed size is ${MAX_FILE_SIZE_MB} MB)`
    );
    return;
  }
  console.log("Uploading zip file to zkCloudWorker's cloud storage...");
  const data = await loadBinary(zipFileName);
  if (!data) {
    console.error(chalk.red("Error reading zip file"));
    return;
  }
  await upload({
    data,
    mimeType: "application/zip",
    developer,
    repo,
    version,
    JWT,
  });

  await install({
    JWT,
    repo,
    developer,
    version,
    size,
    packageManager,
    protect: protect ?? false,
  });
}

```

Contents of src/config.ts:
```
import { write, load, isFileExist } from "./files";
import { debug } from "./debug";
import chalk from "chalk";

export async function writeConfig(config: object): Promise<void> {
  if (debug()) console.log("Writing config:\n", config);
  try {
    await write({
      data: config,
      filename: "config",
      allowRewrite: true,
    });
    console.log(`New default configuration has been set`, config);
  } catch (e) {
    console.error(chalk.red("Error saving config"), e);
  }
}

export async function getConfig(): Promise<object | undefined> {
  try {
    if (!(await isFileExist("config"))) return undefined;
    const data = await load("config");
    if (debug()) console.log("config:", data);
    return data;
  } catch (e) {
    //console.error("Error reading config.json file:", e);
    return undefined;
  }
}

```

Contents of src/files.ts:
```
import fs from "fs/promises";
import { debug } from "./debug";
import { program } from "./cli";

export function folder(): string {
  let rootFolder = program.opts().folder ?? "./";
  if (rootFolder.endsWith("/") === false) rootFolder += "/";
  return rootFolder + ".zkcloudworker/";
}

export function rootFolder(): string {
  let rootFolder = program.opts().folder ?? "./";
  if (rootFolder.endsWith("/") === false) rootFolder += "/";
  return rootFolder;
}

export type FileEncoding = "text" | "binary";

export async function write(params: {
  data: object;
  filename: string;
  allowRewrite?: boolean;
}): Promise<string | undefined> {
  const { data, filename, allowRewrite } = params;

  const name = folder() + filename + ".json";
  try {
    await createDirectories();
    if (debug())
      console.log("Writing file", {
        data,
        filename,
        allowRewrite,
      });

    if (!allowRewrite && (await isExist(name))) {
      console.error(`File ${name} already exists`);
      return;
    }
    await backup(filename);

    await fs.writeFile(name, JSON.stringify(data, null, 2));
    return name;
  } catch (e) {
    console.error(`Error writing file ${name}`);
    return undefined;
  }
}

export async function load(filename: string) {
  const name = folder() + filename + ".json";
  try {
    const filedata = await fs.readFile(name, "utf8");
    const data = JSON.parse(filedata);
    return data;
  } catch (e) {
    console.error(`File ${name} does not exist or has wrong format`);
    return undefined;
  }
}

export async function loadPackageJson() {
  const name = rootFolder() + "package.json";
  try {
    const filedata = await fs.readFile(name, "utf8");
    const data = JSON.parse(filedata);
    return data;
  } catch (e) {
    console.error(`File ${name} does not exist or has wrong format`);
    return undefined;
  }
}

export async function isFileExist(filename: string): Promise<boolean> {
  const name = folder() + filename + ".json";
  try {
    if (debug())
      console.log("isFileExist", {
        filename,
        name,
      });

    if (await isExist(name)) return true;
    else return false;
  } catch (e) {
    console.error(`Error checking file ${name}`);
    return false;
  }
}

export async function loadBinary(filename: string) {
  try {
    return await fs.readFile(filename);
  } catch (e) {
    console.error(`Cannot read file ${filename}`, e);
    return undefined;
  }
}

export async function loadText(filename: string) {
  try {
    return await fs.readFile(filename, "utf8");
  } catch (e) {
    console.error(`Cannot read file ${filename}`, e);
    return undefined;
  }
}

export async function saveBinary(params: { data: Buffer; filename: string }) {
  const { data, filename } = params;
  try {
    await fs.writeFile(filename, data, "binary");
  } catch (e) {
    console.error(`Error writing file ${filename}`, e);
  }
}

export async function saveText(params: { data: string; filename: string }) {
  const { data, filename } = params;
  try {
    await fs.writeFile(filename, data, "utf8");
  } catch (e) {
    console.error(`Error writing file ${filename}`, e);
  }
}

export async function isExist(name: string): Promise<boolean> {
  // check if file exists
  try {
    await fs.access(name);
    return true;
  } catch (e) {
    // if not, return
    return false;
  }
}

async function backup(filename: string) {
  const name = folder() + filename + ".json";

  const backupName =
    folder() + "backup/" + filename + "." + getFormattedDateTime() + ".json";
  // check if file exists
  try {
    await fs.access(name);
  } catch (e) {
    // if not, return
    return;
  }
  // copy file to backup
  await fs.copyFile(name, backupName);
}

export async function createDirectories() {
  // check if data directory exists
  try {
    await fs.access(folder());
  } catch (e) {
    // if not, create it
    await fs.mkdir(folder());
  }
  // check if data directory exists
  try {
    await fs.access(folder() + "backup");
  } catch (e) {
    // if not, create it
    await fs.mkdir(folder() + "backup");
  }
}

function getFormattedDateTime(): string {
  const now = new Date();

  const year = now.getFullYear();
  const month = (now.getMonth() + 1).toString().padStart(2, "0");
  const day = now.getDate().toString().padStart(2, "0");

  const hours = now.getHours().toString().padStart(2, "0");
  const minutes = now.getMinutes().toString().padStart(2, "0");
  const seconds = now.getSeconds().toString().padStart(2, "0");

  return `${year}.${month}.${day}-${hours}.${minutes}.${seconds}`;
}

```

Contents of src/options.ts:
```
import { program } from "./cli";
import { rootFolder, isExist, loadPackageJson, load } from "./files";
import { getConfig } from "./config";
import { debug } from "./debug";

export async function options(): Promise<{
  developer: string;
  repo: string;
  version: string;
  JWT: string;
  packageManager: string;
}> {
  if (debug()) console.log("Options:", program.opts());
  const defaultConfig: any = (await getConfig()) ?? {};
  const folder = rootFolder();
  const packageJsonFilename = `${folder}/package.json`;
  if (!isExist(packageJsonFilename)) {
    console.error(`File ${packageJsonFilename} does not exist`);
    process.exit(1);
  }
  const packageJSON = await loadPackageJson();

  if (!packageJSON) {
    console.error(`package.json file is not found`);
    process.exit(1);
  }
  if (debug())
    console.log("package.json:", {
      name: packageJSON.name,
      author: packageJSON.author,
      packageManager: packageJSON.packageManager,
    });
  const repo = program.opts().repo ?? packageJSON.name ?? defaultConfig.repo;
  if (!repo) {
    console.error(`Repo name is not provided`);
    process.exit(1);
  }
  const developer =
    program.opts().developer ?? packageJSON.author ?? defaultConfig.developer;
  if (!developer) {
    console.error(`Developer name is not provided`);
    process.exit(1);
  }

  const version = packageJSON.version ?? "0.1.0";

  const JWT = program.opts().jwt ?? defaultConfig.jwt;
  if (!JWT) {
    console.error(`JWT is not provided`);
    process.exit(1);
  }

  let packageManager = program.opts().pm;

  if (
    !packageManager &&
    packageJSON.packageManager !== undefined &&
    typeof packageJSON.packageManager == `string`
  ) {
    packageManager = (packageJSON.packageManager as string).split("@")[0];
  }
  if (!packageManager) packageManager = defaultConfig.packageManager;
  if (!packageManager) packageManager = "npm";

  const result = { developer, repo, version, JWT, packageManager };
  if (debug()) console.log("options used:", result);
  return result;
}

```

